{"name":"HTTP","slug":"HTTP","count":1,"postlist":[{"title":"關於 HttpClient 使用方式","slug":"HttpClient","date":"2023-11-27T13:32:48.000Z","updated":"2023-11-27T13:40:05.011Z","comments":true,"path":"api/articles/HttpClient.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"關於-HttpClient\"><a href=\"#關於-HttpClient\" class=\"headerlink\" title=\"關於 HttpClient\"></a>關於 HttpClient</h1><p>因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在<strong>CSharp</strong>中最常使用的類別庫就是<code>HttpClient.cs</code>，但是<code>HttpClient.cs</code>使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。</p>\n<h2 id=\"官方不建議使用方式\"><a href=\"#官方不建議使用方式\" class=\"headerlink\" title=\"官方不建議使用方式\"></a>官方不建議使用方式</h2><br>\n\n<h3 id=\"直接使用using-HttpClient\"><a href=\"#直接使用using-HttpClient\" class=\"headerlink\" title=\"直接使用using HttpClient\"></a>直接使用<code>using</code> HttpClient</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">static async Task Main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tvar url = &quot;http://localhost:5259/WeatherForecast&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tint requestCount = 10000; // 設定請求的次數</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor (int i = 0; i &lt; requestCount; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tusing (var client = new HttpClient())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttry</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tvar response = await client.GetAsync(url);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tresponse.EnsureSuccessStatusCode();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcatch (Exception ex)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tConsole.WriteLine($&quot;An error occurred: &#123;ex.Message&#125;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsole.WriteLine(&quot;Finish!!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>建立一支API 讓這段程式碼可以去Connection，很有可能會發生以下的錯誤。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">An error occurred: System.Net.Http.HttpRequestException: 一次只能用一個通訊端位址 (通訊協定/網路位址/連接埠)。 (localhost:5259)</span><br><span class=\"line\"> ---&gt; System.Net.Sockets.SocketException (10048): 一次只能用一個通訊端位址 (通訊協定/網路位址/連接埠)。</span><br><span class=\"line\">   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)</span><br><span class=\"line\">   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)</span><br><span class=\"line\">   at System.Net.Sockets.Socket.&lt;ConnectAsync&gt;g__WaitForConnectWithCancellation|281_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)</span><br><span class=\"line\">   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken)</span><br><span class=\"line\">   --- End of inner exception stack trace ---</span><br><span class=\"line\">    // 略</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>在官方文件有提到這一點</p>\n<p><a href=\"https://learn.microsoft.com/zh-tw/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net\">.NET 中可用的原始 HttpClient 類別問題</a></p>\n<blockquote>\n<p>雖然這個類別會實作 IDisposable，但不建議在 using 陳述式內加以宣告及具現化，因為處置 <code>HttpClient.cs</code> 物件時，底層通訊端並不會立即釋放，而這可能會導致「通訊端耗盡」問題。 </p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"在Dependency-Injection-中使用Singleton或是宣告靜態物件\"><a href=\"#在Dependency-Injection-中使用Singleton或是宣告靜態物件\" class=\"headerlink\" title=\"在Dependency Injection 中使用Singleton或是宣告靜態物件\"></a>在Dependency Injection 中使用Singleton或是宣告靜態物件</h3><blockquote>\n<p>開發人員遇到的另一個問題是在長時間執行的處理序中使用 HttpClient 的共用執行個體時。 在 HttpClient 具現化為 singleton 或靜態物件的情況下，其並無法處理 DNS 變更</p>\n</blockquote>\n<p>例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 註冊成Singleton</span><br><span class=\"line\">builder.Services.AddSingleton&lt;HttpClient&gt;();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<br>\n<br>\n\n\n<h2 id=\"解決方式之一-使用IHttpClientFactory-cs\"><a href=\"#解決方式之一-使用IHttpClientFactory-cs\" class=\"headerlink\" title=\"解決方式之一 使用IHttpClientFactory.cs\"></a>解決方式之一 使用<code>IHttpClientFactory.cs</code></h2><p>在 .Net Core引入<code>IHttpClientFactory.cs</code>介面去建立<code>HttpClient.cs</code>。<br>特點是可以由<code>IHttpClientFactory.cs</code>去管理HttpMessageHandler的生命週期，避免自行管理<code>HttpClient.cs</code>的生命週期。</p>\n<h3 id=\"基本使用方式\"><a href=\"#基本使用方式\" class=\"headerlink\" title=\"基本使用方式\"></a>基本使用方式</h3><p>需要在Dependency Injection裡面加上了<code> services.AddHttpClient();</code> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 加上這一行</span><br><span class=\"line\">builder.Services.AddHttpClient();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"具名HttpClient\"><a href=\"#具名HttpClient\" class=\"headerlink\" title=\"具名HttpClient\"></a>具名HttpClient</h3><ul>\n<li>應用程式需要不同的HttpClient用法或是設定。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 加上這一行</span><br><span class=\"line\">builder.Services.AddHttpClient(&quot;YourName&quot;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"調用方\"><a href=\"#調用方\" class=\"headerlink\" title=\"調用方\"></a>調用方</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Repository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IHttpClientFactory _httpClientFactory;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Repository(IHttpClientFactory httpClientFactory)  </span><br><span class=\"line\">    &#123;        </span><br><span class=\"line\">        this._httpClientFactory = httpClientFactory;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public async Task&lt;Todo[]&gt; GetToDos()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string url = &quot;your service url&quot;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        using var client = _httpClientFactory.CreateClient(&quot;YourName&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        var response = await client.GetFromJsonAsync&lt;Todo[]&gt;(url,new JsonSerializerOptions(JsonSerializerDefaults.Web));  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","text":"關於 HttpClient因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在CSharp中最常使用的類別庫就是HttpClient.cs，但是HttpClient.cs使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。官方不建議使用方式<br","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":3,"path":"api/categories/WebAPI.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/categories/HTTP.json"}],"tags":[{"name":"2023","slug":"2023","count":8,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":7,"path":"api/tags/Net-Core.json"}]}]}