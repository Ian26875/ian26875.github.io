{"name":"WebAPI","slug":"WebAPI","count":3,"postlist":[{"title":"Asp.Net Core API Controller繼承","slug":"AspNetCore_WebAPI","date":"2023-04-16T12:40:48.000Z","updated":"2023-04-23T06:10:08.314Z","comments":true,"path":"api/articles/AspNetCore_WebAPI.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Net-Core-Web-API-–-API-Controller-的繼承\"><a href=\"#Net-Core-Web-API-–-API-Controller-的繼承\" class=\"headerlink\" title=\".Net Core Web API – API Controller 的繼承\"></a>.Net Core Web API – API Controller 的繼承</h1><h2 id=\"API-Controller-繼承\"><a href=\"#API-Controller-繼承\" class=\"headerlink\" title=\"API Controller 繼承\"></a>API Controller 繼承</h2><p>建立新的API Controller類別時，繼承到底要繼承Controller還是ControllerBase? 這兩個類別有什麼差異?<br>當翻開原始碼時候可以發現兩個類別的繼承關係。</p>\n<ul>\n<li>完整程式碼 : <a href=\"https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Core/src/ControllerBase.cs\">ControllerBase</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Controller]</span><br><span class=\"line\">public abstract class ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ControllerContext? _controllerContext;</span><br><span class=\"line\">    private IModelMetadataProvider? _metadataProvider;</span><br><span class=\"line\">    private IModelBinderFactory? _modelBinderFactory;</span><br><span class=\"line\">    private IObjectModelValidator? _objectValidator;</span><br><span class=\"line\">    private IUrlHelper? _url;</span><br><span class=\"line\">    private ProblemDetailsFactory? _problemDetailsFactory;</span><br><span class=\"line\">    // 略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>完整程式碼 : <a href=\"https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.ViewFeatures/src/Controller.cs\">Controller</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// A base class for an MVC controller with view support.</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">public abstract class Controller : ControllerBase, IActionFilter, IAsyncActionFilter, IDisposable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private ITempDataDictionary? _tempData;</span><br><span class=\"line\">    private DynamicViewData? _viewBag;</span><br><span class=\"line\">    private ViewDataDictionary? _viewData;</span><br><span class=\"line\">    // 略</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這發現了Controller.cs只是比ControllerBase.cs多了許多View上類別。所以當需要開發WebAPI，繼承了ControllerBase，會多了不必要處理View的方法。所以開發WebAPI的時候，應繼承 ControllerBase.cs，當開發MVC的時候則繼承 Controller.cs</p>\n","text":".Net Core Web API – API Controller 的繼承API Controller 繼承建立新的API Controller類別時，繼承到底要繼承Controller還是ControllerBase? 這兩個類別有什麼差異?<br>當翻開原始碼時候可以發現兩","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":3,"path":"api/categories/WebAPI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"},{"name":"WebAPI","slug":"WebAPI","count":2,"path":"api/tags/WebAPI.json"}]},{"title":"關於 HttpClient 使用方式","slug":"HttpClient","date":"2023-11-27T13:32:48.000Z","updated":"2023-11-27T13:40:05.011Z","comments":true,"path":"api/articles/HttpClient.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"關於-HttpClient\"><a href=\"#關於-HttpClient\" class=\"headerlink\" title=\"關於 HttpClient\"></a>關於 HttpClient</h1><p>因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在<strong>CSharp</strong>中最常使用的類別庫就是<code>HttpClient.cs</code>，但是<code>HttpClient.cs</code>使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。</p>\n<h2 id=\"官方不建議使用方式\"><a href=\"#官方不建議使用方式\" class=\"headerlink\" title=\"官方不建議使用方式\"></a>官方不建議使用方式</h2><br>\n\n<h3 id=\"直接使用using-HttpClient\"><a href=\"#直接使用using-HttpClient\" class=\"headerlink\" title=\"直接使用using HttpClient\"></a>直接使用<code>using</code> HttpClient</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">static async Task Main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tvar url = &quot;http://localhost:5259/WeatherForecast&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tint requestCount = 10000; // 設定請求的次數</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor (int i = 0; i &lt; requestCount; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tusing (var client = new HttpClient())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttry</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tvar response = await client.GetAsync(url);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tresponse.EnsureSuccessStatusCode();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcatch (Exception ex)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tConsole.WriteLine($&quot;An error occurred: &#123;ex.Message&#125;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsole.WriteLine(&quot;Finish!!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>建立一支API 讓這段程式碼可以去Connection，很有可能會發生以下的錯誤。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">An error occurred: System.Net.Http.HttpRequestException: 一次只能用一個通訊端位址 (通訊協定/網路位址/連接埠)。 (localhost:5259)</span><br><span class=\"line\"> ---&gt; System.Net.Sockets.SocketException (10048): 一次只能用一個通訊端位址 (通訊協定/網路位址/連接埠)。</span><br><span class=\"line\">   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)</span><br><span class=\"line\">   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)</span><br><span class=\"line\">   at System.Net.Sockets.Socket.&lt;ConnectAsync&gt;g__WaitForConnectWithCancellation|281_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)</span><br><span class=\"line\">   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken)</span><br><span class=\"line\">   --- End of inner exception stack trace ---</span><br><span class=\"line\">    // 略</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>在官方文件有提到這一點</p>\n<p><a href=\"https://learn.microsoft.com/zh-tw/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net\">.NET 中可用的原始 HttpClient 類別問題</a></p>\n<blockquote>\n<p>雖然這個類別會實作 IDisposable，但不建議在 using 陳述式內加以宣告及具現化，因為處置 <code>HttpClient.cs</code> 物件時，底層通訊端並不會立即釋放，而這可能會導致「通訊端耗盡」問題。 </p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"在Dependency-Injection-中使用Singleton或是宣告靜態物件\"><a href=\"#在Dependency-Injection-中使用Singleton或是宣告靜態物件\" class=\"headerlink\" title=\"在Dependency Injection 中使用Singleton或是宣告靜態物件\"></a>在Dependency Injection 中使用Singleton或是宣告靜態物件</h3><blockquote>\n<p>開發人員遇到的另一個問題是在長時間執行的處理序中使用 HttpClient 的共用執行個體時。 在 HttpClient 具現化為 singleton 或靜態物件的情況下，其並無法處理 DNS 變更</p>\n</blockquote>\n<p>例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 註冊成Singleton</span><br><span class=\"line\">builder.Services.AddSingleton&lt;HttpClient&gt;();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<br>\n<br>\n\n\n<h2 id=\"解決方式之一-使用IHttpClientFactory-cs\"><a href=\"#解決方式之一-使用IHttpClientFactory-cs\" class=\"headerlink\" title=\"解決方式之一 使用IHttpClientFactory.cs\"></a>解決方式之一 使用<code>IHttpClientFactory.cs</code></h2><p>在 .Net Core引入<code>IHttpClientFactory.cs</code>介面去建立<code>HttpClient.cs</code>。<br>特點是可以由<code>IHttpClientFactory.cs</code>去管理HttpMessageHandler的生命週期，避免自行管理<code>HttpClient.cs</code>的生命週期。</p>\n<h3 id=\"基本使用方式\"><a href=\"#基本使用方式\" class=\"headerlink\" title=\"基本使用方式\"></a>基本使用方式</h3><p>需要在Dependency Injection裡面加上了<code> services.AddHttpClient();</code> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 加上這一行</span><br><span class=\"line\">builder.Services.AddHttpClient();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"具名HttpClient\"><a href=\"#具名HttpClient\" class=\"headerlink\" title=\"具名HttpClient\"></a>具名HttpClient</h3><ul>\n<li>應用程式需要不同的HttpClient用法或是設定。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 加上這一行</span><br><span class=\"line\">builder.Services.AddHttpClient(&quot;YourName&quot;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"調用方\"><a href=\"#調用方\" class=\"headerlink\" title=\"調用方\"></a>調用方</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Repository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IHttpClientFactory _httpClientFactory;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Repository(IHttpClientFactory httpClientFactory)  </span><br><span class=\"line\">    &#123;        </span><br><span class=\"line\">        this._httpClientFactory = httpClientFactory;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public async Task&lt;Todo[]&gt; GetToDos()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string url = &quot;your service url&quot;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        using var client = _httpClientFactory.CreateClient(&quot;YourName&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        var response = await client.GetFromJsonAsync&lt;Todo[]&gt;(url,new JsonSerializerOptions(JsonSerializerDefaults.Web));  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","text":"關於 HttpClient因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在CSharp中最常使用的類別庫就是HttpClient.cs，但是HttpClient.cs使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。官方不建議使用方式<br","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":3,"path":"api/categories/WebAPI.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/categories/HTTP.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"}]},{"title":"更高效 Logging - LoggerMessage","slug":"LoggingMessage","date":"2024-02-16T12:19:48.000Z","updated":"2024-02-16T12:34:03.134Z","comments":true,"path":"api/articles/LoggingMessage.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Logging-LoggerMessage\"><a href=\"#Logging-LoggerMessage\" class=\"headerlink\" title=\"Logging - LoggerMessage\"></a>Logging - LoggerMessage</h1><p>原先在記錄Log都會使用微軟提供LoggingExtensions方法，最近朋友聊天分享給我<code>LoggerMessage.cs</code>與<code>LoggerMessageAttribute.cs</code>。於是研究一下並記錄一下。</p>\n<p>這方式把寫Log的方式更好的管理及使用強型別方式。</p>\n<p>下面提供兩種方式去改寫 Logging 也可以提升效能，官方文件提到以下原因。</p>\n<blockquote>\n<p>相較於記錄器擴充方法，LoggerMessage 提供下列效能優勢：<br>記錄器擴充方法需要 “boxing” (轉換) 實值型別，例如將 int 轉換為 object。 LoggerMessage 模式可使用靜態 Action 欄位和擴充方法搭配強型別參數來避免 boxing。<br>記錄器擴充方法在每次寫入記錄訊息時，都必須剖析訊息範本 (具名格式字串)。 LoggerMessage 只需在定義訊息時剖析範本一次。</p>\n</blockquote>\n<p>這是原本使用 <code>LoggingExtensions.cs</code>去寫 Logging，這邊要注意的是 EventId 是自定的數字。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"meta\">HttpGet(Name = <span class=\"string\">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;WeatherForecast&gt; <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      _logger.LogInformation</span><br><span class=\"line\">(</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> EventId(<span class=\"number\">13</span>,<span class=\"string\">&quot;CreateOrderFailure&quot;</span>),</span><br><span class=\"line\">\t<span class=\"string\">&quot;create order failed !! order id : &#123;orderId&#125;&quot;</span>,<span class=\"number\">100</span></span><br><span class=\"line\">);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 略</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<hr>\n<h2 id=\"第一種方式-LoggerMessage-類別\"><a href=\"#第一種方式-LoggerMessage-類別\" class=\"headerlink\" title=\"第一種方式 - LoggerMessage 類別\"></a>第一種方式 - LoggerMessage 類別</h2><p>LoggerMessage.Define 是回傳委派共提供最多六個參數。<br>這邊簡單建立類別。</p>\n<ul>\n<li><p>LogHelper.cs</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">LogHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Action&lt;ILogger, <span class=\"built_in\">int</span>, Exception&gt; FailedToCreateOrder =&gt; LoggerMessage.Define&lt;<span class=\"built_in\">int</span>&gt;</span><br><span class=\"line\">    (</span><br><span class=\"line\">        LogLevel.Information,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> EventId(<span class=\"number\">13</span>, <span class=\"keyword\">nameof</span>(CreateOrderFailure)),</span><br><span class=\"line\">        <span class=\"string\">&quot;create order failed !! order id : &#123;order.Id&#125;&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateOrderFailure</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger,Order order</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.IsEnabled(LogLevel.Information))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            FailedToCreateOrder(logger, order.Id, <span class=\"literal\">default</span>!);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n<li><p>調用方</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet(Name = <span class=\"string\">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;WeatherForecast&gt; <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用擴充方法</span></span><br><span class=\"line\">    _logger.CreateOrderFailure(<span class=\"keyword\">new</span> Order</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Id=<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>執行結果 :</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: LogDefinition.Controllers.WeatherForecastController[13]</span><br><span class=\"line\">      create order failed !! order id : 100</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"第二種方式-LoggerMessageAttribute-類別\"><a href=\"#第二種方式-LoggerMessageAttribute-類別\" class=\"headerlink\" title=\"第二種方式 - LoggerMessageAttribute 類別\"></a>第二種方式 - LoggerMessageAttribute 類別</h2><p>這邊要注意的是 <code>LoggerMessageAttribute.cs</code> 類別是在 <strong>.Net 6</strong> 以後才引入的。</p>\n<p>使用 LoggerMessageAttribute 時，必須遵守限制：</p>\n<ul>\n<li>記錄方法必須為 partial 並傳回 void。</li>\n<li>記錄方法名稱不可以底線開頭。</li>\n<li>記錄方法的參數名稱不可以底線開頭。</li>\n<li>記錄方法不可在巢狀型別中定義。</li>\n<li>記錄方法不可為泛型。</li>\n<li>如果記錄方法為 static，則須以 ILogger 執行個體作為參數。</li>\n</ul>\n<p>這邊也建立 <code>LogHelperV2.cs</code> 類別</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">LogHelperV2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(13, LogLevel.Information, <span class=\"string\">&quot;create order failed !! order id : &#123;OrderId&#125;&quot;</span>, EventName = <span class=\"string\">&quot;CreateOrderFailureV2&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateOrderFailureV2</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger, <span class=\"built_in\">int</span> orderId</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>調用方:</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet(Name = <span class=\"string\">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;WeatherForecast&gt; <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"comment\">// 加上這一行</span></span><br><span class=\"line\">       _logger.CreateOrderFailureV2(<span class=\"number\">100</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 略</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>執行結果 : </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: LogDefinition.Controllers.WeatherForecastController[13]</span><br><span class=\"line\">      create order failed !! order id : 100</span><br></pre></td></tr></table></figure>\n\n<p>這邊也提供官方範例作為範例。</p>\n<ul>\n<li>官方範例 : <a href=\"https://github.com/dotnet/aspnetcore/blob/9db62024cbe3c3cb28efe372541fc1bdfcdb375e/src/Middleware/HttpsPolicy/src/HttpsLoggingExtensions.cs\">HttpsLoggingExtensions.cs</a></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Logging;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Microsoft.AspNetCore.HttpsPolicy</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpsLoggingExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(1, LogLevel.Debug, <span class=\"string\">&quot;Redirecting to &#x27;&#123;redirect&#125;&#x27;.&quot;</span>, EventName = <span class=\"string\">&quot;RedirectingToHttps&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">RedirectingToHttps</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger, <span class=\"built_in\">string</span> redirect</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(2, LogLevel.Debug, <span class=\"string\">&quot;Https port &#x27;&#123;port&#125;&#x27; loaded from configuration.&quot;</span>, EventName = <span class=\"string\">&quot;PortLoadedFromConfig&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">PortLoadedFromConfig</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger, <span class=\"built_in\">int</span> port</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(3, LogLevel.Warning, <span class=\"string\">&quot;Failed to determine the https port for redirect.&quot;</span>, EventName = <span class=\"string\">&quot;FailedToDeterminePort&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">FailedToDeterminePort</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(5, LogLevel.Debug, <span class=\"string\">&quot;Https port &#x27;&#123;httpsPort&#125;&#x27; discovered from server endpoints.&quot;</span>, EventName = <span class=\"string\">&quot;PortFromServer&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">PortFromServer</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger, <span class=\"built_in\">int</span> httpsPort</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h2><ul>\n<li><a href=\"https://learn.microsoft.com/zh-tw/dotnet/core/extensions/high-performance-logging\">https://learn.microsoft.com/zh-tw/dotnet/core/extensions/high-performance-logging</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-tw/dotnet/core/extensions/logger-message-generator\">https://learn.microsoft.com/zh-tw/dotnet/core/extensions/logger-message-generator</a></li>\n</ul>\n","text":"Logging - LoggerMessage原先在記錄Log都會使用微軟提供LoggingExtensions方法，最近朋友聊天分享給我LoggerMessage.cs與LoggerMessageAttribute.cs。於是研究一下並記錄一下。這方式把寫Log的方式更好的管理","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":3,"path":"api/categories/WebAPI.json"},{"name":"Log","slug":"WebAPI/Log","count":1,"path":"api/categories/WebAPI/Log.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"},{"name":"WebAPI","slug":"WebAPI","count":2,"path":"api/tags/WebAPI.json"},{"name":"2024","slug":"2024","count":10,"path":"api/tags/2024.json"}]}]}