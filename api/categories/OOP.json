{"name":"OOP","slug":"OOP","count":4,"postlist":[{"title":"設計抽象介面","slug":"InterfaceDesign","date":"2023-04-16T13:22:48.000Z","updated":"2023-04-23T06:10:26.203Z","comments":true,"path":"api/articles/InterfaceDesign.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"抽象介面設計-抽象洩漏\"><a href=\"#抽象介面設計-抽象洩漏\" class=\"headerlink\" title=\"抽象介面設計 - 抽象洩漏\"></a>抽象介面設計 - 抽象洩漏</h1><p>在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。</p>\n<hr>\n<h2 id=\"什麼是抽象洩漏\"><a href=\"#什麼是抽象洩漏\" class=\"headerlink\" title=\"什麼是抽象洩漏?\"></a>什麼是抽象洩漏?</h2><p>「抽象泄漏」是軟體開發時，本應隱藏實現細節的抽象化不可避免地暴露出底層細節與局限性。抽象泄露是棘手的問題，因為抽象化本來目的就是向用戶隱藏不必要公開的細節。(From - <a href=\"https://https//zh.wikipedia.org/zh-tw/%E6%8A%BD%E8%B1%A1%E6%B3%84%E6%BC%8F\">維基百科</a>)</p>\n<p>以下面的介面為例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentDbRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByIdAsync(string studentId);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByNameAsync(string studentName);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task SaveAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task ModifyAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task RemoveAsync(StudentModel student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"要如何避免抽象洩漏\"><a href=\"#要如何避免抽象洩漏\" class=\"headerlink\" title=\"要如何避免抽象洩漏??\"></a>要如何避免抽象洩漏??</h2><p>在<code>IStudentDbRepository.cs</code>之中，介面名稱已經透露出實作內容是依賴資料庫。<br>這是一個很不好的介面設計。當實作方式從資料庫存取改為使用Web API方式，這介面是不是會出現問題 ?</p>\n<p>比較好一點的介面設計應該是隱蔽一些實作的細節。在Repository的介面中，我們應該需要隱蔽的是資料從哪邊來，讓調用方可以直接從介面之中取得自己所需的資料，不必知道資料從Database或是Web API。這是實作 Repository 介面才需要決定的，並非其他調用方需要知道。並不是為了抽介面而建立介面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByIdAsync(string studentId);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByNameAsync(string studentName);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task SaveAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task ModifyAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task RemoveAsync(StudentModel student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","text":"抽象介面設計 - 抽象洩漏在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。什麼是抽象洩漏?「抽象泄漏」是軟體開發時","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":4,"path":"api/categories/OOP.json"}],"tags":[{"name":"2023","slug":"2023","count":8,"path":"api/tags/2023.json"},{"name":"Interface","slug":"Interface","count":1,"path":"api/tags/Interface.json"}]},{"title":"SOLID原則:單一職責原則(Single Responsibility Principle)","slug":"SRP","date":"2023-04-23T05:23:48.000Z","updated":"2023-04-23T06:09:02.880Z","comments":true,"path":"api/articles/SRP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"單一職責原則-Single-Responsibility-Principle\"><a href=\"#單一職責原則-Single-Responsibility-Principle\" class=\"headerlink\" title=\"單一職責原則(Single Responsibility Principle)\"></a>單一職責原則(Single Responsibility Principle)</h1><blockquote>\n<p>一個模組應該只對唯一的一個角色負責</p>\n</blockquote>\n<p>一個類別或模塊只應該負責一個功能或職責。這個原則有助於降低代碼的複雜度，使代碼更容易維護和擴展。這避免了一個類別出現了上帝類別（God Class)。</p>\n<p>舉例來說，這是一個員工類別。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Salary &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> CommissionRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> BonusRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateSalary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算薪水的邏輯</span></span><br><span class=\"line\">        Salary = <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateCommission</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算佣金的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateBonus</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算獎金的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Sell</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 銷售的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DevelopSoftware</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 軟體開發的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>這類別包含很多方法。包括表示員工的數據、計算薪水、銷售、軟體開發和需求修改等功能。這導致代碼複雜度提高，使得這個類更難理解、修改和擴展。為了解決這個問題，可以使用單一職責原則。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Salary &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FinanceEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ManageAccounts</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 財務員工管理帳戶的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ITEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DevelopSoftware</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IT員工開發軟體的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SalesEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> CommissionRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Sell</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 銷售人員銷售的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>將 Employee 類分成 FinanceEmployee、ITEmployee 和 SalesEmployee 三個類。FinanceEmployee 類負責財務管理的功能，ITEmployee 類負責開發軟體的功能，SalesEmployee 類負責銷售的功能。每個類都只負責一個職責，從而使代碼更易於理解、修改和擴展。</p>\n","text":"單一職責原則(Single Responsibility Principle)一個模組應該只對唯一的一個角色負責一個類別或模塊只應該負責一個功能或職責。這個原則有助於降低代碼的複雜度，使代碼更容易維護和擴展。這避免了一個類別出現了上帝類別（God Class)。舉例來說，這是一個","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":4,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":1,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2023","slug":"2023","count":8,"path":"api/tags/2023.json"},{"name":"OOP","slug":"OOP","count":1,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":1,"path":"api/tags/SOLID.json"}]},{"title":"Dependency Injection (一) 簡介","slug":"DependencyInjection1","date":"2023-11-27T13:02:48.000Z","updated":"2023-11-27T13:33:30.985Z","comments":true,"path":"api/articles/DependencyInjection1.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><ul>\n<li>Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責建立。</li>\n</ul>\n<br>\n\n<hr>\n<h2 id=\"What-is-Dependency\"><a href=\"#What-is-Dependency\" class=\"headerlink\" title=\"What is Dependency ?\"></a>What is Dependency ?</h2><p>程式上的依賴是指一個物件對象需要另一個Assembly或Class，才能完成自己的功能。具體來說，當一個物件對象使用了另一個Assembly或Class的功能時，就可以說這個組件或對象對另一個Assembly或Class存在依賴關係。</p>\n<p>在這範例中可以說<code>OrderController.cs</code>依賴了<code>OrderDataAccess.cs</code>，<code>OrderController.cs</code>必須透過<code>OrderDataAccess.cs</code>才能完成取得所有訂單清單功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ApiController]</span><br><span class=\"line\">[Route(&quot;api/[controller]&quot;)]</span><br><span class=\"line\">public class OrderController : ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private OrderDataAccess _orderDataAccess;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public OrderController(OrderDataAccess orderDataAccess)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this._orderDataAccess = orderDataAccess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [HttpGet]</span><br><span class=\"line\">    public IActionResult Get()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var orders = _orderDataAccess.GetAll(); </span><br><span class=\"line\">        // 略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>依賴關係可以分為直接依賴和間接依賴兩種情況。</p>\n<ul>\n<li><p>直接依賴指的是組件或對象直接使用了另一個組件或對象的功能，例如一個Class中使用了另一個 Class的Method。</p>\n</li>\n<li><p>間接依賴則指的是組件或對象的依賴關係被傳遞到了更多層次的組件或對象中，例如一個類使用了另一個類，而這個另一個類又使用了一個第三方類。</p>\n</li>\n</ul>\n<br>\n\n\n<h2 id=\"What-is-Injection\"><a href=\"#What-is-Injection\" class=\"headerlink\" title=\"What is Injection ?\"></a>What is Injection ?</h2><p>程式上的注入是指將依賴對象傳遞給需要使用它的對象或方法的一種方式。具體來說，當一個對象或方法需要使用另一個對象或方法的功能時，可以通過Injection的方式將這個依賴對象傳遞進去，讓需要使用它的對象或方法可以正常運作。<br>注入的方式可以分為三種：</p>\n<br>\n\n<h3 id=\"建構子注入（Constructor-Injection）\"><a href=\"#建構子注入（Constructor-Injection）\" class=\"headerlink\" title=\"建構子注入（Constructor Injection）\"></a>建構子注入（Constructor Injection）</h3><p>依賴介面由建構子取得，這一類在類別被初始化之後依賴也直接決定了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class OrderService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IOrderRepository _orderRepository;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public OrderService(IOrderRepository orderRepository)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _orderRepository = orderRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"屬性注入（Property-Injection）\"><a href=\"#屬性注入（Property-Injection）\" class=\"headerlink\" title=\"屬性注入（Property Injection）\"></a>屬性注入（Property Injection）</h3><p>依賴介面由屬性(Property)取得，在一些Dependency Injection框架在實現Property Injection也會實現延遲載入(Lazy Loading)功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class OrderService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public IOrderRepository OrderRepository &#123; get; set; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public OrderService()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"方法注入（Method-Injection）\"><a href=\"#方法注入（Method-Injection）\" class=\"headerlink\" title=\"方法注入（Method Injection）\"></a>方法注入（Method Injection）</h3><p>依賴介面由方法參數取得。在 .Net Core 之中的Middleware有支援。個人目前使用情境甚少使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class OrderService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    public async Task&lt;OrderDto&gt; GetAsync(string orderId, IOrderRepository orderRepository)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection?\"></a>Dependency Injection?</h2><p>Client直接依賴ServerA，在需求異動時候Client與Server均有可能修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digraph hierarchy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                nodesep=1.0 // increases the separation between nodes</span><br><span class=\"line\">                </span><br><span class=\"line\">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</span><br><span class=\"line\">                edge [color=Blue, style=dashed] //All the lines look like this</span><br><span class=\"line\"></span><br><span class=\"line\">                Client-&gt;&#123;ServerA ServerB&#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">                &#123;rank=same; ServerA ServerB&#125;  // Put them on the same level</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Client依賴Server的介面，透過DI Container決定了最後的Server是誰</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digraph hierarchy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                nodesep=1.0 // increases the separation between nodes</span><br><span class=\"line\">                </span><br><span class=\"line\">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</span><br><span class=\"line\">                edge [color=Blue, style=dashed] //All the lines look like this</span><br><span class=\"line\"></span><br><span class=\"line\">                Client-&gt;&#123;ServerInterface&#125;</span><br><span class=\"line\">                DIContainer-&gt;&#123;ServerInterface&#125;</span><br><span class=\"line\">                DIContainer-&gt;&#123;ServerA&#125;</span><br><span class=\"line\">                DIContainer-&gt;&#123;ServerB&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#123;rank=same; ServerA ServerB&#125;  // Put them on the same level</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<br>\n<br>\n\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>這邊也只是記錄以前前輩教的一些軟體開發上常見的觀念。但是對於後續開發上有很大的幫助。</p>\n","text":"簡介Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":4,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":8,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":6,"path":"api/tags/Net-Core.json"}]},{"title":"Dependency Injection (二) Mircosoft.Extensions.DependencyInjection 介紹","slug":"DependencyInjection2","date":"2023-11-27T13:12:48.000Z","updated":"2023-11-27T13:33:39.968Z","comments":true,"path":"api/articles/DependencyInjection2.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Microsoft-Extensions-DependencyInjection\"><a href=\"#Microsoft-Extensions-DependencyInjection\" class=\"headerlink\" title=\"Microsoft.Extensions.DependencyInjection\"></a>Microsoft.Extensions.DependencyInjection</h1><p>在<code>ASP.NET Core</code>中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。<code>ASP.NET Core</code> 的 Dependency Injection Container系統提供了一個建立基於依賴注入的應用程序的機制，並支持以下功能：</p>\n<ul>\n<li><p>提供應用程序組件之間的依賴注入。</p>\n</li>\n<li><p>可以在Controller、Filter、View等多個組件中使用。</p>\n</li>\n<li><p>提供了生命週期管理功能，可以在需要時建立、和釋放物件。</p>\n</li>\n<li><p>支持對服務的多個實現進行注入，並可根據需要在運行時選擇實現。</p>\n<blockquote>\n<p>.NetCore DI 預設只支援建構子注入，但是Middleware支援方法注入。</p>\n</blockquote>\n</li>\n</ul>\n<br>\n\n<h2 id=\"IServiceCollection-是什麼\"><a href=\"#IServiceCollection-是什麼\" class=\"headerlink\" title=\"IServiceCollection 是什麼?\"></a>IServiceCollection 是什麼?</h2><p>當查詢原始碼時，會看到下列的介面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IServiceCollection : IList&lt;ServiceDescriptor&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> ServiceDescriptor.cs</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ServiceDescriptor </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public ServiceLifetime Lifetime &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public Type ServiceType &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public Type ImplementationType &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public object ImplementationInstance &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public Func&lt;IServiceProvider, object&gt; ImplementationFactory &#123; get; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// ... 略</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>其實<code>IServiceCollection.cs</code>，其實只是<code>ServiceDescriptor.cs</code>的集合。</p>\n<hr>\n<br>\n\n<h2 id=\"Dependency-Injection-–生命週期\"><a href=\"#Dependency-Injection-–生命週期\" class=\"headerlink\" title=\"Dependency Injection –生命週期\"></a>Dependency Injection –生命週期</h2><p>在<code>ServiceDescriptor.cs</code>其中的<code>ServiceLifetime.cs </code>是Enum，主要負責進行依賴注入的物件生命週期。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Specifies the lifetime of a service in an &lt;see cref=&quot;IServiceCollection&quot;/&gt;.</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">public enum ServiceLifetime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Specifies that a single instance of the service will be created.</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    Singleton,</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Specifies that a new instance of the service will be created for each scope.</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;remarks&gt;</span><br><span class=\"line\">    /// In ASP.NET Core applications a scope is created around each server request.</span><br><span class=\"line\">    /// &lt;/remarks&gt;</span><br><span class=\"line\">    Scoped,</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Specifies that a new instance of the service will be created every time it is requested.</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    Transient</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每種方式的生命週期管理方式都不同，需要根據具體的應用場景來選擇。</p>\n<ul>\n<li>Singleton：對象在整個應用程序生命週期內只會被創建一次，之後重複使用。</li>\n<li>Scoped：對象在範圍內只會被建立一次，同一個Request內所有需要使用該對象的Class都共享同一個對象。</li>\n<li>Transient：對象每次被注入時都會重新創建一個新的Instance。</li>\n</ul>\n<br>\n\n<h2 id=\"使用-Dependency-Injection-註冊方式\"><a href=\"#使用-Dependency-Injection-註冊方式\" class=\"headerlink\" title=\"使用 Dependency Injection 註冊方式\"></a>使用 Dependency Injection 註冊方式</h2><p>這邊介紹一下在開發上蠻常用的 Dependency Injection 註冊方式</p>\n<ol>\n<li><code>AddXXX&lt;TService,TImplementation&gt;()</code> 加入DI容器並直接決定生命週期。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">//建立註冊 生命週期是 Scoped</span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository, SubjectRepository&gt;();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>AddXXX&lt;TService&gt;(Func&lt;IServiceProvider, object&gt; implementationFactory)</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">//建立註冊 生命週期是 Scoped</span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository&gt;(serviceProvider=&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return new SubjectRepository();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li><code>TryAddXXX&lt;TService,TImplementation&gt;()</code> 加入DI容器，當發現<code>TService</code>已經有註冊了就不再進行註冊。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">//建立註冊 生命週期是 Scoped</span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository&gt;(serviceProvider=&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return new SubjectRepository();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<br>\n\n<h2 id=\"多個實作註冊相同的介面\"><a href=\"#多個實作註冊相同的介面\" class=\"headerlink\" title=\"多個實作註冊相同的介面\"></a>多個實作註冊相同的介面</h2><p>單一介面使用單一實作這邊就不做介紹。多種實作應該是屬常見的情境。<br>當介面有多個實作時，則會採取最後一個實作。對於 <code>IServiceCollection.cs</code> 是後進先出。但可以取得該介面的所有實作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ISubjectRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    List&lt;Subject&gt; GetAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在實作部分可能會是DB或是API。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class SubjectDbRepository : ISubjectRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;Subject&gt; GetAll()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class SubjectApiRepository : ISubjectRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;Subject&gt; GetAll()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在DI註冊則是以下程式碼。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository,SubjectDbRepository&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository,SubjectApiRepository&gt;();</span><br></pre></td></tr></table></figure>\n<p>在這段程式碼中，當使用了 <code>ISubjectRepository.cs</code> ，DI容器會給予 <code>SubjectApiRepository.cs</code> 的實作。但是如果我們需要取得全部可以在建構子中使用 <code>IEnumerable&lt;ISubjectRepository&gt;</code> 的建構子注入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SubjectRepositoryFactory : ISubjectRepositoryFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IEnumerable&lt;ISubjectRepository&gt; _subjectRepositories;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SubjectRepositoryFactory(IEnumerable&lt;ISubjectRepository&gt; subjectRepositories)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _subjectRepositories = subjectRepositories;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public ISubjectRepository Create()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return CreateInstance&lt;SubjectDbRepository&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ISubjectRepository CreateInstance&lt;T&gt;() where T : ISubjectRepository</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return this._subjectRepositories.Single(sp =&gt; sp is T);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在這個 <code>SubjectRepositoryFactory.cs</code> 建構子中可以取得 <code>ISubjectRepository.cs</code> 的所有實作。</p>\n<hr>\n<br>\n<br>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>雖然微軟提供的Dependency Injection 容器很簡單，但是可以應付大部分場景。個人並不喜歡把DI容器使用的深入。不只後續抓錯誤麻煩。也會遇到執行錯誤不知道從哪邊抓。</p>\n","text":"Microsoft.Extensions.DependencyInjection在ASP.NET Core中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。ASP.NET Core 的 Dependency Injec","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":4,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":8,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":6,"path":"api/tags/Net-Core.json"}]}]}