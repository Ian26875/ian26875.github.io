{"name":"OOP","slug":"OOP","count":2,"postlist":[{"title":"SOLID原則:單一職責原則(Single Responsibility Principle)","slug":"SRP","date":"2023-04-23T05:23:48.000Z","updated":"2023-04-23T06:09:02.880Z","comments":true,"path":"api/articles/SRP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"單一職責原則-Single-Responsibility-Principle\"><a href=\"#單一職責原則-Single-Responsibility-Principle\" class=\"headerlink\" title=\"單一職責原則(Single Responsibility Principle)\"></a>單一職責原則(Single Responsibility Principle)</h1><blockquote>\n<p>一個模組應該只對唯一的一個角色負責</p>\n</blockquote>\n<p>一個類別或模塊只應該負責一個功能或職責。這個原則有助於降低代碼的複雜度，使代碼更容易維護和擴展。這避免了一個類別出現了上帝類別（God Class)。</p>\n<p>舉例來說，這是一個員工類別。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Salary &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> CommissionRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> BonusRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateSalary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算薪水的邏輯</span></span><br><span class=\"line\">        Salary = <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateCommission</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算佣金的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateBonus</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算獎金的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Sell</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 銷售的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DevelopSoftware</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 軟體開發的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>這類別包含很多方法。包括表示員工的數據、計算薪水、銷售、軟體開發和需求修改等功能。這導致代碼複雜度提高，使得這個類更難理解、修改和擴展。為了解決這個問題，可以使用單一職責原則。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Salary &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FinanceEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ManageAccounts</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 財務員工管理帳戶的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ITEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DevelopSoftware</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IT員工開發軟體的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SalesEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> CommissionRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Sell</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 銷售人員銷售的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>將 Employee 類分成 FinanceEmployee、ITEmployee 和 SalesEmployee 三個類。FinanceEmployee 類負責財務管理的功能，ITEmployee 類負責開發軟體的功能，SalesEmployee 類負責銷售的功能。每個類都只負責一個職責，從而使代碼更易於理解、修改和擴展。</p>\n","text":"單一職責原則(Single Responsibility Principle)一個模組應該只對唯一的一個角色負責一個類別或模塊只應該負責一個功能或職責。這個原則有助於降低代碼的複雜度，使代碼更容易維護和擴展。這避免了一個類別出現了上帝類別（God Class)。舉例來說，這是一個","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":2,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":1,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2023","slug":"2023","count":5,"path":"api/tags/2023.json"},{"name":"OOP","slug":"OOP","count":1,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":1,"path":"api/tags/SOLID.json"}]},{"title":"設計抽象介面","slug":"InterfaceDesign","date":"2023-04-16T13:22:48.000Z","updated":"2023-04-23T06:10:26.203Z","comments":true,"path":"api/articles/InterfaceDesign.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"抽象介面設計-抽象洩漏\"><a href=\"#抽象介面設計-抽象洩漏\" class=\"headerlink\" title=\"抽象介面設計 - 抽象洩漏\"></a>抽象介面設計 - 抽象洩漏</h1><p>在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。</p>\n<hr>\n<h2 id=\"什麼是抽象洩漏\"><a href=\"#什麼是抽象洩漏\" class=\"headerlink\" title=\"什麼是抽象洩漏?\"></a>什麼是抽象洩漏?</h2><p>「抽象泄漏」是軟體開發時，本應隱藏實現細節的抽象化不可避免地暴露出底層細節與局限性。抽象泄露是棘手的問題，因為抽象化本來目的就是向用戶隱藏不必要公開的細節。(From - <a href=\"https://https//zh.wikipedia.org/zh-tw/%E6%8A%BD%E8%B1%A1%E6%B3%84%E6%BC%8F\">維基百科</a>)</p>\n<p>以下面的介面為例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentDbRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByIdAsync(string studentId);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByNameAsync(string studentName);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task SaveAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task ModifyAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task RemoveAsync(StudentModel student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"要如何避免抽象洩漏\"><a href=\"#要如何避免抽象洩漏\" class=\"headerlink\" title=\"要如何避免抽象洩漏??\"></a>要如何避免抽象洩漏??</h2><p>在<code>IStudentDbRepository.cs</code>之中，介面名稱已經透露出實作內容是依賴資料庫。<br>這是一個很不好的介面設計。當實作方式從資料庫存取改為使用Web API方式，這介面是不是會出現問題 ?</p>\n<p>比較好一點的介面設計應該是隱蔽一些實作的細節。在Repository的介面中，我們應該需要隱蔽的是資料從哪邊來，讓調用方可以直接從介面之中取得自己所需的資料，不必知道資料從Database或是Web API。這是實作 Repository 介面才需要決定的，並非其他調用方需要知道。並不是為了抽介面而建立介面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByIdAsync(string studentId);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByNameAsync(string studentName);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task SaveAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task ModifyAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task RemoveAsync(StudentModel student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","text":"抽象介面設計 - 抽象洩漏在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。什麼是抽象洩漏?「抽象泄漏」是軟體開發時","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":2,"path":"api/categories/OOP.json"}],"tags":[{"name":"2023","slug":"2023","count":5,"path":"api/tags/2023.json"},{"name":"Interface","slug":"Interface","count":1,"path":"api/tags/Interface.json"}]}]}