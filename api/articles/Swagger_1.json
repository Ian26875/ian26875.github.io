{"title":"Swagger 安裝與設定","slug":"Swagger_1","date":"2024-05-18T01:00:48.000Z","updated":"2024-05-18T00:52:00.772Z","comments":true,"path":"api/articles/Swagger_1.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"Swashbuckle-AspNetCore\"><a href=\"#Swashbuckle-AspNetCore\" class=\"headerlink\" title=\"Swashbuckle.AspNetCore\"></a>Swashbuckle.AspNetCore</h1><h6 id=\"tags-NuGet-Package\"><a href=\"#tags-NuGet-Package\" class=\"headerlink\" title=\"tags: NuGet Package\"></a>tags: <code>NuGet Package</code></h6><p>現今許多 Web API 開發團隊都採用 Swagger 來製作 API 文件，這讓開發人員能夠更加便利地開發和測試 API。使用 Swagger 的好處包括但不限於：清楚的 API 規範、易於閱讀的 API 文件、快速的 API 測試等。此外，Swagger 還支援自動生成客戶端程式碼，使得開發人員能夠更快地建立與 API 互動的應用程式。</p>\n<h2 id=\"Swashbuckle-AspNetCore-1\"><a href=\"#Swashbuckle-AspNetCore-1\" class=\"headerlink\" title=\"Swashbuckle.AspNetCore\"></a>Swashbuckle.AspNetCore</h2><h3 id=\"安裝方式\"><a href=\"#安裝方式\" class=\"headerlink\" title=\"安裝方式\"></a>安裝方式</h3><p>Nuget Package:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package Swashbuckle.AspNetCore</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"註冊服務\"><a href=\"#註冊服務\" class=\"headerlink\" title=\"註冊服務\"></a>註冊服務</h3><p><code>Program.cs</code> 中 Dependency Injection 加上以下的程式碼:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">builder.Services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.SwaggerDoc</span><br><span class=\"line\">        (</span><br><span class=\"line\">            <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> OpenApiInfo()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Title = <span class=\"string\">&quot; Product Open API&quot;</span>,</span><br><span class=\"line\">                Version = <span class=\"keyword\">new</span> Version(<span class=\"number\">1</span>, <span class=\"number\">0</span>).ToString(),</span><br><span class=\"line\">                Description = <span class=\"string\">&quot;This is Product API Swagger Document.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlFilename = <span class=\"string\">$&quot;<span class=\"subst\">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml&quot;</span>;</span><br><span class=\"line\">        options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>在Program.cs之中的Middleware加上</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">app.UseSwagger();</span><br><span class=\"line\">app.UseSwaggerUI();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><h4 id=\"MIME-Types\"><a href=\"#MIME-Types\" class=\"headerlink\" title=\"MIME Types\"></a>MIME Types</h4><p>MIME (Multipurpose Internet Mail Extensions) 類型是一種標準的 Internet 媒體類型，它用於標識在互聯網上傳輸的各種文件格式。以下是一些常見的 MIME 類型：</p>\n<ul>\n<li>text&#x2F;plain：純文字格式</li>\n<li>text&#x2F;html：HTML 網頁格式</li>\n<li>application&#x2F;json：JSON 格式</li>\n<li>application&#x2F;xml：XML 格式</li>\n<li>multipart&#x2F;form-data：用於表單提交的數據格式</li>\n</ul>\n<p>Controller之中加上 <code>ConsumesAttribute.cs</code> 及 <code>ProducesAttribute.cs</code>，可以在Request及Response 指定 MIME Type。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">Consumes(MediaTypeNames.Application.Json)</span>]</span><br><span class=\"line\">[<span class=\"meta\">Produces(MediaTypeNames.Application.Json)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WeatherForecastController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Produces-Response-Type\"><a href=\"#Produces-Response-Type\" class=\"headerlink\" title=\"Produces Response Type\"></a>Produces Response Type</h4><p>[ProducesResponseType] 可用於指定 API 方法的輸出類型和狀態碼。在這個例子中，[ProducesResponseType] 屬性指定了三種不同的輸出類型和狀態碼：</p>\n<ul>\n<li><p>如果 API 方法返回的是 ResultOutputModel 類型，且狀態碼為 200 OK，那麼 Swagger 將顯示 ResultOutputModel 類型的數據結構，以及 200 OK 狀態碼的相關信息。</p>\n</li>\n<li><p>如果 API 方法返回的是 FailureResultOutputModel 類型，且狀態碼為 400 Bad Request，那麼 Swagger 將顯示 FailureResultOutputModel 類型的數據結構，以及 400 Bad Request 狀態碼的相關信息。</p>\n</li>\n<li><p>如果 API 方法返回的是 FailureResultOutputModel 類型，且狀態碼為 404 Not Found，那麼 Swagger 將顯示 FailureResultOutputModel 類型的數據結構，以及 404 Not Found 狀態碼的相關信息</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">HttpPost</span>]    </span><br><span class=\"line\">[<span class=\"meta\">ProducesResponseType(typeof(ResultOutputModel), 200)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ProducesResponseType(typeof(FailureResultOutputModel), 400)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ProducesResponseType(typeof(FailureResultOutputModel), 404)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">CreateAsync</span>(<span class=\"params\">[FromBody]CreateCustomerRequest createCustomerRequest</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Ok();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Header加上參數\"><a href=\"#Header加上參數\" class=\"headerlink\" title=\"Header加上參數\"></a>Header加上參數</h3><p>當API需要一些Header進行授權等行為時候。Swagger需要做一些調整。舉例來說當Request需要在Header之中的Token進行驗證的時候可以這樣做。</p>\n<p>建立 <code>AddHeaderParameterOperationFilter.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AddHeaderParameterOperationFilter</span> : <span class=\"title\">IOperationFilter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Apply</span>(<span class=\"params\">OpenApiOperation operation, OperationFilterContext context</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (operation.Parameters == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                operation.Parameters = <span class=\"keyword\">new</span> List&lt;OpenApiParameter&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            operation.Parameters.Add(<span class=\"keyword\">new</span> OpenApiParameter</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Name = <span class=\"string\">&quot;Token&quot;</span>,</span><br><span class=\"line\">                In = ParameterLocation.Header,</span><br><span class=\"line\">                Required = <span class=\"literal\">true</span>,</span><br><span class=\"line\">                Example = <span class=\"keyword\">new</span> OpenApiString(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>之後在Progarm.cs的DI註冊加上</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">builder.Services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                            </span><br><span class=\"line\">        options.SwaggerDoc</span><br><span class=\"line\">        (</span><br><span class=\"line\">            <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span>()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Title = <span class=\"string\">&quot; Product Open API&quot;</span>,</span><br><span class=\"line\">                Version = <span class=\"keyword\">new</span> Version(<span class=\"number\">1</span>, <span class=\"number\">0</span>).ToString(),</span><br><span class=\"line\">                Description = <span class=\"string\">&quot;This is Product API Swagger Document.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlFilename = <span class=\"string\">$&quot;<span class=\"subst\">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml&quot;</span>;</span><br><span class=\"line\">        options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 加上這一行</span></span><br><span class=\"line\">        options.OperationFilter&lt;AddHeaderParameterOperationFilter&gt;();</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n","categories":[{"name":"Swagger","slug":"Swagger","count":2,"path":"api/categories/Swagger.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"},{"name":"2024","slug":"2024","count":10,"path":"api/tags/2024.json"},{"name":"OpenAPI","slug":"OpenAPI","count":2,"path":"api/tags/OpenAPI.json"}]}