{"title":"Domain Driven Design","slug":"DDD","date":"2024-03-19T10:23:48.000Z","updated":"2024-05-18T01:05:24.672Z","comments":true,"path":"api/articles/DDD.json","photos":[],"link":"","excerpt":"為什麼需要 Domain Driven Design隨著系統隨時間演變而逐漸複雜化，其數據和業務概念往往變得混亂，尤其是在公司持續成長的情況下。這種混亂不僅涉及架構的複雜性，還包括業務邏輯的混淆。例如，當業務需求描述為「建立訂單」時，工程師可能需要在代碼中尋找相應的實現位置，而隨著系統的演化，不同的開發者可能會使用不同的命名方式，如 CreateOrder、MakeOrder 和 PlaceOrder，這進一步增加了理解和維護的難度。","covers":null,"content":"<h1 id=\"為什麼需要-Domain-Driven-Design\"><a href=\"#為什麼需要-Domain-Driven-Design\" class=\"headerlink\" title=\"為什麼需要 Domain Driven Design\"></a>為什麼需要 Domain Driven Design</h1><p>隨著系統隨時間演變而逐漸複雜化，其數據和業務概念往往變得混亂，尤其是在公司持續成長的情況下。這種混亂不僅涉及架構的複雜性，還包括業務邏輯的混淆。例如，當業務需求描述為「建立訂單」時，工程師可能需要在代碼中尋找相應的實現位置，而隨著系統的演化，不同的開發者可能會使用不同的命名方式，如 CreateOrder、MakeOrder 和 PlaceOrder，這進一步增加了理解和維護的難度。</p>\n<span id=\"more\"></span>\n\n<p>隨著時間的推移，系統可能會因為架構退化、業務邏輯遺失以及業務命名的混亂而變得更加雜亂。此外，相同的業務詞彙在不同的情境下可能代表著不同的邏輯含義，這使得維護和擴展系統變得更加困難。</p>\n<p>在這種情況下，Domain Driven Design 提供了一種解決方案。DDD 強調使用統一語言來明確表達業務概念並將其具體化到代碼中。通過確立 Bounded Context，DDD 幫助開發者在不同的業務場景中清晰地劃分和實現相關的業務邏輯，從而降低了系統複雜性，並提高了可維護性和擴展性。這樣，即使在系統不斷演化的過程中，也能夠保持業務邏輯的清晰和一致性。</p>\n<h1 id=\"Domain-Driven-Design-簡介\"><a href=\"#Domain-Driven-Design-簡介\" class=\"headerlink\" title=\"Domain Driven Design 簡介\"></a>Domain Driven Design 簡介</h1><p>Domain Driven Design 的核心思想是理解業務領域，根據問題大小劃分不同的問題&#x2F;領域，找出各個問題的解決模型。任何應用程度存在都是為了解決現實遇到的問題，軟體服務也是為了解決問題而存在的。Domain Driven Design 本身善於處理高複雜度業務領域的一種方法論，大致上分為問題領域&#x2F;空間（Problem Domain&#x2F;Space）和解決領域&#x2F;空間（Solution Domain&#x2F;Space）。</p>\n<h2 id=\"問題領域-Problem-Domain-x2F-Space\"><a href=\"#問題領域-Problem-Domain-x2F-Space\" class=\"headerlink\" title=\"問題領域 (Problem Domain&#x2F;Space)\"></a>問題領域 (Problem Domain&#x2F;Space)</h2><p>問題領域涉及發現什麼問題、要解決的問題，即任何想解決的問題。在軟體工程業最常聽到的字是：“需求”。戰略設計就是依問題本身進行分析設計，通過一系列的戰略設計找出解決問題的領域模型，這模型可能是一張類關係圖。領域模型會反映出整個系統的初始樣貌，設計好壞直接影響了整個系統的成敗。現在在 Domain Driven Design 中是使用 Event Storming 工作坊方式進行戰略設計的落地與實現，其中不乏了對於 Problem Domain 上的探索，進而與領域專家合作找出核心領域、支撐子領域及通用子領域。</p>\n<h2 id=\"解決領域-Solution-Domain-x2F-Space\"><a href=\"#解決領域-Solution-Domain-x2F-Space\" class=\"headerlink\" title=\"解決領域 (Solution Domain&#x2F;Space)\"></a>解決領域 (Solution Domain&#x2F;Space)</h2><p>解決領域涉及如何解決問題，要用什麼工具解決這個問題。在軟體工程就是開發人員熟悉的程序開發，包含用什麼程序語言、資料庫等等。戰術設計就是開發人員如何將分析結果的領域模型撰寫程序代碼。當執行戰略設計完畢，取得戰略設計的成果：領域模型，之後開始執行戰術設計。也基於 Event Storming 結果，開發人員建立一系列的 DomainEvent、ValueObject、Entity 及 Aggregate 的對象等。Domain Driven Design 也非常強調要把業務語言&#x2F;統一語言寫入程序代碼之中。</p>\n<p>簡單地說，戰略設計就是對於問題分析與設計，戰術設計就是軟體開發。</p>\n","categories":[{"name":"Domain Driven Design","slug":"Domain-Driven-Design","count":2,"path":"api/categories/Domain-Driven-Design.json"}],"tags":[{"name":"2024","slug":"2024","count":11,"path":"api/tags/2024.json"},{"name":"DDD","slug":"DDD","count":2,"path":"api/tags/DDD.json"}]}