{"title":"SOLID原則:里氏替換原則(Liskov Substitution Principle)","slug":"LSP","date":"2024-03-19T09:34:48.000Z","updated":"2024-05-18T01:06:36.720Z","comments":true,"path":"api/articles/LSP.json","photos":[],"link":"","excerpt":"里氏替換原則里式替換原則描述:子類別應該可以替換父類並且行為不會受到影響。在原本的里式替換原則之中，如果子類別無法替換父類別，就會出現程式上的錯誤。子類別必須完全替代父類別，並不會影響原有的程式邏輯。里氏替換原則適用於繼承和介面的應用，藉此實現程式碼的可擴展性和重用性。","covers":null,"content":"<h1 id=\"里氏替換原則\"><a href=\"#里氏替換原則\" class=\"headerlink\" title=\"里氏替換原則\"></a>里氏替換原則</h1><p>里式替換原則描述:</p>\n<blockquote>\n<p>子類別應該可以替換父類並且行為不會受到影響。</p>\n</blockquote>\n<p>在原本的里式替換原則之中，如果子類別無法替換父類別，就會出現程式上的錯誤。子類別必須完全替代父類別，並不會影響原有的程式邏輯。里氏替換原則適用於繼承和介面的應用，藉此實現程式碼的可擴展性和重用性。</p>\n<span id=\"more\"></span>\n\n<p>最常見的例子是長方形與正方形:</p>\n<p><code>Rectangle.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Width &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Height &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span>(<span class=\"params\"><span class=\"built_in\">int</span> width, <span class=\"built_in\">int</span> height</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Width = width;</span><br><span class=\"line\">        Height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">CalculateArea</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Width * Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>Square.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Square</span>: <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"built_in\">int</span> width, <span class=\"built_in\">int</span> height</span>) : <span class=\"title\">base</span>(<span class=\"params\">width, height</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width != height)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(width));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Height = height;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Width = width;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>原本客戶端程式碼如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在使用上，造成無法替換的問題</span></span><br><span class=\"line\">Rectangle rectangle = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rectangleArea = rectangle.Area();</span><br></pre></td></tr></table></figure>\n\n\n<p>如果抽換成<code>Square.cs</code>:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在使用上，造成無法替換的問題</span></span><br><span class=\"line\">Rectangle rectangle = <span class=\"keyword\">new</span> Square(<span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rectangleArea = rectangle.Area();</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>里氏替換原則（Liskov Substitution Principle, LSP）是指子類別應該能夠完全替代父類別而不會對程式造成錯誤。</p>\n<p>符合 LSP 的設計原則包括子類別必須完全實現父類別的所有方法，並且不能新增或刪除父類別的任何方法；子類別的方法的前置條件不能比父類別更嚴格，後置條件不能比父類別更寬鬆等。</p>\n<p>在架構層次上，LSP 的目的是減少系統中各個元件之間的相互依賴性，提高系統的靈活性和可擴展性。這需要通過抽象化和封裝等技術，將系統中的各個元件隔離開來，使得各個元件可以獨立地進行修改和擴展，而不會對其他元件造成影響。在實踐中，可以通過設計合適的接口和抽象類別，來實現 LSP。</p>\n","categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":11,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]}