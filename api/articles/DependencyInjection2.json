{"title":"Dependency Injection (二) Mircosoft.Extensions.DependencyInjection 介紹","slug":"DependencyInjection2","date":"2023-11-27T13:12:48.000Z","updated":"2023-11-27T13:33:39.968Z","comments":true,"path":"api/articles/DependencyInjection2.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"Microsoft-Extensions-DependencyInjection\"><a href=\"#Microsoft-Extensions-DependencyInjection\" class=\"headerlink\" title=\"Microsoft.Extensions.DependencyInjection\"></a>Microsoft.Extensions.DependencyInjection</h1><p>在<code>ASP.NET Core</code>中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。<code>ASP.NET Core</code> 的 Dependency Injection Container系統提供了一個建立基於依賴注入的應用程序的機制，並支持以下功能：</p>\n<ul>\n<li><p>提供應用程序組件之間的依賴注入。</p>\n</li>\n<li><p>可以在Controller、Filter、View等多個組件中使用。</p>\n</li>\n<li><p>提供了生命週期管理功能，可以在需要時建立、和釋放物件。</p>\n</li>\n<li><p>支持對服務的多個實現進行注入，並可根據需要在運行時選擇實現。</p>\n<blockquote>\n<p>.NetCore DI 預設只支援建構子注入，但是Middleware支援方法注入。</p>\n</blockquote>\n</li>\n</ul>\n<br>\n\n<h2 id=\"IServiceCollection-是什麼\"><a href=\"#IServiceCollection-是什麼\" class=\"headerlink\" title=\"IServiceCollection 是什麼?\"></a>IServiceCollection 是什麼?</h2><p>當查詢原始碼時，會看到下列的介面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IServiceCollection : IList&lt;ServiceDescriptor&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> ServiceDescriptor.cs</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ServiceDescriptor </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public ServiceLifetime Lifetime &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public Type ServiceType &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public Type ImplementationType &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public object ImplementationInstance &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public Func&lt;IServiceProvider, object&gt; ImplementationFactory &#123; get; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// ... 略</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>其實<code>IServiceCollection.cs</code>，其實只是<code>ServiceDescriptor.cs</code>的集合。</p>\n<hr>\n<br>\n\n<h2 id=\"Dependency-Injection-–生命週期\"><a href=\"#Dependency-Injection-–生命週期\" class=\"headerlink\" title=\"Dependency Injection –生命週期\"></a>Dependency Injection –生命週期</h2><p>在<code>ServiceDescriptor.cs</code>其中的<code>ServiceLifetime.cs </code>是Enum，主要負責進行依賴注入的物件生命週期。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Specifies the lifetime of a service in an &lt;see cref=&quot;IServiceCollection&quot;/&gt;.</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">public enum ServiceLifetime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Specifies that a single instance of the service will be created.</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    Singleton,</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Specifies that a new instance of the service will be created for each scope.</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;remarks&gt;</span><br><span class=\"line\">    /// In ASP.NET Core applications a scope is created around each server request.</span><br><span class=\"line\">    /// &lt;/remarks&gt;</span><br><span class=\"line\">    Scoped,</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Specifies that a new instance of the service will be created every time it is requested.</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    Transient</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每種方式的生命週期管理方式都不同，需要根據具體的應用場景來選擇。</p>\n<ul>\n<li>Singleton：對象在整個應用程序生命週期內只會被創建一次，之後重複使用。</li>\n<li>Scoped：對象在範圍內只會被建立一次，同一個Request內所有需要使用該對象的Class都共享同一個對象。</li>\n<li>Transient：對象每次被注入時都會重新創建一個新的Instance。</li>\n</ul>\n<br>\n\n<h2 id=\"使用-Dependency-Injection-註冊方式\"><a href=\"#使用-Dependency-Injection-註冊方式\" class=\"headerlink\" title=\"使用 Dependency Injection 註冊方式\"></a>使用 Dependency Injection 註冊方式</h2><p>這邊介紹一下在開發上蠻常用的 Dependency Injection 註冊方式</p>\n<ol>\n<li><code>AddXXX&lt;TService,TImplementation&gt;()</code> 加入DI容器並直接決定生命週期。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">//建立註冊 生命週期是 Scoped</span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository, SubjectRepository&gt;();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>AddXXX&lt;TService&gt;(Func&lt;IServiceProvider, object&gt; implementationFactory)</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">//建立註冊 生命週期是 Scoped</span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository&gt;(serviceProvider=&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return new SubjectRepository();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li><code>TryAddXXX&lt;TService,TImplementation&gt;()</code> 加入DI容器，當發現<code>TService</code>已經有註冊了就不再進行註冊。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">//建立註冊 生命週期是 Scoped</span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository&gt;(serviceProvider=&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return new SubjectRepository();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<br>\n\n<h2 id=\"多個實作註冊相同的介面\"><a href=\"#多個實作註冊相同的介面\" class=\"headerlink\" title=\"多個實作註冊相同的介面\"></a>多個實作註冊相同的介面</h2><p>單一介面使用單一實作這邊就不做介紹。多種實作應該是屬常見的情境。<br>當介面有多個實作時，則會採取最後一個實作。對於 <code>IServiceCollection.cs</code> 是後進先出。但可以取得該介面的所有實作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ISubjectRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    List&lt;Subject&gt; GetAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在實作部分可能會是DB或是API。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class SubjectDbRepository : ISubjectRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;Subject&gt; GetAll()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class SubjectApiRepository : ISubjectRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;Subject&gt; GetAll()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在DI註冊則是以下程式碼。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository,SubjectDbRepository&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository,SubjectApiRepository&gt;();</span><br></pre></td></tr></table></figure>\n<p>在這段程式碼中，當使用了 <code>ISubjectRepository.cs</code> ，DI容器會給予 <code>SubjectApiRepository.cs</code> 的實作。但是如果我們需要取得全部可以在建構子中使用 <code>IEnumerable&lt;ISubjectRepository&gt;</code> 的建構子注入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SubjectRepositoryFactory : ISubjectRepositoryFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IEnumerable&lt;ISubjectRepository&gt; _subjectRepositories;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SubjectRepositoryFactory(IEnumerable&lt;ISubjectRepository&gt; subjectRepositories)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _subjectRepositories = subjectRepositories;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public ISubjectRepository Create()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return CreateInstance&lt;SubjectDbRepository&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ISubjectRepository CreateInstance&lt;T&gt;() where T : ISubjectRepository</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return this._subjectRepositories.Single(sp =&gt; sp is T);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在這個 <code>SubjectRepositoryFactory.cs</code> 建構子中可以取得 <code>ISubjectRepository.cs</code> 的所有實作。</p>\n<hr>\n<br>\n<br>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>雖然微軟提供的Dependency Injection 容器很簡單，但是可以應付大部分場景。個人並不喜歡把DI容器使用的深入。不只後續抓錯誤麻煩。也會遇到執行錯誤不知道從哪邊抓。</p>\n","categories":[{"name":"OOP","slug":"OOP","count":4,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":5,"path":"api/tags/Net-Core.json"}]}