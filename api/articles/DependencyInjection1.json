{"title":"Dependency Injection (一) 簡介","slug":"DependencyInjection1","date":"2023-11-27T13:02:48.000Z","updated":"2023-11-27T13:33:30.985Z","comments":true,"path":"api/articles/DependencyInjection1.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><ul>\n<li>Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責建立。</li>\n</ul>\n<br>\n\n<hr>\n<h2 id=\"What-is-Dependency\"><a href=\"#What-is-Dependency\" class=\"headerlink\" title=\"What is Dependency ?\"></a>What is Dependency ?</h2><p>程式上的依賴是指一個物件對象需要另一個Assembly或Class，才能完成自己的功能。具體來說，當一個物件對象使用了另一個Assembly或Class的功能時，就可以說這個組件或對象對另一個Assembly或Class存在依賴關係。</p>\n<p>在這範例中可以說<code>OrderController.cs</code>依賴了<code>OrderDataAccess.cs</code>，<code>OrderController.cs</code>必須透過<code>OrderDataAccess.cs</code>才能完成取得所有訂單清單功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ApiController]</span><br><span class=\"line\">[Route(&quot;api/[controller]&quot;)]</span><br><span class=\"line\">public class OrderController : ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private OrderDataAccess _orderDataAccess;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public OrderController(OrderDataAccess orderDataAccess)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this._orderDataAccess = orderDataAccess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [HttpGet]</span><br><span class=\"line\">    public IActionResult Get()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var orders = _orderDataAccess.GetAll(); </span><br><span class=\"line\">        // 略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>依賴關係可以分為直接依賴和間接依賴兩種情況。</p>\n<ul>\n<li><p>直接依賴指的是組件或對象直接使用了另一個組件或對象的功能，例如一個Class中使用了另一個 Class的Method。</p>\n</li>\n<li><p>間接依賴則指的是組件或對象的依賴關係被傳遞到了更多層次的組件或對象中，例如一個類使用了另一個類，而這個另一個類又使用了一個第三方類。</p>\n</li>\n</ul>\n<br>\n\n\n<h2 id=\"What-is-Injection\"><a href=\"#What-is-Injection\" class=\"headerlink\" title=\"What is Injection ?\"></a>What is Injection ?</h2><p>程式上的注入是指將依賴對象傳遞給需要使用它的對象或方法的一種方式。具體來說，當一個對象或方法需要使用另一個對象或方法的功能時，可以通過Injection的方式將這個依賴對象傳遞進去，讓需要使用它的對象或方法可以正常運作。<br>注入的方式可以分為三種：</p>\n<br>\n\n<h3 id=\"建構子注入（Constructor-Injection）\"><a href=\"#建構子注入（Constructor-Injection）\" class=\"headerlink\" title=\"建構子注入（Constructor Injection）\"></a>建構子注入（Constructor Injection）</h3><p>依賴介面由建構子取得，這一類在類別被初始化之後依賴也直接決定了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class OrderService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IOrderRepository _orderRepository;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public OrderService(IOrderRepository orderRepository)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _orderRepository = orderRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"屬性注入（Property-Injection）\"><a href=\"#屬性注入（Property-Injection）\" class=\"headerlink\" title=\"屬性注入（Property Injection）\"></a>屬性注入（Property Injection）</h3><p>依賴介面由屬性(Property)取得，在一些Dependency Injection框架在實現Property Injection也會實現延遲載入(Lazy Loading)功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class OrderService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public IOrderRepository OrderRepository &#123; get; set; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public OrderService()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"方法注入（Method-Injection）\"><a href=\"#方法注入（Method-Injection）\" class=\"headerlink\" title=\"方法注入（Method Injection）\"></a>方法注入（Method Injection）</h3><p>依賴介面由方法參數取得。在 .Net Core 之中的Middleware有支援。個人目前使用情境甚少使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class OrderService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    public async Task&lt;OrderDto&gt; GetAsync(string orderId, IOrderRepository orderRepository)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection?\"></a>Dependency Injection?</h2><p>Client直接依賴ServerA，在需求異動時候Client與Server均有可能修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digraph hierarchy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                nodesep=1.0 // increases the separation between nodes</span><br><span class=\"line\">                </span><br><span class=\"line\">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</span><br><span class=\"line\">                edge [color=Blue, style=dashed] //All the lines look like this</span><br><span class=\"line\"></span><br><span class=\"line\">                Client-&gt;&#123;ServerA ServerB&#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">                &#123;rank=same; ServerA ServerB&#125;  // Put them on the same level</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Client依賴Server的介面，透過DI Container決定了最後的Server是誰</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digraph hierarchy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                nodesep=1.0 // increases the separation between nodes</span><br><span class=\"line\">                </span><br><span class=\"line\">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</span><br><span class=\"line\">                edge [color=Blue, style=dashed] //All the lines look like this</span><br><span class=\"line\"></span><br><span class=\"line\">                Client-&gt;&#123;ServerInterface&#125;</span><br><span class=\"line\">                DIContainer-&gt;&#123;ServerInterface&#125;</span><br><span class=\"line\">                DIContainer-&gt;&#123;ServerA&#125;</span><br><span class=\"line\">                DIContainer-&gt;&#123;ServerB&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#123;rank=same; ServerA ServerB&#125;  // Put them on the same level</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<br>\n<br>\n\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>這邊也只是記錄以前前輩教的一些軟體開發上常見的觀念。但是對於後續開發上有很大的幫助。</p>\n","categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":8,"path":"api/tags/Net-Core.json"}]}