{"title":"SOLID原則:開放封閉原則(Open Close Principle)","slug":"OCP","date":"2024-03-19T09:23:48.000Z","updated":"2024-05-18T01:06:46.228Z","comments":true,"path":"api/articles/OCP.json","photos":[],"link":"","excerpt":"開放封閉原則開放封閉原則在 Clean Architecture 一書中是這樣被敘述的一個軟體製品應該對於擴充是開放的，但對於修改是封閉的。一個簡單的擴充需求，對於軟體開發上是巨大的改變。這是軟體架構的失敗。一個好的軟體架構可以將修改的程式碼減少到最低程度。在理想情形下這個值是 0。","covers":null,"content":"<h1 id=\"開放封閉原則\"><a href=\"#開放封閉原則\" class=\"headerlink\" title=\"開放封閉原則\"></a>開放封閉原則</h1><p>開放封閉原則在 <em>Clean Architecture</em> 一書中是這樣被敘述的</p>\n<blockquote>\n<p>一個軟體製品應該對於擴充是開放的，但對於修改是封閉的。</p>\n</blockquote>\n<p>一個簡單的擴充需求，對於軟體開發上是巨大的改變。這是軟體架構的失敗。一個好的軟體架構可以將修改的程式碼減少到最低程度。在理想情形下這個值是 <strong>0</strong>。</p>\n<span id=\"more\"></span>\n\n<p>擴展系統功能比較好的方式應該是新增程式碼，並不是去修改既有的程式碼來擴充系統功能。因為修改一個行之有年的系統內部邏輯，可能會發生改 A 壞 B ，如果有自動化測試來驗證既有的程式碼可以在第一時間找出來。<br>但是在實務上有自動化測試專案真的是少之又少(ps.可能祖上積德才會遇到吧…)，如果當初在設計系統的時候能避免的這種改 A 壞 B 的情形，那軟體系統將更容易修改需求及擴充功能。舉例來說，這是一個手機介面。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMobilePhone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TurnOn</span>()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TurnOff</span>()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Call</span>(<span class=\"params\"><span class=\"built_in\">string</span> phoneNumber</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>接下來，我們可以定義不同的手機，並實現<code>IMobilePhone.cs</code>介面：</p>\n<ul>\n<li><code>IPhone14.cs</code></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IPhone14</span> : <span class=\"title\">IMobilePhone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOn</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;IPhone14 is turning on.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOff</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;IPhone14 is turning off.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Call</span>(<span class=\"params\"><span class=\"built_in\">string</span> phoneNumber</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;IPhone14 is calling &quot;</span> + phoneNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>宣告 <code>IMobilePhoneFactory.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMobilePhoneFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IMobilePhone <span class=\"title\">Create</span>(<span class=\"params\"><span class=\"built_in\">string</span> mobilePhone</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>建立 <code>MobilePhoneFactory.cs</code> 實作 <code>IMobilePhoneFactory.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MobilePhoneFactory</span> : <span class=\"title\">IMobilePhoneFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IMobilePhone <span class=\"title\">Create</span>(<span class=\"params\"><span class=\"built_in\">string</span> mobilePhone</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span>(Program).Assembly</span><br><span class=\"line\">            .GetExportedTypes()</span><br><span class=\"line\">            .SingleOrDefault(t =&gt; t.Name.Equals(mobilePhone) &amp;&amp; <span class=\"keyword\">typeof</span>(IMobilePhone).IsAssignableFrom(t));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"keyword\">nameof</span>(mobilePhone));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (IMobilePhone)Activator.CreateInstance(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>GooglePixel7.cs</code></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GooglePixel7</span> : <span class=\"title\">IMobilePhone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOn</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;GooglePixel7 phone is turning on.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOff</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;GooglePixel7 phone is turning off.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Call</span>(<span class=\"params\"><span class=\"built_in\">string</span> phoneNumber</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;GooglePixel7 phone is calling &quot;</span> + phoneNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>現在，當我們使用不同型號手機，只需要使用<code>IMobilePhone.cs</code>介面，而不需要知道實際的手機型別。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mobilePhoneTypes = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;IPhone14&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> mobilePhoneType <span class=\"keyword\">in</span> mobilePhoneTypes)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mobilePhoneFactory = <span class=\"keyword\">new</span> MobilePhoneFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mobilePhone = mobilePhoneFactory.Create(mobilePhoneType);</span><br><span class=\"line\"></span><br><span class=\"line\">    mobilePhone.TurnOn();</span><br><span class=\"line\"></span><br><span class=\"line\">    mobilePhone.Call(<span class=\"string\">&quot;1234567890&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mobilePhone.TurnOff();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這樣做的好處在於，當我們需要添加新的手機型號時，只需要實現 <code>IMobilePhone.cs</code> 介面即可，不需要修改現有使用端程式碼，只需要建立設定檔將所有手機型號進行註冊動作即可。</p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>開放封閉原則的目標是實現系統的可擴展性和靈活性，使系統易於擴展而不會因為修改而對現有程式碼造成較大的影響。</p>\n<p>在類別層次上，建議設計類別時要對擴展開放，對修改封閉。</p>\n<p>在架構層次上，建議將系統組織成一系列相互獨立的元件，將這些元件安排到依賴階層中而實現。這樣可以避免高層級元件受到低層級元件變更的影響，同時使系統具有高度的模組化和可擴展性。</p>\n<p>總結，適用於類別層次和架構層次的設計原則，皆是實現系統的可擴展性和靈活性，同時保證系統的穩定性和可靠性。</p>\n","categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":11,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]}