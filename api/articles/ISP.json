{"title":"SOLID原則:接口隔離原則(Interface Segregation Principle)","slug":"ISP","date":"2024-03-19T09:38:48.000Z","updated":"2024-03-19T09:39:09.141Z","comments":true,"path":"api/articles/ISP.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"介面隔離原則\"><a href=\"#介面隔離原則\" class=\"headerlink\" title=\"介面隔離原則\"></a>介面隔離原則</h1><p>介面隔離原則是這樣被描述的:</p>\n<blockquote>\n<p>不應該強制客戶端依賴於它們不用的介面</p>\n</blockquote>\n<p>介面隔離原則主要解決介面過於擁擠的問題。建立介面保持簡潔、最低限度的功能。</p>\n<p>舉掃描介面來說:</p>\n<p><code>IScan.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IScan</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SendEmail</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>IScan</code>介面可以分離成兩個類別:</p>\n<p><code>IScan.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IScan</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>IEmailClient.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IEmailClient</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SendEmail</span>()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客戶端程式需要掃描功能只需要依賴<code>IScan.cs</code>裡面的<code>Scan</code>方法，不應該也依賴<code>SendEmail</code>方法。</p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>在類別層次上，符合介面隔離原則的設計需要將介面拆分成多個小型的、具體的介面，每個介面只提供一個特定的功能，並且避免將不相關的方法放在同一個介面中。這樣可以讓客戶端程式碼只依賴於需要的介面，而不受到不需要的介面的影響，從而提高程式的靈活性和可擴展性。</p>\n<p>在架構層次上，介面隔離原則需要通過模塊化的設計來實現。每個模塊只提供特定的功能，並且避免不必要的依賴關係。這樣可以減少系統中各個模塊之間的相互依賴，提高系統的靈活性和可擴展性。</p>\n<p>如果在專案上依賴了不需要的介面或是套件，就會導致不必要的編譯和部屬，甚至可能導致不必要的錯誤和麻煩。因此，在設計和開發專案時，需要遵循介面隔離原則，僅依賴所需的介面和套件，避免不必要的依賴關係，從而提高程式的可靠性和可維護性。</p>\n","categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":8,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]}