{"total":20,"pageSize":10,"pageCount":2,"data":[{"title":"MockServer 整合測試","slug":"MockServer_1","date":"2024-01-14T13:19:48.000Z","updated":"2024-05-18T01:26:05.361Z","comments":true,"path":"api/articles/MockServer_1.json","excerpt":"<h1 id=\"Mock-Server\"><a href=\"#Mock-Server\" class=\"headerlink\" title=\"Mock Server\"></a>Mock Server</h1><p>由於要針對API 服務進行壓力測試，並假設其他服務有回應延遲，需要使用一套簡單使用的MockServer，原本想使用Postman，但礙於環境限制，於是找一套可以運行在Docker上的MockServer。<br>如圖這是運行之後的視窗。</p>\n<p><img src=\"/../static/images/MockServerUI.png\" alt=\"Dashboard\"></p>","keywords":null,"cover":"/../static/images/MockServerUI.png","content":null,"text":"Mock Server由於要針對API 服務進行壓力測試，並假設其他服務有回應延遲，需要使用一套簡單使用的MockServer，原本想使用Postman，但礙於環境限制，於是找一套可以運行在Docker上的MockServer。<br>如圖這是運行之後的視窗。 [Figure] ","link":"","raw":null,"photos":[],"categories":[{"name":"MockServer","slug":"MockServer","count":1,"path":"api/categories/MockServer.json"}],"tags":[{"name":"2024","slug":"2024","count":11,"path":"api/tags/2024.json"}]},{"title":"關於 HttpClient 使用方式","slug":"HttpClient","date":"2023-11-27T13:32:48.000Z","updated":"2024-05-18T01:10:26.790Z","comments":true,"path":"api/articles/HttpClient.json","excerpt":"<h1 id=\"關於-HttpClient\"><a href=\"#關於-HttpClient\" class=\"headerlink\" title=\"關於 HttpClient\"></a>關於 HttpClient</h1><p>因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在<strong>CSharp</strong>中最常使用的類別庫就是<code>HttpClient.cs</code>，但是<code>HttpClient.cs</code>使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。</p>","keywords":null,"cover":null,"content":null,"text":"關於 HttpClient因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在CSharp中最常使用的類別庫就是HttpClient.cs，但是HttpClient.cs使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。官方不建議使用方式<br","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/categories/HTTP.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"}]},{"title":"Dependency Injection (二) Mircosoft.Extensions.DependencyInjection 介紹","slug":"DependencyInjection2","date":"2023-11-27T13:12:48.000Z","updated":"2024-05-18T01:06:01.403Z","comments":true,"path":"api/articles/DependencyInjection2.json","excerpt":"<h1 id=\"Microsoft-Extensions-DependencyInjection\"><a href=\"#Microsoft-Extensions-DependencyInjection\" class=\"headerlink\" title=\"Microsoft.Extensions.DependencyInjection\"></a>Microsoft.Extensions.DependencyInjection</h1><p>在<code>ASP.NET Core</code>中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。<code>ASP.NET Core</code> 的 Dependency Injection Container系統提供了一個建立基於依賴注入的應用程序的機制，並支持以下功能：</p>","keywords":null,"cover":null,"content":null,"text":"Microsoft.Extensions.DependencyInjection在ASP.NET Core中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。ASP.NET Core 的 Dependency Injec","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"}]},{"title":"Dependency Injection (一) 簡介","slug":"DependencyInjection1","date":"2023-11-27T13:02:48.000Z","updated":"2024-05-18T01:05:50.137Z","comments":true,"path":"api/articles/DependencyInjection1.json","excerpt":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><ul>\n<li>Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責建立。</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"簡介Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"}]},{"title":"Event Storming 工作坊介紹","slug":"EventStormingIntro","date":"2023-06-04T03:09:48.000Z","updated":"2024-05-18T01:07:40.106Z","comments":true,"path":"api/articles/EventStormingIntro.json","excerpt":"<h1 id=\"Event-Storming\"><a href=\"#Event-Storming\" class=\"headerlink\" title=\"Event Storming\"></a>Event Storming</h1><p>隨著軟體服務越來越複雜，很多時候團隊的領域知識(<em>Domain-Know How</em>)是很難共享的。尤其在團隊之中會遇到特定的邏輯只有少部人知道關鍵邏輯。其他人在合作上會遇到認知上的落差，導致團隊合作上溝通麻煩及代溝。</p>","keywords":null,"cover":null,"content":null,"text":"Event Storming隨著軟體服務越來越複雜，很多時候團隊的領域知識(Domain-Know How)是很難共享的。尤其在團隊之中會遇到特定的邏輯只有少部人知道關鍵邏輯。其他人在合作上會遇到認知上的落差，導致團隊合作上溝通麻煩及代溝。例如:之前在工作上對於訂單產品相關知識，","link":"","raw":null,"photos":[],"categories":[{"name":"Domain Driven Design","slug":"Domain-Driven-Design","count":2,"path":"api/categories/Domain-Driven-Design.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":"DDD","slug":"DDD","count":2,"path":"api/tags/DDD.json"},{"name":"Event Storming","slug":"Event-Storming","count":1,"path":"api/tags/Event-Storming.json"}]},{"title":"設計抽象介面","slug":"InterfaceDesign","date":"2023-04-16T13:22:48.000Z","updated":"2024-05-18T01:07:33.586Z","comments":true,"path":"api/articles/InterfaceDesign.json","excerpt":"<h1 id=\"抽象介面設計-抽象洩漏\"><a href=\"#抽象介面設計-抽象洩漏\" class=\"headerlink\" title=\"抽象介面設計 - 抽象洩漏\"></a>抽象介面設計 - 抽象洩漏</h1><p>在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。</p>","keywords":null,"cover":null,"content":null,"text":"抽象介面設計 - 抽象洩漏在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。什麼是抽象洩漏?「抽象泄漏」是軟體開發時","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":"Interface","slug":"Interface","count":1,"path":"api/tags/Interface.json"}]},{"title":"Asp.Net Core API Controller繼承","slug":"AspNetCore_WebAPI","date":"2023-04-16T12:40:48.000Z","updated":"2024-05-18T01:08:54.973Z","comments":true,"path":"api/articles/AspNetCore_WebAPI.json","excerpt":"<h1 id=\"Net-Core-Web-API-–-API-Controller-的繼承\"><a href=\"#Net-Core-Web-API-–-API-Controller-的繼承\" class=\"headerlink\" title=\".Net Core Web API – API Controller 的繼承\"></a>.Net Core Web API – API Controller 的繼承</h1><p>建立新的API時候，Controller到底要繼承Controller還是ControllerBase ?</p>","keywords":null,"cover":null,"content":null,"text":".Net Core Web API – API Controller 的繼承建立新的API時候，Controller到底要繼承Controller還是ControllerBase ?API Controller 繼承建立新的API Controller類別時，繼承到底要繼承Con","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"WebAPI","slug":"WebAPI","count":2,"path":"api/tags/WebAPI.json"}]},{"title":"Microsoft.FeatureManagement Feature Toggle","slug":"Microsoft_FeatureManagement","date":"2023-01-01T04:20:48.000Z","updated":"2024-05-18T01:07:25.292Z","comments":true,"path":"api/articles/Microsoft_FeatureManagement.json","excerpt":"<h1 id=\"ASP-NET-Core-Feature-Flags\"><a href=\"#ASP-NET-Core-Feature-Flags\" class=\"headerlink\" title=\"ASP.NET Core Feature Flags\"></a>ASP.NET Core Feature Flags</h1><p>ASP.NET Core提供了一種動態打開或關閉功能的解決方案。  </p>","keywords":null,"cover":null,"content":null,"text":"ASP.NET Core Feature FlagsASP.NET Core提供了一種動態打開或關閉功能的解決方案。  Github: https://github.com/microsoft/FeatureManagement-Dotnet  Introducing Micro","link":"","raw":null,"photos":[],"categories":[{"name":"FeatureToggle","slug":"FeatureToggle","count":1,"path":"api/categories/FeatureToggle.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"FeatureToggle","slug":"FeatureToggle","count":1,"path":"api/tags/FeatureToggle.json"}]},{"title":"CoreProfile 實現跨應用程式性能調整及監控","slug":"coreprofile實現跨服務追蹤","date":"2022-12-16T14:53:48.000Z","updated":"2024-05-18T01:08:09.273Z","comments":true,"path":"api/articles/coreprofile實現跨服務追蹤.json","excerpt":"<h1 id=\"CoreProfile-實現跨應用程式性能調整及監控\"><a href=\"#CoreProfile-實現跨應用程式性能調整及監控\" class=\"headerlink\" title=\"CoreProfile 實現跨應用程式性能調整及監控\"></a>CoreProfile 實現跨應用程式性能調整及監控</h1><ul>\n<li>當橫跨API服務應用程式之間請求與回應效能低下，需要API服務性能調教及追蹤效能。</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"CoreProfile 實現跨應用程式性能調整及監控當橫跨API服務應用程式之間請求與回應效能低下，需要API服務性能調教及追蹤效能。NuGet套件:1<br>2<br>Install-Package CoreProfiler<br>Install-Package CorePro","link":"","raw":null,"photos":[],"categories":[{"name":"Monitor","slug":"Monitor","count":1,"path":"api/categories/Monitor.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"2022","slug":"2022","count":2,"path":"api/tags/2022.json"},{"name":"Monitor","slug":"Monitor","count":1,"path":"api/tags/Monitor.json"}]},{"title":"我的第一篇文章","slug":"我的第一篇文章","date":"2022-12-10T07:53:48.000Z","updated":"2022-12-16T15:12:31.627Z","comments":true,"path":"api/articles/我的第一篇文章.json","excerpt":"","keywords":null,"cover":null,"content":"<p>原本沒有寫部落格習慣，因為在軟體工程業工作久了遇到許多問題。<br>希望把遇到的問題或是技術心得寫下來。</p>\n<p>現在在工作上寫文件，習慣使用Markdown<br>於是開始想Markdown來寫文章。<br>依稀記得公司的同事也有用Markdown寫部落格習慣。他推薦用Hexo與Github方式簡單自架出漂亮的部落格。</p>\n<p>在2022年也開始練習對於自己所學的開始學習如何輸出給別人，也希望能慢慢養成寫部落格紀錄的習慣。</p>\n","text":"原本沒有寫部落格習慣，因為在軟體工程業工作久了遇到許多問題。<br>希望把遇到的問題或是技術心得寫下來。現在在工作上寫文件，習慣使用Markdown<br>於是開始想Markdown來寫文章。<br>依稀記得公司的同事也有用Markdown寫部落格習慣。他推薦用Hexo與Gith","link":"","raw":null,"photos":[],"categories":[{"name":"個人心得","slug":"個人心得","count":1,"path":"api/categories/個人心得.json"}],"tags":[{"name":"2022","slug":"2022","count":2,"path":"api/tags/2022.json"},{"name":"個人心情","slug":"個人心情","count":1,"path":"api/tags/個人心情.json"}]}]}