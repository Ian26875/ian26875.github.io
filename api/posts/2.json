{"total":19,"pageSize":10,"pageCount":2,"data":[{"title":"關於 HttpClient 使用方式","slug":"HttpClient","date":"2023-11-27T13:32:48.000Z","updated":"2023-11-27T13:40:05.011Z","comments":true,"path":"api/articles/HttpClient.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"關於-HttpClient\"><a href=\"#關於-HttpClient\" class=\"headerlink\" title=\"關於 HttpClient\"></a>關於 HttpClient</h1><p>因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在<strong>CSharp</strong>中最常使用的類別庫就是<code>HttpClient.cs</code>，但是<code>HttpClient.cs</code>使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。</p>\n<h2 id=\"官方不建議使用方式\"><a href=\"#官方不建議使用方式\" class=\"headerlink\" title=\"官方不建議使用方式\"></a>官方不建議使用方式</h2><br>\n\n<h3 id=\"直接使用using-HttpClient\"><a href=\"#直接使用using-HttpClient\" class=\"headerlink\" title=\"直接使用using HttpClient\"></a>直接使用<code>using</code> HttpClient</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">static async Task Main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tvar url = &quot;http://localhost:5259/WeatherForecast&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tint requestCount = 10000; // 設定請求的次數</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor (int i = 0; i &lt; requestCount; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tusing (var client = new HttpClient())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttry</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tvar response = await client.GetAsync(url);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tresponse.EnsureSuccessStatusCode();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcatch (Exception ex)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tConsole.WriteLine($&quot;An error occurred: &#123;ex.Message&#125;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsole.WriteLine(&quot;Finish!!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>建立一支API 讓這段程式碼可以去Connection，很有可能會發生以下的錯誤。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">An error occurred: System.Net.Http.HttpRequestException: 一次只能用一個通訊端位址 (通訊協定/網路位址/連接埠)。 (localhost:5259)</span><br><span class=\"line\"> ---&gt; System.Net.Sockets.SocketException (10048): 一次只能用一個通訊端位址 (通訊協定/網路位址/連接埠)。</span><br><span class=\"line\">   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)</span><br><span class=\"line\">   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)</span><br><span class=\"line\">   at System.Net.Sockets.Socket.&lt;ConnectAsync&gt;g__WaitForConnectWithCancellation|281_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)</span><br><span class=\"line\">   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken)</span><br><span class=\"line\">   --- End of inner exception stack trace ---</span><br><span class=\"line\">    // 略</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>在官方文件有提到這一點</p>\n<p><a href=\"https://learn.microsoft.com/zh-tw/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net\">.NET 中可用的原始 HttpClient 類別問題</a></p>\n<blockquote>\n<p>雖然這個類別會實作 IDisposable，但不建議在 using 陳述式內加以宣告及具現化，因為處置 <code>HttpClient.cs</code> 物件時，底層通訊端並不會立即釋放，而這可能會導致「通訊端耗盡」問題。 </p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"在Dependency-Injection-中使用Singleton或是宣告靜態物件\"><a href=\"#在Dependency-Injection-中使用Singleton或是宣告靜態物件\" class=\"headerlink\" title=\"在Dependency Injection 中使用Singleton或是宣告靜態物件\"></a>在Dependency Injection 中使用Singleton或是宣告靜態物件</h3><blockquote>\n<p>開發人員遇到的另一個問題是在長時間執行的處理序中使用 HttpClient 的共用執行個體時。 在 HttpClient 具現化為 singleton 或靜態物件的情況下，其並無法處理 DNS 變更</p>\n</blockquote>\n<p>例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 註冊成Singleton</span><br><span class=\"line\">builder.Services.AddSingleton&lt;HttpClient&gt;();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<br>\n<br>\n\n\n<h2 id=\"解決方式之一-使用IHttpClientFactory-cs\"><a href=\"#解決方式之一-使用IHttpClientFactory-cs\" class=\"headerlink\" title=\"解決方式之一 使用IHttpClientFactory.cs\"></a>解決方式之一 使用<code>IHttpClientFactory.cs</code></h2><p>在 .Net Core引入<code>IHttpClientFactory.cs</code>介面去建立<code>HttpClient.cs</code>。<br>特點是可以由<code>IHttpClientFactory.cs</code>去管理HttpMessageHandler的生命週期，避免自行管理<code>HttpClient.cs</code>的生命週期。</p>\n<h3 id=\"基本使用方式\"><a href=\"#基本使用方式\" class=\"headerlink\" title=\"基本使用方式\"></a>基本使用方式</h3><p>需要在Dependency Injection裡面加上了<code> services.AddHttpClient();</code> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 加上這一行</span><br><span class=\"line\">builder.Services.AddHttpClient();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"具名HttpClient\"><a href=\"#具名HttpClient\" class=\"headerlink\" title=\"具名HttpClient\"></a>具名HttpClient</h3><ul>\n<li>應用程式需要不同的HttpClient用法或是設定。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 加上這一行</span><br><span class=\"line\">builder.Services.AddHttpClient(&quot;YourName&quot;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"調用方\"><a href=\"#調用方\" class=\"headerlink\" title=\"調用方\"></a>調用方</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Repository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IHttpClientFactory _httpClientFactory;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Repository(IHttpClientFactory httpClientFactory)  </span><br><span class=\"line\">    &#123;        </span><br><span class=\"line\">        this._httpClientFactory = httpClientFactory;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public async Task&lt;Todo[]&gt; GetToDos()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string url = &quot;your service url&quot;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        using var client = _httpClientFactory.CreateClient(&quot;YourName&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        var response = await client.GetFromJsonAsync&lt;Todo[]&gt;(url,new JsonSerializerOptions(JsonSerializerDefaults.Web));  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","text":"關於 HttpClient因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在CSharp中最常使用的類別庫就是HttpClient.cs，但是HttpClient.cs使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。官方不建議使用方式<br","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":3,"path":"api/categories/WebAPI.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/categories/HTTP.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"}]},{"title":"Dependency Injection (二) Mircosoft.Extensions.DependencyInjection 介紹","slug":"DependencyInjection2","date":"2023-11-27T13:12:48.000Z","updated":"2023-11-27T13:33:39.968Z","comments":true,"path":"api/articles/DependencyInjection2.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Microsoft-Extensions-DependencyInjection\"><a href=\"#Microsoft-Extensions-DependencyInjection\" class=\"headerlink\" title=\"Microsoft.Extensions.DependencyInjection\"></a>Microsoft.Extensions.DependencyInjection</h1><p>在<code>ASP.NET Core</code>中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。<code>ASP.NET Core</code> 的 Dependency Injection Container系統提供了一個建立基於依賴注入的應用程序的機制，並支持以下功能：</p>\n<ul>\n<li><p>提供應用程序組件之間的依賴注入。</p>\n</li>\n<li><p>可以在Controller、Filter、View等多個組件中使用。</p>\n</li>\n<li><p>提供了生命週期管理功能，可以在需要時建立、和釋放物件。</p>\n</li>\n<li><p>支持對服務的多個實現進行注入，並可根據需要在運行時選擇實現。</p>\n<blockquote>\n<p>.NetCore DI 預設只支援建構子注入，但是Middleware支援方法注入。</p>\n</blockquote>\n</li>\n</ul>\n<br>\n\n<h2 id=\"IServiceCollection-是什麼\"><a href=\"#IServiceCollection-是什麼\" class=\"headerlink\" title=\"IServiceCollection 是什麼?\"></a>IServiceCollection 是什麼?</h2><p>當查詢原始碼時，會看到下列的介面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IServiceCollection : IList&lt;ServiceDescriptor&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> ServiceDescriptor.cs</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ServiceDescriptor </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public ServiceLifetime Lifetime &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public Type ServiceType &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public Type ImplementationType &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public object ImplementationInstance &#123; get; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /// &lt;inheritdoc /&gt;</span><br><span class=\"line\">    public Func&lt;IServiceProvider, object&gt; ImplementationFactory &#123; get; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// ... 略</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>其實<code>IServiceCollection.cs</code>，其實只是<code>ServiceDescriptor.cs</code>的集合。</p>\n<hr>\n<br>\n\n<h2 id=\"Dependency-Injection-–生命週期\"><a href=\"#Dependency-Injection-–生命週期\" class=\"headerlink\" title=\"Dependency Injection –生命週期\"></a>Dependency Injection –生命週期</h2><p>在<code>ServiceDescriptor.cs</code>其中的<code>ServiceLifetime.cs </code>是Enum，主要負責進行依賴注入的物件生命週期。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// Specifies the lifetime of a service in an &lt;see cref=&quot;IServiceCollection&quot;/&gt;.</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">public enum ServiceLifetime</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Specifies that a single instance of the service will be created.</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    Singleton,</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Specifies that a new instance of the service will be created for each scope.</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    /// &lt;remarks&gt;</span><br><span class=\"line\">    /// In ASP.NET Core applications a scope is created around each server request.</span><br><span class=\"line\">    /// &lt;/remarks&gt;</span><br><span class=\"line\">    Scoped,</span><br><span class=\"line\">    </span><br><span class=\"line\">    /// &lt;summary&gt;</span><br><span class=\"line\">    /// Specifies that a new instance of the service will be created every time it is requested.</span><br><span class=\"line\">    /// &lt;/summary&gt;</span><br><span class=\"line\">    Transient</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每種方式的生命週期管理方式都不同，需要根據具體的應用場景來選擇。</p>\n<ul>\n<li>Singleton：對象在整個應用程序生命週期內只會被創建一次，之後重複使用。</li>\n<li>Scoped：對象在範圍內只會被建立一次，同一個Request內所有需要使用該對象的Class都共享同一個對象。</li>\n<li>Transient：對象每次被注入時都會重新創建一個新的Instance。</li>\n</ul>\n<br>\n\n<h2 id=\"使用-Dependency-Injection-註冊方式\"><a href=\"#使用-Dependency-Injection-註冊方式\" class=\"headerlink\" title=\"使用 Dependency Injection 註冊方式\"></a>使用 Dependency Injection 註冊方式</h2><p>這邊介紹一下在開發上蠻常用的 Dependency Injection 註冊方式</p>\n<ol>\n<li><code>AddXXX&lt;TService,TImplementation&gt;()</code> 加入DI容器並直接決定生命週期。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">//建立註冊 生命週期是 Scoped</span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository, SubjectRepository&gt;();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><code>AddXXX&lt;TService&gt;(Func&lt;IServiceProvider, object&gt; implementationFactory)</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">//建立註冊 生命週期是 Scoped</span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository&gt;(serviceProvider=&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return new SubjectRepository();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"3\">\n<li><code>TryAddXXX&lt;TService,TImplementation&gt;()</code> 加入DI容器，當發現<code>TService</code>已經有註冊了就不再進行註冊。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">//建立註冊 生命週期是 Scoped</span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository&gt;(serviceProvider=&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return new SubjectRepository();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<br>\n\n<h2 id=\"多個實作註冊相同的介面\"><a href=\"#多個實作註冊相同的介面\" class=\"headerlink\" title=\"多個實作註冊相同的介面\"></a>多個實作註冊相同的介面</h2><p>單一介面使用單一實作這邊就不做介紹。多種實作應該是屬常見的情境。<br>當介面有多個實作時，則會採取最後一個實作。對於 <code>IServiceCollection.cs</code> 是後進先出。但可以取得該介面的所有實作。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface ISubjectRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    List&lt;Subject&gt; GetAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在實作部分可能會是DB或是API。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class SubjectDbRepository : ISubjectRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;Subject&gt; GetAll()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class SubjectApiRepository : ISubjectRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public List&lt;Subject&gt; GetAll()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        //略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在DI註冊則是以下程式碼。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository,SubjectDbRepository&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddScoped&lt;ISubjectRepository,SubjectApiRepository&gt;();</span><br></pre></td></tr></table></figure>\n<p>在這段程式碼中，當使用了 <code>ISubjectRepository.cs</code> ，DI容器會給予 <code>SubjectApiRepository.cs</code> 的實作。但是如果我們需要取得全部可以在建構子中使用 <code>IEnumerable&lt;ISubjectRepository&gt;</code> 的建構子注入。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class SubjectRepositoryFactory : ISubjectRepositoryFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IEnumerable&lt;ISubjectRepository&gt; _subjectRepositories;</span><br><span class=\"line\"></span><br><span class=\"line\">    public SubjectRepositoryFactory(IEnumerable&lt;ISubjectRepository&gt; subjectRepositories)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _subjectRepositories = subjectRepositories;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public ISubjectRepository Create()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return CreateInstance&lt;SubjectDbRepository&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ISubjectRepository CreateInstance&lt;T&gt;() where T : ISubjectRepository</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return this._subjectRepositories.Single(sp =&gt; sp is T);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在這個 <code>SubjectRepositoryFactory.cs</code> 建構子中可以取得 <code>ISubjectRepository.cs</code> 的所有實作。</p>\n<hr>\n<br>\n<br>\n\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><p>雖然微軟提供的Dependency Injection 容器很簡單，但是可以應付大部分場景。個人並不喜歡把DI容器使用的深入。不只後續抓錯誤麻煩。也會遇到執行錯誤不知道從哪邊抓。</p>\n","text":"Microsoft.Extensions.DependencyInjection在ASP.NET Core中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。ASP.NET Core 的 Dependency Injec","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"}]},{"title":"Dependency Injection (一) 簡介","slug":"DependencyInjection1","date":"2023-11-27T13:02:48.000Z","updated":"2023-11-27T13:33:30.985Z","comments":true,"path":"api/articles/DependencyInjection1.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><ul>\n<li>Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責建立。</li>\n</ul>\n<br>\n\n<hr>\n<h2 id=\"What-is-Dependency\"><a href=\"#What-is-Dependency\" class=\"headerlink\" title=\"What is Dependency ?\"></a>What is Dependency ?</h2><p>程式上的依賴是指一個物件對象需要另一個Assembly或Class，才能完成自己的功能。具體來說，當一個物件對象使用了另一個Assembly或Class的功能時，就可以說這個組件或對象對另一個Assembly或Class存在依賴關係。</p>\n<p>在這範例中可以說<code>OrderController.cs</code>依賴了<code>OrderDataAccess.cs</code>，<code>OrderController.cs</code>必須透過<code>OrderDataAccess.cs</code>才能完成取得所有訂單清單功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ApiController]</span><br><span class=\"line\">[Route(&quot;api/[controller]&quot;)]</span><br><span class=\"line\">public class OrderController : ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private OrderDataAccess _orderDataAccess;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public OrderController(OrderDataAccess orderDataAccess)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        this._orderDataAccess = orderDataAccess;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [HttpGet]</span><br><span class=\"line\">    public IActionResult Get()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        var orders = _orderDataAccess.GetAll(); </span><br><span class=\"line\">        // 略</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>依賴關係可以分為直接依賴和間接依賴兩種情況。</p>\n<ul>\n<li><p>直接依賴指的是組件或對象直接使用了另一個組件或對象的功能，例如一個Class中使用了另一個 Class的Method。</p>\n</li>\n<li><p>間接依賴則指的是組件或對象的依賴關係被傳遞到了更多層次的組件或對象中，例如一個類使用了另一個類，而這個另一個類又使用了一個第三方類。</p>\n</li>\n</ul>\n<br>\n\n\n<h2 id=\"What-is-Injection\"><a href=\"#What-is-Injection\" class=\"headerlink\" title=\"What is Injection ?\"></a>What is Injection ?</h2><p>程式上的注入是指將依賴對象傳遞給需要使用它的對象或方法的一種方式。具體來說，當一個對象或方法需要使用另一個對象或方法的功能時，可以通過Injection的方式將這個依賴對象傳遞進去，讓需要使用它的對象或方法可以正常運作。<br>注入的方式可以分為三種：</p>\n<br>\n\n<h3 id=\"建構子注入（Constructor-Injection）\"><a href=\"#建構子注入（Constructor-Injection）\" class=\"headerlink\" title=\"建構子注入（Constructor Injection）\"></a>建構子注入（Constructor Injection）</h3><p>依賴介面由建構子取得，這一類在類別被初始化之後依賴也直接決定了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class OrderService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IOrderRepository _orderRepository;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public OrderService(IOrderRepository orderRepository)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _orderRepository = orderRepository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"屬性注入（Property-Injection）\"><a href=\"#屬性注入（Property-Injection）\" class=\"headerlink\" title=\"屬性注入（Property Injection）\"></a>屬性注入（Property Injection）</h3><p>依賴介面由屬性(Property)取得，在一些Dependency Injection框架在實現Property Injection也會實現延遲載入(Lazy Loading)功能。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class OrderService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public IOrderRepository OrderRepository &#123; get; set; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public OrderService()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n\n<h3 id=\"方法注入（Method-Injection）\"><a href=\"#方法注入（Method-Injection）\" class=\"headerlink\" title=\"方法注入（Method Injection）\"></a>方法注入（Method Injection）</h3><p>依賴介面由方法參數取得。在 .Net Core 之中的Middleware有支援。個人目前使用情境甚少使用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class OrderService</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">    public async Task&lt;OrderDto&gt; GetAsync(string orderId, IOrderRepository orderRepository)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection?\"></a>Dependency Injection?</h2><p>Client直接依賴ServerA，在需求異動時候Client與Server均有可能修改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digraph hierarchy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                nodesep=1.0 // increases the separation between nodes</span><br><span class=\"line\">                </span><br><span class=\"line\">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</span><br><span class=\"line\">                edge [color=Blue, style=dashed] //All the lines look like this</span><br><span class=\"line\"></span><br><span class=\"line\">                Client-&gt;&#123;ServerA ServerB&#125;</span><br><span class=\"line\">               </span><br><span class=\"line\">                &#123;rank=same; ServerA ServerB&#125;  // Put them on the same level</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Client依賴Server的介面，透過DI Container決定了最後的Server是誰</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">digraph hierarchy &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                nodesep=1.0 // increases the separation between nodes</span><br><span class=\"line\">                </span><br><span class=\"line\">                node [color=Red,fontname=Courier,shape=box] //All nodes will this shape and colour</span><br><span class=\"line\">                edge [color=Blue, style=dashed] //All the lines look like this</span><br><span class=\"line\"></span><br><span class=\"line\">                Client-&gt;&#123;ServerInterface&#125;</span><br><span class=\"line\">                DIContainer-&gt;&#123;ServerInterface&#125;</span><br><span class=\"line\">                DIContainer-&gt;&#123;ServerA&#125;</span><br><span class=\"line\">                DIContainer-&gt;&#123;ServerB&#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                &#123;rank=same; ServerA ServerB&#125;  // Put them on the same level</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<br>\n<br>\n\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>這邊也只是記錄以前前輩教的一些軟體開發上常見的觀念。但是對於後續開發上有很大的幫助。</p>\n","text":"簡介Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"}]},{"title":"Event Storming 工作坊介紹","slug":"EventStormingIntro","date":"2023-06-04T03:09:48.000Z","updated":"2024-03-19T10:39:00.970Z","comments":true,"path":"api/articles/EventStormingIntro.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Event-Storming\"><a href=\"#Event-Storming\" class=\"headerlink\" title=\"Event Storming\"></a>Event Storming</h1><p>隨著軟體服務越來越複雜，很多時候團隊的領域知識(<em>Domain-Know How</em>)是很難共享的。尤其在團隊之中會遇到特定的邏輯只有少部人知道關鍵邏輯。其他人在合作上會遇到認知上的落差，導致團隊合作上溝通麻煩及代溝。</p>\n<p>例如:之前在工作上對於訂單產品相關知識，兩個人有兩個說法，三個人有三個人說法。這導致了開發上邏輯非常混亂，這時候我提出跑一次 <strong>Event Storming</strong>工作仿。用來釐清需求及各種專有名詞。並讓參與人員一起討論關於產品訂單的流程概念。</p>\n<h2 id=\"事前準備\"><a href=\"#事前準備\" class=\"headerlink\" title=\"事前準備\"></a>事前準備</h2><p>需要一份畫紙捲及很多顏色的便利貼，找一間有很大的牆面或是會議室。至於便利貼，最少要有以下有基本顏色較佳。</p>\n<h3 id=\"卡片顏色及介紹\"><a href=\"#卡片顏色及介紹\" class=\"headerlink\" title=\"卡片顏色及介紹\"></a>卡片顏色及介紹</h3><ul>\n<li><p><span style=\"color:orange\">橘色便利貼</span> : 表示領域事件，指在業務流程裡面產生的事件(使用英文表示應用過去式)。 例如:所在地座標已重新定位(領域事件)。</p>\n</li>\n<li><p><span style=\"color:yellow\">黃色便利貼</span> : 表示使用者或是角色。例如:系統管理員。或是像是職位等等均可以表示。</p>\n</li>\n<li><p><span style=\"color:purple\">紫色便利貼</span> : 表示商業邏輯或是領域事件發生之後，需要如何處理。例如:當物件上架，則寄Emal會通知會員 。 ps:遇到需求有<code>當...(DomainEvent)，則要做什麼...(Process)</code>，語句亦可留意。</p>\n</li>\n<li><p><span style=\"color:blue\">藍色便利貼</span> : 表示使用者決策執行動作，也表示使用者意圖，同時也會產生領域事件。例如:進入聊天室，本身具有命令及決策意圖。</p>\n</li>\n<li><p><span style=\"color:pink\">粉紅色便利貼</span> : 外部系統，可以是外部服務或是任何資料儲存方案。 例如:任何資料庫方案或是第三方服務等等。</p>\n</li>\n<li><p><span style=\"color:#dbeb34\">深黃色便利貼</span> : 聚合根，這是也是領域驅動設計強調的概念，表示一群領域物件的集合，可以視為一個單元。這往往是最後軟體設計結果。這設計包含對於領域邊界劃分。</p>\n</li>\n<li><p><span style=\"color:green\">綠色便利貼</span> : 使用者介面或是可以標記UI最重要的欄位，亦可以截圖補充說明。 例如:任何使用者介面。</p>\n</li>\n<li><p><span style=\"color:red\">紅色便利貼</span> : 任何參加者對於任何流程有問題，均可以貼，方便後面進行討論。</p>\n</li>\n</ul>\n<h2 id=\"Big-Picture\"><a href=\"#Big-Picture\" class=\"headerlink\" title=\"Big Picture\"></a>Big Picture</h2><p>一開始是請所有的人員進行對於這問題用戶可能會有那些任務需要被完成的。例如:登入、建立產品資訊…等任務。將這些領域事件找出來並以<span style=\"color:orange\">橘色卡片</span>寫領域事件。如果有問題可以先貼<span style=\"color:red\">紅色便利貼</span>把問題寫下來，等大家一起討論。<br>也可以找出所有淺在的使用者以<span style=\"color:yellow\">黃色便利貼</span>表示，並決定使用者是否能觸發事件。這邊也是<strong>授權</strong>使用者那些功能。</p>\n<p>可以藉由找一段流程說明使用者如何操作系統，依照內容大家依序寫出領域事件。</p>\n<p>以下是整理當初跑Event Storming需要注意的:</p>\n<h3 id=\"1-時間軸由左至右\"><a href=\"#1-時間軸由左至右\" class=\"headerlink\" title=\"1. 時間軸由左至右\"></a>1. 時間軸由左至右</h3><p>發生的領域事件一定有先後順序的，需要由最早發生的事件<strong>由左排至右邊</strong>。</p>\n<h3 id=\"2-事件是會改變系統狀態\"><a href=\"#2-事件是會改變系統狀態\" class=\"headerlink\" title=\"2. 事件是會改變系統狀態\"></a>2. 事件是會改變系統狀態</h3><p>領域事件是會改變系統狀態，所有查詢動作可以暫時忽略。藉由需求進行分析淺在領域事件。</p>\n<h3 id=\"3-領域事件並不是CRUD\"><a href=\"#3-領域事件並不是CRUD\" class=\"headerlink\" title=\"3. 領域事件並不是CRUD\"></a>3. 領域事件並不是CRUD</h3><p>由於團隊還是以資料庫為核心去思考，導致在寫領域事件這件事會出現了UpdateXXX，領域事件而是<strong>AdvertiseRenameEvent</strong>…等，用來敘述在這個系統領域中使用者發生事情，也表示了使用者想要做什麼事情。</p>\n<h3 id=\"4-領域事件用英文過去式\"><a href=\"#4-領域事件用英文過去式\" class=\"headerlink\" title=\"4. 領域事件用英文過去式\"></a>4. 領域事件用英文過去式</h3><p>使用動詞過去式（英文加 -ed ，中文加「已」)，舉例來說:訂單已成立、貨物已送出…等等。</p>\n<h2 id=\"Process-Modelling\"><a href=\"#Process-Modelling\" class=\"headerlink\" title=\"Process Modelling\"></a>Process Modelling</h2><p>這時候已經有了User、Domain Event。我們可以在User與DomainEvent之間加上命令&#x2F;使用案例以<span style=\"color:blue\">藍色便利貼</span>表示。以及事件與事件有沒有連動關係。舉例來說:訂單已成立了，可能會與通知系統連動。這時候可以使用<span style=\"color:purple\">紫色便利貼</span>貼在訂單已成立後面，表示針對這事件，我們需要去做後續的處理。</p>\n<h3 id=\"1-命令一律以動詞開頭\"><a href=\"#1-命令一律以動詞開頭\" class=\"headerlink\" title=\"1. 命令一律以動詞開頭\"></a>1. 命令一律以動詞開頭</h3><p>命令用動詞開頭。舉例來說 : CreateUserCommand。</p>\n<p>找出所有事件之間關聯中間使用<span style=\"color:purple\">紫色卡片</span> 貼上表示處理事件處理者，可能去執行其他的使用案例。</p>\n<h2 id=\"Software-Design\"><a href=\"#Software-Design\" class=\"headerlink\" title=\"Software Design\"></a>Software Design</h2><p>這邊會進行Aggregate的設計，這時候也會對於所有使用情境有所瞭解。</p>\n<p>這時候需要將所有使用情境列出來，驗證領域模型是不是能夠符合所有的情境。</p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>個人已在團隊中使用Event Storming進行專案需求及分析，對於在專案溝通上也有很大的幫助。例如: 程式碼命名這件事，大家容易在這時候同步相同的英文詞彙及概念，減少後續維運上的困擾。</p>\n<p>還有對於整個系統流程梳理上更容易知道系統的整體流程與流程流向。對於軟體服務上的設計提供比較明確的方向，也比較容易找出服務之間邊界。</p>\n<p>目前有做過Event Storming的專案，對於整個系統有比較深刻的印象，尤其是邏輯及功能這樣對於個人對於系統的 Domain-Know How 有更深的了解。也是歸功於Event Storming的分析與視覺化。個人感想是<code>Event Storming</code>是Domain Driven Design價值很高的一種方式。</p>\n","text":"Event Storming隨著軟體服務越來越複雜，很多時候團隊的領域知識(Domain-Know How)是很難共享的。尤其在團隊之中會遇到特定的邏輯只有少部人知道關鍵邏輯。其他人在合作上會遇到認知上的落差，導致團隊合作上溝通麻煩及代溝。例如:之前在工作上對於訂單產品相關知識，","link":"","raw":null,"photos":[],"categories":[{"name":"Domain Driven Design","slug":"Domain-Driven-Design","count":2,"path":"api/categories/Domain-Driven-Design.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":"DDD","slug":"DDD","count":2,"path":"api/tags/DDD.json"},{"name":"Event Storming","slug":"Event-Storming","count":1,"path":"api/tags/Event-Storming.json"}]},{"title":"設計抽象介面","slug":"InterfaceDesign","date":"2023-04-16T13:22:48.000Z","updated":"2023-04-23T06:10:26.203Z","comments":true,"path":"api/articles/InterfaceDesign.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"抽象介面設計-抽象洩漏\"><a href=\"#抽象介面設計-抽象洩漏\" class=\"headerlink\" title=\"抽象介面設計 - 抽象洩漏\"></a>抽象介面設計 - 抽象洩漏</h1><p>在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。</p>\n<hr>\n<h2 id=\"什麼是抽象洩漏\"><a href=\"#什麼是抽象洩漏\" class=\"headerlink\" title=\"什麼是抽象洩漏?\"></a>什麼是抽象洩漏?</h2><p>「抽象泄漏」是軟體開發時，本應隱藏實現細節的抽象化不可避免地暴露出底層細節與局限性。抽象泄露是棘手的問題，因為抽象化本來目的就是向用戶隱藏不必要公開的細節。(From - <a href=\"https://https//zh.wikipedia.org/zh-tw/%E6%8A%BD%E8%B1%A1%E6%B3%84%E6%BC%8F\">維基百科</a>)</p>\n<p>以下面的介面為例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentDbRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByIdAsync(string studentId);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByNameAsync(string studentName);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task SaveAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task ModifyAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task RemoveAsync(StudentModel student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"要如何避免抽象洩漏\"><a href=\"#要如何避免抽象洩漏\" class=\"headerlink\" title=\"要如何避免抽象洩漏??\"></a>要如何避免抽象洩漏??</h2><p>在<code>IStudentDbRepository.cs</code>之中，介面名稱已經透露出實作內容是依賴資料庫。<br>這是一個很不好的介面設計。當實作方式從資料庫存取改為使用Web API方式，這介面是不是會出現問題 ?</p>\n<p>比較好一點的介面設計應該是隱蔽一些實作的細節。在Repository的介面中，我們應該需要隱蔽的是資料從哪邊來，讓調用方可以直接從介面之中取得自己所需的資料，不必知道資料從Database或是Web API。這是實作 Repository 介面才需要決定的，並非其他調用方需要知道。並不是為了抽介面而建立介面。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public interface IStudentRepository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByIdAsync(string studentId);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task&lt;StudentModel&gt; GetByNameAsync(string studentName);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task SaveAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task ModifyAsync(StudentModel student);</span><br><span class=\"line\">    </span><br><span class=\"line\">    Task RemoveAsync(StudentModel student);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","text":"抽象介面設計 - 抽象洩漏在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。什麼是抽象洩漏?「抽象泄漏」是軟體開發時","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":"Interface","slug":"Interface","count":1,"path":"api/tags/Interface.json"}]},{"title":"Asp.Net Core API Controller繼承","slug":"AspNetCore_WebAPI","date":"2023-04-16T12:40:48.000Z","updated":"2023-04-23T06:10:08.314Z","comments":true,"path":"api/articles/AspNetCore_WebAPI.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Net-Core-Web-API-–-API-Controller-的繼承\"><a href=\"#Net-Core-Web-API-–-API-Controller-的繼承\" class=\"headerlink\" title=\".Net Core Web API – API Controller 的繼承\"></a>.Net Core Web API – API Controller 的繼承</h1><h2 id=\"API-Controller-繼承\"><a href=\"#API-Controller-繼承\" class=\"headerlink\" title=\"API Controller 繼承\"></a>API Controller 繼承</h2><p>建立新的API Controller類別時，繼承到底要繼承Controller還是ControllerBase? 這兩個類別有什麼差異?<br>當翻開原始碼時候可以發現兩個類別的繼承關係。</p>\n<ul>\n<li>完整程式碼 : <a href=\"https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Core/src/ControllerBase.cs\">ControllerBase</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Controller]</span><br><span class=\"line\">public abstract class ControllerBase</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private ControllerContext? _controllerContext;</span><br><span class=\"line\">    private IModelMetadataProvider? _metadataProvider;</span><br><span class=\"line\">    private IModelBinderFactory? _modelBinderFactory;</span><br><span class=\"line\">    private IObjectModelValidator? _objectValidator;</span><br><span class=\"line\">    private IUrlHelper? _url;</span><br><span class=\"line\">    private ProblemDetailsFactory? _problemDetailsFactory;</span><br><span class=\"line\">    // 略</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>完整程式碼 : <a href=\"https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.ViewFeatures/src/Controller.cs\">Controller</a></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">/// &lt;summary&gt;</span><br><span class=\"line\">/// A base class for an MVC controller with view support.</span><br><span class=\"line\">/// &lt;/summary&gt;</span><br><span class=\"line\">public abstract class Controller : ControllerBase, IActionFilter, IAsyncActionFilter, IDisposable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private ITempDataDictionary? _tempData;</span><br><span class=\"line\">    private DynamicViewData? _viewBag;</span><br><span class=\"line\">    private ViewDataDictionary? _viewData;</span><br><span class=\"line\">    // 略</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這發現了Controller.cs只是比ControllerBase.cs多了許多View上類別。所以當需要開發WebAPI，繼承了ControllerBase，會多了不必要處理View的方法。所以開發WebAPI的時候，應繼承 ControllerBase.cs，當開發MVC的時候則繼承 Controller.cs</p>\n","text":".Net Core Web API – API Controller 的繼承API Controller 繼承建立新的API Controller類別時，繼承到底要繼承Controller還是ControllerBase? 這兩個類別有什麼差異?<br>當翻開原始碼時候可以發現兩","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":3,"path":"api/categories/WebAPI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"},{"name":"WebAPI","slug":"WebAPI","count":2,"path":"api/tags/WebAPI.json"}]},{"title":"Microsoft.FeatureManagement Feature Toggle","slug":"Microsoft_FeatureManagement","date":"2023-01-01T04:20:48.000Z","updated":"2023-04-23T06:00:48.391Z","comments":true,"path":"api/articles/Microsoft_FeatureManagement.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"ASP-NET-Core-Feature-Flags\"><a href=\"#ASP-NET-Core-Feature-Flags\" class=\"headerlink\" title=\"ASP.NET Core Feature Flags\"></a>ASP.NET Core Feature Flags</h1><p>ASP.NET Core提供了一種動態打開或關閉功能的方法。  </p>\n<ul>\n<li>Github: <a href=\"https://github.com/microsoft/FeatureManagement-Dotnet\">https://github.com/microsoft/FeatureManagement-Dotnet</a>  </li>\n<li>Introducing Microsoft.FeatureManagement:<a href=\"https://andrewlock.net/introducing-the-microsoft-featuremanagement-library-adding-feature-flags-to-an-asp-net-core-app-part-1/\">https://andrewlock.net/introducing-the-microsoft-featuremanagement-library-adding-feature-flags-to-an-asp-net-core-app-part-1/</a></li>\n<li>軟體主廚的程式料理廚房:<a href=\"https://dotblogs.com.tw/supershowwei/2020/11/23/180548\">https://dotblogs.com.tw/supershowwei/2020/11/23/180548</a></li>\n</ul>\n<h2 id=\"Nuget-Package\"><a href=\"#Nuget-Package\" class=\"headerlink\" title=\"Nuget Package\"></a>Nuget Package</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Microsoft.FeatureManagement</span><br><span class=\"line\">Microsoft.FeatureManagement.AspNetCore</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"Registration\"><a href=\"#Registration\" class=\"headerlink\" title=\"Registration\"></a>Registration</h2><h3 id=\"IServiceCollection-服務註冊\"><a href=\"#IServiceCollection-服務註冊\" class=\"headerlink\" title=\"IServiceCollection 服務註冊\"></a>IServiceCollection 服務註冊</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddFeatureManagement();</span><br><span class=\"line\">          </span><br><span class=\"line\">    services.AddControllersWithViews();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"appsetting-json設定\"><a href=\"#appsetting-json設定\" class=\"headerlink\" title=\"appsetting.json設定\"></a>appsetting.json設定</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    <span class=\"attr\">&quot;FeatureManagement&quot;</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;FeatureToggle&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;ActionFilter&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;MiddlewareFilter&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Consumption\"><a href=\"#Consumption\" class=\"headerlink\" title=\"Consumption\"></a>Consumption</h2><h3 id=\"Use-FeatureManager\"><a href=\"#Use-FeatureManager\" class=\"headerlink\" title=\"Use FeatureManager\"></a>Use FeatureManager</h3><ul>\n<li>建構子注入<code>IFeatureManager</code>介面，調用<code>IsEnabledAsync</code>方法，確認功能是否啟用。<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeController</span> : <span class=\"title\">Controller</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IFeatureManager _featureManager;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeController</span>(<span class=\"params\">IFeatureManager featureManager</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._featureManager = featureManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">FeatureToggle</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">bool</span> isEnabled = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>._featureManager.IsEnabledAsync(<span class=\"string\">&quot;FeatureToggle&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Content(isEnabled);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Use-FeatureGateAttribute\"><a href=\"#Use-FeatureGateAttribute\" class=\"headerlink\" title=\"Use FeatureGateAttribute\"></a>Use FeatureGateAttribute</h3><ul>\n<li>針對Controller及Action可以使用<code>FeatureGateAttribute</code>，達到控制是否啟用該功能</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">FeatureGate(<span class=\"string\">&quot;ActionFilter&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">ActionFilter</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Content(<span class=\"string\">&quot;Home.ActionFilter&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Use-MiddlewareForFeature\"><a href=\"#Use-MiddlewareForFeature\" class=\"headerlink\" title=\"Use MiddlewareForFeature\"></a>Use MiddlewareForFeature</h3><ul>\n<li>針對middleware想要做到是否啟用，可以使用<code>IApplicationBuilder</code>擴充方法<code>UseForFeature</code>或是<code>UseMiddlewareForFeature</code></li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">    app.UseForFeature(<span class=\"string\">&quot;MiddlewareFilter&quot;</span>, appBuilder =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        appBuilder.UseHealthChecks(<span class=\"string\">&quot;/health&quot;</span>);</span><br><span class=\"line\">    &#125;);       </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"進階應用\"><a href=\"#進階應用\" class=\"headerlink\" title=\"進階應用\"></a>進階應用</h2><h3 id=\"FeatureFilter\"><a href=\"#FeatureFilter\" class=\"headerlink\" title=\"FeatureFilter\"></a>FeatureFilter</h3><p> 依照條件啟動功能標記，<code>Microsoft.FeatureManagement</code>提供內建三種<code>IFeatureFilter</code>實作。</p>\n<h4 id=\"1-PercentageFilter-百分比功能標記\"><a href=\"#1-PercentageFilter-百分比功能標記\" class=\"headerlink\" title=\"1.PercentageFilter 百分比功能標記\"></a>1.PercentageFilter 百分比功能標記</h4><p> 依照百分比的機率啟動功能標記</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;FeatureManagement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;FeatureA&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;EnabledFor&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Percentage&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Parameters&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">50</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Startup.cs 服務註冊</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      services.AddFeatureManagement()</span><br><span class=\"line\">              .AddFeatureFilter&lt;PercentageFilter&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TimeWindowFilter-時間功能標記\"><a href=\"#TimeWindowFilter-時間功能標記\" class=\"headerlink\" title=\"TimeWindowFilter 時間功能標記\"></a>TimeWindowFilter 時間功能標記</h4><p> 在指定時間內啟動功能標記</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;FeatureManagement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;FeatureB&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;EnabledFor&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;TimeWindow&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Parameters&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Start&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Wed, 01 May 2023 13:59:59 GMT&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;End&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Mon, 01 July 2023 00:00:00 GMT&quot;</span></span><br><span class=\"line\">          <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>Startup.cs 服務註冊</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      services.AddFeatureManagement()</span><br><span class=\"line\">              .AddFeatureFilter&lt;TimeWindowFilter&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TargetingFilter-定位受眾功能標記\"><a href=\"#TargetingFilter-定位受眾功能標記\" class=\"headerlink\" title=\"TargetingFilter 定位受眾功能標記\"></a>TargetingFilter 定位受眾功能標記</h4><p> 在指定目標對象啟動功能標記，在Github有更詳細的說明。<a href=\"https://github.com/microsoft/FeatureManagement-Dotnet/blob/main/README.md#Targeting\">https://github.com/microsoft/FeatureManagement-Dotnet/blob/main/README.md#Targeting</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;FeatureManagement&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;FeatureB&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;EnabledFor&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Microsoft.Targeting&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;Parameters&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Audience&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Users&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;Jeff&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;Alicia&quot;</span></span><br><span class=\"line\">                    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;Groups&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">                        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                            <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Ring0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                            <span class=\"attr\">&quot;RolloutPercentage&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">100</span></span><br><span class=\"line\">                        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                        <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                            <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Ring1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                            <span class=\"attr\">&quot;RolloutPercentage&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">50</span></span><br><span class=\"line\">                        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">                    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;DefaultRolloutPercentage&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">20</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>還要額外去實作<code>ITargetingContextAccessor.cs</code>Interface</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> Provides an implementation of <span class=\"doctag\">&lt;see cref=&quot;ITargetingContextAccessor&quot;/&gt;</span> that creates a targeting context using info from the current HTTP request.</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpContextTargetingContextAccessor</span> : <span class=\"title\">ITargetingContextAccessor</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">const</span> <span class=\"built_in\">string</span> TargetingContextLookup = <span class=\"string\">&quot;HttpContextTargetingContextAccessor.TargetingContext&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HttpContextTargetingContextAccessor</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _httpContextAccessor = httpContextAccessor ?? <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentNullException(<span class=\"keyword\">nameof</span>(httpContextAccessor));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ValueTask&lt;TargetingContext&gt; <span class=\"title\">GetContextAsync</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        HttpContext httpContext = _httpContextAccessor.HttpContext;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Try cache lookup</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (httpContext.Items.TryGetValue(TargetingContextLookup, <span class=\"keyword\">out</span> <span class=\"built_in\">object</span> <span class=\"keyword\">value</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValueTask&lt;TargetingContext&gt;((TargetingContext)<span class=\"keyword\">value</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ClaimsPrincipal user = httpContext.User;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;<span class=\"built_in\">string</span>&gt; groups = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// This application expects groups to be specified in the user&#x27;s claims</span></span><br><span class=\"line\">        <span class=\"keyword\">foreach</span> (Claim claim <span class=\"keyword\">in</span> user.Claims)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (claim.Type == ClaimTypes.GroupName)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                groups.Add(claim.Value);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Build targeting context based off user info</span></span><br><span class=\"line\">        TargetingContext targetingContext = <span class=\"keyword\">new</span> TargetingContext</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            UserId = user.Identity.Name,</span><br><span class=\"line\">            Groups = groups</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// Cache for subsequent lookup</span></span><br><span class=\"line\">        httpContext.Items[TargetingContextLookup] = targetingContext;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ValueTask&lt;TargetingContext&gt;(targetingContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Startup.cs 服務註冊</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddSingleton&lt;ITargetingContextAccessor, HttpContextTargetingContextAccessor&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    services.AddFeatureManagement();</span><br><span class=\"line\">            .AddFeatureFilter&lt;TargetingFilter&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"自訂FeatureFilter\"><a href=\"#自訂FeatureFilter\" class=\"headerlink\" title=\"自訂FeatureFilter\"></a>自訂FeatureFilter</h4><p> 針對複雜情形可以自己去實作<code>IFeatureFilter</code>，達到符合特定條件啟用功能。</p>\n<p>  appsetting.json設定</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span> </span><br><span class=\"line\">    <span class=\"attr\">&quot;FeatureManagement&quot;</span><span class=\"punctuation\">:</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;RequestFilter&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;EnabledFor&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;RestrictRequest&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;Parameters&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;WhiteListIps&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>   </span><br><span class=\"line\">                        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                    <span class=\"attr\">&quot;RestrictPaths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span>                  </span><br><span class=\"line\">                    <span class=\"punctuation\">]</span></span><br><span class=\"line\">                <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>需要建立類別實作<code>IFeatureFilter</code>介面</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">FilterAlias(<span class=\"string\">&quot;RestrictRequest&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">RequestFilter</span> : <span class=\"title\">IFeatureFilter</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> IHttpContextAccessor _httpContextAccessor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RequestFilter</span>(<span class=\"params\">IHttpContextAccessor httpContextAccessor</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _httpContextAccessor = httpContextAccessor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Task&lt;<span class=\"built_in\">bool</span>&gt; <span class=\"title\">EvaluateAsync</span>(<span class=\"params\">FeatureFilterEvaluationContext context</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> httpContext = <span class=\"keyword\">this</span>._httpContextAccessor.HttpContext;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> requestFilterOption = context.Parameters.Get&lt;RequestFilterSetting&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">var</span> request = httpContext.Request;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> isPathInRestricts = requestFilterOption.RestrictPaths.Any</span><br><span class=\"line\">        (</span><br><span class=\"line\">            restrictPath =&gt; request.Path.StartsWithSegments</span><br><span class=\"line\">            (</span><br><span class=\"line\">                <span class=\"string\">$&quot;/<span class=\"subst\">&#123;restrictPath&#125;</span>&quot;</span>,</span><br><span class=\"line\">                StringComparison.OrdinalIgnoreCase</span><br><span class=\"line\">            )</span><br><span class=\"line\">        );</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isPathInRestricts.Equals(<span class=\"literal\">true</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> clientIp = <span class=\"comment\">// your ip;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> ipAddress = httpContext.Connection.RemoteIpAddress.MapToIPv4().ToString();</span><br><span class=\"line\"></span><br><span class=\"line\">            ipAddress = <span class=\"built_in\">string</span>.IsNullOrWhiteSpace(clientIp)</span><br><span class=\"line\">                ? ipAddress</span><br><span class=\"line\">                : clientIp;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> isIpInWhiteList = requestFilterOption.WhiteListIps.Any</span><br><span class=\"line\">            (</span><br><span class=\"line\">                whiteListIp =&gt; ipAddress.StartsWith(whiteListIp)</span><br><span class=\"line\">            );</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> Task.FromResult(isIpInWhiteList);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Task.FromResult(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> Startup.cs 服務註冊</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    services.AddHttpContextAccessor();</span><br><span class=\"line\">    </span><br><span class=\"line\">    services.AddFeatureManagement()                 </span><br><span class=\"line\">            .AddFeatureFilter&lt;RequestFilter&gt;();</span><br><span class=\"line\">             </span><br><span class=\"line\">    services.AddControllersWithViews();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用上可用<code>IFeatureManager</code>或是<code>FeatureGateAttribute</code></p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">FeatureGate(<span class=\"string\">&quot;RequestFilter&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IActionResult <span class=\"title\">RequestFilter</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Content(<span class=\"string\">&quot;Home.RequestFilter&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"ASP.NET Core Feature FlagsASP.NET Core提供了一種動態打開或關閉功能的方法。  Github: https://github.com/microsoft/FeatureManagement-Dotnet  Introducing Microso","link":"","raw":null,"photos":[],"categories":[{"name":"FeatureToggle","slug":"FeatureToggle","count":1,"path":"api/categories/FeatureToggle.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"},{"name":"FeatureToggle","slug":"FeatureToggle","count":1,"path":"api/tags/FeatureToggle.json"}]},{"title":"CoreProfile 實現跨應用程式性能調整及監控","slug":"coreprofile實現跨服務追蹤","date":"2022-12-16T14:53:48.000Z","updated":"2023-04-23T06:00:17.398Z","comments":true,"path":"api/articles/coreprofile實現跨服務追蹤.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"適用情境\"><a href=\"#適用情境\" class=\"headerlink\" title=\"適用情境:\"></a>適用情境:</h2><ul>\n<li>當橫跨API服務應用程式之間請求與回應效能低下，需要API服務性能調教及追蹤效能。</li>\n</ul>\n<h2 id=\"NuGet套件\"><a href=\"#NuGet套件\" class=\"headerlink\" title=\"NuGet套件:\"></a>NuGet套件:</h2><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Install-Package</span> CoreProfiler</span><br><span class=\"line\"><span class=\"built_in\">Install-Package</span> CoreProfiler.Web</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"環境要求\"><a href=\"#環境要求\" class=\"headerlink\" title=\"環境要求:\"></a>環境要求:</h2><ul>\n<li><p>WebService應用程式須安裝CoreProfile或NanoProfile，且DrillDown功能須設定為開啟，允許從外部應用程序向下鑽取子請求。</p>\n</li>\n<li><p>Net.Core專案 Startup.cs 必須加上 app.UseCoreProfiler(true)。 (參數為true表示開啟跨應用程式，從外部應用程序向下取子請求drillDown功能)</p>\n</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    app.UseCoreProfiler(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        app.UseDeveloperExceptionPage();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseHttpsRedirection();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseRouting();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseAuthorization();</span><br><span class=\"line\"></span><br><span class=\"line\">    app.UseEndpoints(endpoints =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        endpoints.MapControllers();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"實作內容\"><a href=\"#實作內容\" class=\"headerlink\" title=\"實作內容:\"></a>實作內容:</h2><hr>\n<h3 id=\"方法一-ProfilingSession-Current-WebTimingAsync\"><a href=\"#方法一-ProfilingSession-Current-WebTimingAsync\" class=\"headerlink\" title=\"方法一 :  ProfilingSession.Current.WebTimingAsync\"></a>方法一 :  ProfilingSession.Current.WebTimingAsync</h3><figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// WebTimingAsync() profiles the wrapped action as a web request timing</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"keyword\">this</span>.Request.Scheme + <span class=\"string\">&quot;://&quot;</span> + <span class=\"keyword\">this</span>.Request.Host + <span class=\"string\">&quot;/home/child&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">await</span> ProfilingSession.Current.WebTimingAsync(url, <span class=\"keyword\">async</span> (correlationId) =&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> httpClient = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        httpClient.DefaultRequestHeaders.Add(CoreProfilerMiddleware.XCorrelationId, correlationId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> uri = <span class=\"keyword\">new</span> Uri(url);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"keyword\">await</span> httpClient.GetStringAsync(uri);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p>HttpClient發送前，必需要在HttpHeader加上CorrelationId，才能取得外部應用程式CoreProfiler或NanoProfiler的監控紀錄。</p>\n</li>\n<li><p>HttpClient都需要加上以上的程式碼，會過於繁重，個人比較推薦使用第二種方法，亦可使用設定的方式進行移除或裝載功能。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"方法二-HttpClientFactory-實作-DelegatingHandler\"><a href=\"#方法二-HttpClientFactory-實作-DelegatingHandler\" class=\"headerlink\" title=\"方法二 : HttpClientFactory 實作 DelegatingHandler\"></a>方法二 : HttpClientFactory 實作 DelegatingHandler</h3><p>CoreProfilerDelegatingHandler.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CoreProfilerDelegatingHandler</span> : <span class=\"title\">DelegatingHandler</span></span><br><span class=\"line\">&#123;   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">override</span> <span class=\"keyword\">async</span> Task&lt;HttpResponseMessage&gt; <span class=\"title\">SendAsync</span>(<span class=\"params\">HttpRequestMessage request, CancellationToken cancellationToken</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ProfilingSession.Current == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.SendAsync(request, cancellationToken);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">string</span> url = request.RequestUri.AbsoluteUri;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> webTiming = <span class=\"keyword\">new</span> WebTiming</span><br><span class=\"line\">        (</span><br><span class=\"line\">            profiler: ProfilingSession.Current.Profiler, </span><br><span class=\"line\">            url: url</span><br><span class=\"line\">        );</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            request.Headers.Add</span><br><span class=\"line\">            (</span><br><span class=\"line\">                CoreProfilerMiddleware.XCorrelationId,</span><br><span class=\"line\">                webTiming.CorrelationId</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">base</span>.SendAsync(request, cancellationToken);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            webTiming.Stop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>   ~&#x2F;Startup.cs</p>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Startup</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Startup</span>(<span class=\"params\">IConfiguration configuration</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          Configuration = configuration;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> IConfiguration Configuration &#123; <span class=\"keyword\">get</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// This method gets called by the runtime. Use this method to add services to the container.</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ConfigureServices</span>(<span class=\"params\">IServiceCollection services</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"comment\">//HttpClient 註冊可以用給予名稱進行設定</span></span><br><span class=\"line\">         services.AddTransient&lt;CoreProfilerDelegatingHandler&gt;()</span><br><span class=\"line\">                  .AddHttpClient(<span class=\"string\">&quot;Tracing&quot;</span>)</span><br><span class=\"line\">                  .AddHttpMessageHandler&lt;CoreProfilerDelegatingHandler&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">          services.AddControllers();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Configure</span>(<span class=\"params\">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 記得一定是ture</span></span><br><span class=\"line\">          app.UseCoreProfiler(<span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (env.IsDevelopment())</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              app.UseDeveloperExceptionPage();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">         </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用HttpClientFactory已註冊過使用的name，已經註冊的HttpClient已加入CoreProfilerDelegatingHandler。</li>\n</ul>\n<figure class=\"highlight c#\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//必須要跟註冊的HttpClient的名稱一樣</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> httpClient = <span class=\"keyword\">this</span>._httpClientFactory.CreateClient(<span class=\"string\">&quot;Tracing&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> response = <span class=\"keyword\">await</span> httpClient.GetAsync(url).ConfigureAwait(<span class=\"literal\">false</span>);</span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料:\"></a>參考資料:</h2><p>HttpClientFactory:</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/zh-tw/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1\">https://docs.microsoft.com/zh-tw/aspnet/core/fundamentals/http-requests?view=aspnetcore-3.1</a></li>\n</ul>\n<p>CoreProfiler:</p>\n<ul>\n<li><a href=\"https://github.com/teddymacn/CoreProfiler\">https://github.com/teddymacn/CoreProfiler</a></li>\n<li><a href=\"https://github.com/teddymacn/cross-app-profiling-demo\">https://github.com/teddymacn/cross-app-profiling-demo</a></li>\n<li><a href=\"https://www.itread01.com/articles/1475204636.html\">https://www.itread01.com/articles/1475204636.html</a></li>\n</ul>\n","text":"適用情境:當橫跨API服務應用程式之間請求與回應效能低下，需要API服務性能調教及追蹤效能。NuGet套件:1<br>2<br>Install-Package CoreProfiler<br>Install-Package CoreProfiler.Web<br>環境要求:Web","link":"","raw":null,"photos":[],"categories":[{"name":"Monitor","slug":"Monitor","count":1,"path":"api/categories/Monitor.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":9,"path":"api/tags/Net-Core.json"},{"name":"2022","slug":"2022","count":2,"path":"api/tags/2022.json"},{"name":"Monitor","slug":"Monitor","count":1,"path":"api/tags/Monitor.json"}]},{"title":"我的第一篇文章","slug":"我的第一篇文章","date":"2022-12-10T07:53:48.000Z","updated":"2022-12-16T15:12:31.627Z","comments":true,"path":"api/articles/我的第一篇文章.json","excerpt":"","keywords":null,"cover":null,"content":"<p>原本沒有寫部落格習慣，因為在軟體工程業工作久了遇到許多問題。<br>希望把遇到的問題或是技術心得寫下來。</p>\n<p>現在在工作上寫文件，習慣使用Markdown<br>於是開始想Markdown來寫文章。<br>依稀記得公司的同事也有用Markdown寫部落格習慣。他推薦用Hexo與Github方式簡單自架出漂亮的部落格。</p>\n<p>在2022年也開始練習對於自己所學的開始學習如何輸出給別人，也希望能慢慢養成寫部落格紀錄的習慣。</p>\n","text":"原本沒有寫部落格習慣，因為在軟體工程業工作久了遇到許多問題。<br>希望把遇到的問題或是技術心得寫下來。現在在工作上寫文件，習慣使用Markdown<br>於是開始想Markdown來寫文章。<br>依稀記得公司的同事也有用Markdown寫部落格習慣。他推薦用Hexo與Gith","link":"","raw":null,"photos":[],"categories":[{"name":"個人心得","slug":"個人心得","count":1,"path":"api/categories/個人心得.json"}],"tags":[{"name":"2022","slug":"2022","count":2,"path":"api/tags/2022.json"},{"name":"個人心情","slug":"個人心情","count":1,"path":"api/tags/個人心情.json"}]}]}