{"total":20,"pageSize":10,"pageCount":2,"data":[{"title":"MockServer 整合測試","slug":"MockServer_1","date":"2024-01-14T13:19:48.000Z","updated":"2024-05-18T01:11:07.547Z","comments":true,"path":"api/articles/MockServer_1.json","excerpt":"","keywords":null,"cover":"/../static/images/MockServerUI.png","content":"<h1 id=\"Mock-Server\"><a href=\"#Mock-Server\" class=\"headerlink\" title=\"Mock Server\"></a>Mock Server</h1><p>由於要針對API 服務進行壓力測試，並假設其他服務有回應延遲，需要使用一套簡單使用的MockServer，原本想使用Postman，但礙於環境限制，於是找一套可以運行在Docker上的MockServer。</p>\n<h2 id=\"Docker-Install\"><a href=\"#Docker-Install\" class=\"headerlink\" title=\"Docker Install\"></a>Docker Install</h2><p>首先執行 Docker 指令下載 Docker Image，並執行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mockserver -p 1080:1080 mockserver/mockserver</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"MockServer-UI\"><a href=\"#MockServer-UI\" class=\"headerlink\" title=\"MockServer UI\"></a>MockServer UI</h2><p>GET <code>http://localhost:1080/mockserver/dashboard</code>，在瀏覽器輸入這個網址便能看到 MockServer 的畫面。</p>\n<p>從這邊可以看到以下的畫面。<br><img src=\"/../static/images/MockServerUI.png\" alt=\"Dashboard\"></p>\n<h2 id=\"Create-or-Update-Expectation\"><a href=\"#Create-or-Update-Expectation\" class=\"headerlink\" title=\"Create or Update Expectation\"></a>Create or Update Expectation</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mockServerHost = <span class=\"string\">&quot;http://localhost:1080&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mockServerUrl = <span class=\"string\">$&quot;<span class=\"subst\">&#123;mockServerHost&#125;</span>/mockserver/expectation&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">var</span> expectation = <span class=\"keyword\">new</span> MockServerExpectation</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tId = <span class=\"string\">&quot;e5805f53-340b-4c9e-9399-aa0ac75266ee&quot;</span>,</span><br><span class=\"line\">\t\t\tPriority=<span class=\"number\">0</span>,</span><br><span class=\"line\">            HttpRequest = <span class=\"keyword\">new</span> HttpRequest</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Method = <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">                Path = <span class=\"string\">&quot;/get/yourpath&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 模擬回應</span></span><br><span class=\"line\">            HttpResponse = <span class=\"keyword\">new</span> HttpResponse</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                StatusCode = <span class=\"number\">200</span>,</span><br><span class=\"line\">                Body = JsonConvert.SerializeObject</span><br><span class=\"line\">\t\t\t\t(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> </span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Success = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                <span class=\"comment\">// 模擬延遲10秒回應</span></span><br><span class=\"line\">\t\t\t\tDelay = <span class=\"keyword\">new</span> Delay</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tTimeUnit = <span class=\"string\">&quot;SECONDS&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\tValue = <span class=\"number\">10</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> jsonSetting = <span class=\"keyword\">new</span> JsonSerializerSettings </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tNullValueHandling = NullValueHandling.Ignore</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> json = JsonConvert.SerializeObject(expectation, jsonSetting);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> content = <span class=\"keyword\">new</span> StringContent(json, Encoding.UTF8, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> response = client.PutAsync(mockServerUrl, content).GetAwaiter().GetResult();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tConsole.WriteLine(<span class=\"string\">$&quot;Response Status Code: <span class=\"subst\">&#123;response.StatusCode&#125;</span>&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MockServerExpectation</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;id&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Id &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;priority&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Priority &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125; = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;httpRequest&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> HttpRequest HttpRequest &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;httpResponse&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> HttpResponse HttpResponse &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpRequest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;method&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Method &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;path&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Path &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpResponse</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;statusCode&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">int</span> StatusCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;body&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">object</span> Body &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;delay&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Delay Delay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Delay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;timeUnit&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> TimeUnit &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;value&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Value &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Request 以下的 Content 給 MockServer，非常簡單使用。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;e5805f53-340b-4c9e-9399-aa0ac75266ee&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;priority&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;httpRequest&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GET&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/get/yourpath&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;httpResponse&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;statusCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">200</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&#123;\\&quot;Success\\&quot;:true&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;delay&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;timeUnit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;SECONDS&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>使用上面的API 進行 建立修改 Expectation，之後將要Web服務指向這個Url即可進行使用。可以進行一些API異常測試等等。</p>\n<h2 id=\"使用情境\"><a href=\"#使用情境\" class=\"headerlink\" title=\"使用情境\"></a>使用情境</h2><ul>\n<li><strong>API 模擬</strong></li>\n</ul>\n<p>有時間我們需要測試串接第三方API，尤其對方還尚未提供測試環境。</p>\n<ul>\n<li><strong>錯誤處理模擬</strong></li>\n</ul>\n<p>測試應用程序如何處理各種錯誤 Response，如 4xx 和 5xx 狀態碼。</p>\n<ul>\n<li><strong>延時和性能測試</strong></li>\n</ul>\n<p>模擬回應延遲和服務器處理時間，這對於測試應用程序在不同條件下的性能非常有用。</p>\n<hr>\n<p>MockServer 非常適合於在開發階段進行測試，尤其當你需要與外部系統整合但該系統尚未準備。也可以用於自動化測試，提供一個可控且可預測的外部系統環境。</p>\n<p>原本的應用程式因為要測試情境，採用appsettings.json去控制測試情境。千萬不要把這種程式碼寫在Production Code Commit。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://www.tpisoftware.com/tpu/articleDetails/1895\">MockServer入門：輕鬆整合前後端接口</a></li>\n<li><a href=\"https://www.mock-server.com/\">MockServer 官方文件</a></li>\n</ul>\n","text":"Mock Server由於要針對API 服務進行壓力測試，並假設其他服務有回應延遲，需要使用一套簡單使用的MockServer，原本想使用Postman，但礙於環境限制，於是找一套可以運行在Docker上的MockServer。Docker Install首先執行 Docker ","link":"","raw":null,"photos":[],"categories":[{"name":"MockServer","slug":"MockServer","count":1,"path":"api/categories/MockServer.json"}],"tags":[{"name":"2024","slug":"2024","count":11,"path":"api/tags/2024.json"}]},{"title":"關於 HttpClient 使用方式","slug":"HttpClient","date":"2023-11-27T13:32:48.000Z","updated":"2024-05-18T01:10:26.790Z","comments":true,"path":"api/articles/HttpClient.json","excerpt":"<h1 id=\"關於-HttpClient\"><a href=\"#關於-HttpClient\" class=\"headerlink\" title=\"關於 HttpClient\"></a>關於 HttpClient</h1><p>因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在<strong>CSharp</strong>中最常使用的類別庫就是<code>HttpClient.cs</code>，但是<code>HttpClient.cs</code>使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。</p>","keywords":null,"cover":null,"content":null,"text":"關於 HttpClient因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在CSharp中最常使用的類別庫就是HttpClient.cs，但是HttpClient.cs使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。官方不建議使用方式<br","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/categories/HTTP.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"}]},{"title":"Dependency Injection (二) Mircosoft.Extensions.DependencyInjection 介紹","slug":"DependencyInjection2","date":"2023-11-27T13:12:48.000Z","updated":"2024-05-18T01:06:01.403Z","comments":true,"path":"api/articles/DependencyInjection2.json","excerpt":"<h1 id=\"Microsoft-Extensions-DependencyInjection\"><a href=\"#Microsoft-Extensions-DependencyInjection\" class=\"headerlink\" title=\"Microsoft.Extensions.DependencyInjection\"></a>Microsoft.Extensions.DependencyInjection</h1><p>在<code>ASP.NET Core</code>中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。<code>ASP.NET Core</code> 的 Dependency Injection Container系統提供了一個建立基於依賴注入的應用程序的機制，並支持以下功能：</p>","keywords":null,"cover":null,"content":null,"text":"Microsoft.Extensions.DependencyInjection在ASP.NET Core中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。ASP.NET Core 的 Dependency Injec","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"}]},{"title":"Dependency Injection (一) 簡介","slug":"DependencyInjection1","date":"2023-11-27T13:02:48.000Z","updated":"2024-05-18T01:05:50.137Z","comments":true,"path":"api/articles/DependencyInjection1.json","excerpt":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><ul>\n<li>Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責建立。</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"簡介Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"}]},{"title":"Event Storming 工作坊介紹","slug":"EventStormingIntro","date":"2023-06-04T03:09:48.000Z","updated":"2024-05-18T01:07:40.106Z","comments":true,"path":"api/articles/EventStormingIntro.json","excerpt":"<h1 id=\"Event-Storming\"><a href=\"#Event-Storming\" class=\"headerlink\" title=\"Event Storming\"></a>Event Storming</h1><p>隨著軟體服務越來越複雜，很多時候團隊的領域知識(<em>Domain-Know How</em>)是很難共享的。尤其在團隊之中會遇到特定的邏輯只有少部人知道關鍵邏輯。其他人在合作上會遇到認知上的落差，導致團隊合作上溝通麻煩及代溝。</p>","keywords":null,"cover":null,"content":null,"text":"Event Storming隨著軟體服務越來越複雜，很多時候團隊的領域知識(Domain-Know How)是很難共享的。尤其在團隊之中會遇到特定的邏輯只有少部人知道關鍵邏輯。其他人在合作上會遇到認知上的落差，導致團隊合作上溝通麻煩及代溝。例如:之前在工作上對於訂單產品相關知識，","link":"","raw":null,"photos":[],"categories":[{"name":"Domain Driven Design","slug":"Domain-Driven-Design","count":2,"path":"api/categories/Domain-Driven-Design.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":"DDD","slug":"DDD","count":2,"path":"api/tags/DDD.json"},{"name":"Event Storming","slug":"Event-Storming","count":1,"path":"api/tags/Event-Storming.json"}]},{"title":"設計抽象介面","slug":"InterfaceDesign","date":"2023-04-16T13:22:48.000Z","updated":"2024-05-18T01:07:33.586Z","comments":true,"path":"api/articles/InterfaceDesign.json","excerpt":"<h1 id=\"抽象介面設計-抽象洩漏\"><a href=\"#抽象介面設計-抽象洩漏\" class=\"headerlink\" title=\"抽象介面設計 - 抽象洩漏\"></a>抽象介面設計 - 抽象洩漏</h1><p>在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。</p>","keywords":null,"cover":null,"content":null,"text":"抽象介面設計 - 抽象洩漏在軟體開發上使用抽象介面是很常用的手段，但是介面設計往往沒有很好的檢視。導致後續使用介面遇到許多問題，甚至質疑使用介面。往往不是介面的錯，是設計介面品質出錯。導致抽象並沒有很好的發揮該有的隱蔽細節、簡化問題的功能。什麼是抽象洩漏?「抽象泄漏」是軟體開發時","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":"Interface","slug":"Interface","count":1,"path":"api/tags/Interface.json"}]},{"title":"Asp.Net Core API Controller繼承","slug":"AspNetCore_WebAPI","date":"2023-04-16T12:40:48.000Z","updated":"2024-05-18T01:08:54.973Z","comments":true,"path":"api/articles/AspNetCore_WebAPI.json","excerpt":"<h1 id=\"Net-Core-Web-API-–-API-Controller-的繼承\"><a href=\"#Net-Core-Web-API-–-API-Controller-的繼承\" class=\"headerlink\" title=\".Net Core Web API – API Controller 的繼承\"></a>.Net Core Web API – API Controller 的繼承</h1><p>建立新的API時候，Controller到底要繼承Controller還是ControllerBase ?</p>","keywords":null,"cover":null,"content":null,"text":".Net Core Web API – API Controller 的繼承建立新的API時候，Controller到底要繼承Controller還是ControllerBase ?API Controller 繼承建立新的API Controller類別時，繼承到底要繼承Con","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"WebAPI","slug":"WebAPI","count":2,"path":"api/tags/WebAPI.json"}]},{"title":"Microsoft.FeatureManagement Feature Toggle","slug":"Microsoft_FeatureManagement","date":"2023-01-01T04:20:48.000Z","updated":"2024-05-18T01:07:25.292Z","comments":true,"path":"api/articles/Microsoft_FeatureManagement.json","excerpt":"<h1 id=\"ASP-NET-Core-Feature-Flags\"><a href=\"#ASP-NET-Core-Feature-Flags\" class=\"headerlink\" title=\"ASP.NET Core Feature Flags\"></a>ASP.NET Core Feature Flags</h1><p>ASP.NET Core提供了一種動態打開或關閉功能的解決方案。  </p>","keywords":null,"cover":null,"content":null,"text":"ASP.NET Core Feature FlagsASP.NET Core提供了一種動態打開或關閉功能的解決方案。  Github: https://github.com/microsoft/FeatureManagement-Dotnet  Introducing Micro","link":"","raw":null,"photos":[],"categories":[{"name":"FeatureToggle","slug":"FeatureToggle","count":1,"path":"api/categories/FeatureToggle.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"FeatureToggle","slug":"FeatureToggle","count":1,"path":"api/tags/FeatureToggle.json"}]},{"title":"CoreProfile 實現跨應用程式性能調整及監控","slug":"coreprofile實現跨服務追蹤","date":"2022-12-16T14:53:48.000Z","updated":"2024-05-18T01:08:09.273Z","comments":true,"path":"api/articles/coreprofile實現跨服務追蹤.json","excerpt":"<h1 id=\"CoreProfile-實現跨應用程式性能調整及監控\"><a href=\"#CoreProfile-實現跨應用程式性能調整及監控\" class=\"headerlink\" title=\"CoreProfile 實現跨應用程式性能調整及監控\"></a>CoreProfile 實現跨應用程式性能調整及監控</h1><ul>\n<li>當橫跨API服務應用程式之間請求與回應效能低下，需要API服務性能調教及追蹤效能。</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"CoreProfile 實現跨應用程式性能調整及監控當橫跨API服務應用程式之間請求與回應效能低下，需要API服務性能調教及追蹤效能。NuGet套件:1<br>2<br>Install-Package CoreProfiler<br>Install-Package CorePro","link":"","raw":null,"photos":[],"categories":[{"name":"Monitor","slug":"Monitor","count":1,"path":"api/categories/Monitor.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"2022","slug":"2022","count":2,"path":"api/tags/2022.json"},{"name":"Monitor","slug":"Monitor","count":1,"path":"api/tags/Monitor.json"}]},{"title":"我的第一篇文章","slug":"我的第一篇文章","date":"2022-12-10T07:53:48.000Z","updated":"2022-12-16T15:12:31.627Z","comments":true,"path":"api/articles/我的第一篇文章.json","excerpt":"","keywords":null,"cover":null,"content":"<p>原本沒有寫部落格習慣，因為在軟體工程業工作久了遇到許多問題。<br>希望把遇到的問題或是技術心得寫下來。</p>\n<p>現在在工作上寫文件，習慣使用Markdown<br>於是開始想Markdown來寫文章。<br>依稀記得公司的同事也有用Markdown寫部落格習慣。他推薦用Hexo與Github方式簡單自架出漂亮的部落格。</p>\n<p>在2022年也開始練習對於自己所學的開始學習如何輸出給別人，也希望能慢慢養成寫部落格紀錄的習慣。</p>\n","text":"原本沒有寫部落格習慣，因為在軟體工程業工作久了遇到許多問題。<br>希望把遇到的問題或是技術心得寫下來。現在在工作上寫文件，習慣使用Markdown<br>於是開始想Markdown來寫文章。<br>依稀記得公司的同事也有用Markdown寫部落格習慣。他推薦用Hexo與Gith","link":"","raw":null,"photos":[],"categories":[{"name":"個人心得","slug":"個人心得","count":1,"path":"api/categories/個人心得.json"}],"tags":[{"name":"2022","slug":"2022","count":2,"path":"api/tags/2022.json"},{"name":"個人心情","slug":"個人心情","count":1,"path":"api/tags/個人心情.json"}]}]}