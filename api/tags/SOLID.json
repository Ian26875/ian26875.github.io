{"name":"SOLID","slug":"SOLID","count":5,"postlist":[{"title":"SOLID原則:依賴反轉原則(Dependency Inversion Principle)","slug":"DIP","date":"2024-03-19T09:41:48.000Z","updated":"2024-03-19T09:40:58.332Z","comments":true,"path":"api/articles/DIP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"依賴反轉原則\"><a href=\"#依賴反轉原則\" class=\"headerlink\" title=\"依賴反轉原則\"></a>依賴反轉原則</h1><p>類別之間的依賴盡量以<code>Interface</code>的方式進行溝通，應該減少類別的直接依賴。這樣可以減少修改幅度。<br>依賴反轉原則（Dependency inversion principle，DIP）是指一種特定的解耦（傳統的依賴關係建立在高層次上，而具體的策略設定則應用在低層次的模組上）形式，使得高層次的模組不依賴於低層次的模組的實現細節，依賴關係被顛倒（反轉），從而使得低層次模組依賴於高層次模組的需求抽象。</p>\n<p>該原則規定：</p>\n<ul>\n<li>高層次的模組不應該依賴於低層次的模組，兩者都應該依賴於抽象介面。</li>\n<li>抽象介面不應該依賴於具體實現。而具體實現則應該依賴於抽象介面。</li>\n</ul>\n<h2 id=\"穩定的介面\"><a href=\"#穩定的介面\" class=\"headerlink\" title=\"穩定的介面\"></a>穩定的介面</h2><p>介面的改變會影響到實作，反之，對於修改實作不一定會去修改介面。甚至都不要去修改介面，因此介面比實作穩定。</p>\n<p>舉例如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderRepository _orderRepository;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrderService</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _orderRepository = <span class=\"keyword\">new</span> OrderRepository();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">GetAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> orderId</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">         </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> order = <span class=\"keyword\">await</span> _orderRepository.GetAsync(orderId);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 略 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>對於這樣的程式碼 <code>OrderService.cs</code> 直接依賴 <code>OrderRepository.cs</code>，容易導致<code>OrderRepository.cs</code>的修改直接影響到<code>OrderService.cs</code>。尤其是當<code>OrderRepository.cs</code>的實作有調整時，會造成<code>OrderService.cs</code>的修改。在需求異動時，我們應該以最少的修改完成需求。</p>\n<p>我們應該可以把OrderRepository抽取介面，並依賴介面。</p>\n<p>建立 <code>IOrderRepository.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IOrderRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Task <span class=\"title\">GetAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> orderId</span>)</span>;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>讓 <code>OrderRepository.cs</code> 實作 <code>IOrderRepository.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderRepository</span> : <span class=\"title\">IOrderRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">GetAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> orderId</span>)</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         <span class=\"comment\">//略</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>OrderService.cs</code> 直接依賴 <code>IOrderRepository.cs</code> 而不直接依賴 <code>OrderRepository.cs</code></p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>在類別層次上，符合依賴反轉原則的設計需要透過抽象化來定義穩定的介面，讓高層類別依賴於介面，而不是依賴於具體的低層類別。這樣可以降低高層組件對低層組件的依賴程度，並且使得系統更容易進行修改和擴展。</p>\n<p>在架構層次上，依賴反轉原則要求將系統中的依賴關係建立在抽象的邊界上。這意味著不同的組件應該依賴於抽象的介面或類別，而不是具體的實現細節。透過定義穩定的介面和抽象層次，不同組件之間的依賴關係可以更加清晰和靈活，並且可以簡化組件之間的協作和整合。</p>\n<p>當所有的類別都依賴於穩定的介面時，依賴反轉原則提供了一個架構上的邊界，並且定義了新的依賴規則。這樣的依賴規則使得高層組件和低層組件之間的依賴關係變得清晰和可管理，提高了系統的彈性和可擴展性。</p>\n<p>因此，依賴反轉原則在類別層次和架構層次上都非常重要，它的目的都是解耦合系統的不同組件，建立抽象的介面和層次，提高系統的靈活性、可擴展性和可測試性。</p>\n","text":"依賴反轉原則類別之間的依賴盡量以Interface的方式進行溝通，應該減少類別的直接依賴。這樣可以減少修改幅度。<br>依賴反轉原則（Dependency inversion principle，DIP）是指一種特定的解耦（傳統的依賴關係建立在高層次上，而具體的策略設定則應用在低","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":10,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]},{"title":"SOLID原則:接口隔離原則(Interface Segregation Principle)","slug":"ISP","date":"2024-03-19T09:38:48.000Z","updated":"2024-03-19T09:39:09.141Z","comments":true,"path":"api/articles/ISP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"介面隔離原則\"><a href=\"#介面隔離原則\" class=\"headerlink\" title=\"介面隔離原則\"></a>介面隔離原則</h1><p>介面隔離原則是這樣被描述的:</p>\n<blockquote>\n<p>不應該強制客戶端依賴於它們不用的介面</p>\n</blockquote>\n<p>介面隔離原則主要解決介面過於擁擠的問題。建立介面保持簡潔、最低限度的功能。</p>\n<p>舉掃描介面來說:</p>\n<p><code>IScan.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IScan</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SendEmail</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>IScan</code>介面可以分離成兩個類別:</p>\n<p><code>IScan.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IScan</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>IEmailClient.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IEmailClient</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SendEmail</span>()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客戶端程式需要掃描功能只需要依賴<code>IScan.cs</code>裡面的<code>Scan</code>方法，不應該也依賴<code>SendEmail</code>方法。</p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>在類別層次上，符合介面隔離原則的設計需要將介面拆分成多個小型的、具體的介面，每個介面只提供一個特定的功能，並且避免將不相關的方法放在同一個介面中。這樣可以讓客戶端程式碼只依賴於需要的介面，而不受到不需要的介面的影響，從而提高程式的靈活性和可擴展性。</p>\n<p>在架構層次上，介面隔離原則需要通過模塊化的設計來實現。每個模塊只提供特定的功能，並且避免不必要的依賴關係。這樣可以減少系統中各個模塊之間的相互依賴，提高系統的靈活性和可擴展性。</p>\n<p>如果在專案上依賴了不需要的介面或是套件，就會導致不必要的編譯和部屬，甚至可能導致不必要的錯誤和麻煩。因此，在設計和開發專案時，需要遵循介面隔離原則，僅依賴所需的介面和套件，避免不必要的依賴關係，從而提高程式的可靠性和可維護性。</p>\n","text":"介面隔離原則介面隔離原則是這樣被描述的:不應該強制客戶端依賴於它們不用的介面介面隔離原則主要解決介面過於擁擠的問題。建立介面保持簡潔、最低限度的功能。舉掃描介面來說:IScan.cs1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br><br>publi","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":10,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]},{"title":"SOLID原則:里氏替換原則(Liskov Substitution Principle)","slug":"LSP","date":"2024-03-19T09:34:48.000Z","updated":"2024-03-19T09:36:21.520Z","comments":true,"path":"api/articles/LSP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"里氏替換原則\"><a href=\"#里氏替換原則\" class=\"headerlink\" title=\"里氏替換原則\"></a>里氏替換原則</h1><p>里式替換原則描述:</p>\n<blockquote>\n<p>子類別應該可以替換父類並且行為不會受到影響。</p>\n</blockquote>\n<p>在原本的里式替換原則之中，如果子類別無法替換父類別，就會出現程式上的錯誤。子類別必須完全替代父類別，並不會影響原有的程式邏輯。里氏替換原則適用於繼承和介面的應用，藉此實現程式碼的可擴展性和重用性。</p>\n<p>最常見的例子是長方形與正方形:</p>\n<p><code>Rectangle.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Width &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Height &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span>(<span class=\"params\"><span class=\"built_in\">int</span> width, <span class=\"built_in\">int</span> height</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Width = width;</span><br><span class=\"line\">        Height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">CalculateArea</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Width * Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>Square.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Square</span>: <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"built_in\">int</span> width, <span class=\"built_in\">int</span> height</span>) : <span class=\"title\">base</span>(<span class=\"params\">width, height</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width != height)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(width));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Height = height;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Width = width;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>原本客戶端程式碼如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在使用上，造成無法替換的問題</span></span><br><span class=\"line\">Rectangle rectangle = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rectangleArea = rectangle.Area();</span><br></pre></td></tr></table></figure>\n\n\n<p>如果抽換成<code>Square.cs</code>:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在使用上，造成無法替換的問題</span></span><br><span class=\"line\">Rectangle rectangle = <span class=\"keyword\">new</span> Square(<span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rectangleArea = rectangle.Area();</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>里氏替換原則（Liskov Substitution Principle, LSP）是指子類別應該能夠完全替代父類別而不會對程式造成錯誤。</p>\n<p>符合 LSP 的設計原則包括子類別必須完全實現父類別的所有方法，並且不能新增或刪除父類別的任何方法；子類別的方法的前置條件不能比父類別更嚴格，後置條件不能比父類別更寬鬆等。</p>\n<p>在架構層次上，LSP 的目的是減少系統中各個元件之間的相互依賴性，提高系統的靈活性和可擴展性。這需要通過抽象化和封裝等技術，將系統中的各個元件隔離開來，使得各個元件可以獨立地進行修改和擴展，而不會對其他元件造成影響。在實踐中，可以通過設計合適的接口和抽象類別，來實現 LSP。</p>\n","text":"里氏替換原則里式替換原則描述:子類別應該可以替換父類並且行為不會受到影響。在原本的里式替換原則之中，如果子類別無法替換父類別，就會出現程式上的錯誤。子類別必須完全替代父類別，並不會影響原有的程式邏輯。里氏替換原則適用於繼承和介面的應用，藉此實現程式碼的可擴展性和重用性。最常見的例","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":10,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]},{"title":"SOLID原則:開放封閉原則(Open Close Principle)","slug":"OCP","date":"2024-03-19T09:23:48.000Z","updated":"2024-03-19T09:35:01.884Z","comments":true,"path":"api/articles/OCP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"開放封閉原則\"><a href=\"#開放封閉原則\" class=\"headerlink\" title=\"開放封閉原則\"></a>開放封閉原則</h1><p>開放封閉原則在 <em>Clean Architecture</em> 一書中是這樣被敘述的</p>\n<blockquote>\n<p>一個軟體製品應該對於擴充是開放的，但對於修改是封閉的。</p>\n</blockquote>\n<p>一個簡單的擴充需求，對於軟體開發上是巨大的改變。這是軟體架構的失敗。一個好的軟體架構可以將修改的程式碼減少到最低程度。在理想情形下這個值是 <strong>0</strong>。</p>\n<p>擴展系統功能比較好的方式應該是新增程式碼，並不是去修改既有的程式碼來擴充系統功能。因為修改一個行之有年的系統內部邏輯，可能會發生改 A 壞 B ，如果有自動化測試來驗證既有的程式碼可以在第一時間找出來。<br>但是在實務上有自動化測試專案真的是少之又少(ps.可能祖上積德才會遇到吧…)，如果當初在設計系統的時候能避免的這種改 A 壞 B 的情形，那軟體系統將更容易修改需求及擴充功能。舉例來說，這是一個手機介面。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMobilePhone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TurnOn</span>()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TurnOff</span>()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Call</span>(<span class=\"params\"><span class=\"built_in\">string</span> phoneNumber</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>接下來，我們可以定義不同的手機，並實現<code>IMobilePhone.cs</code>介面：</p>\n<ul>\n<li><code>IPhone14.cs</code></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IPhone14</span> : <span class=\"title\">IMobilePhone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOn</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;IPhone14 is turning on.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOff</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;IPhone14 is turning off.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Call</span>(<span class=\"params\"><span class=\"built_in\">string</span> phoneNumber</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;IPhone14 is calling &quot;</span> + phoneNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>宣告 <code>IMobilePhoneFactory.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMobilePhoneFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IMobilePhone <span class=\"title\">Create</span>(<span class=\"params\"><span class=\"built_in\">string</span> mobilePhone</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>建立 <code>MobilePhoneFactory.cs</code> 實作 <code>IMobilePhoneFactory.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MobilePhoneFactory</span> : <span class=\"title\">IMobilePhoneFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IMobilePhone <span class=\"title\">Create</span>(<span class=\"params\"><span class=\"built_in\">string</span> mobilePhone</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span>(Program).Assembly</span><br><span class=\"line\">            .GetExportedTypes()</span><br><span class=\"line\">            .SingleOrDefault(t =&gt; t.Name.Equals(mobilePhone) &amp;&amp; <span class=\"keyword\">typeof</span>(IMobilePhone).IsAssignableFrom(t));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"keyword\">nameof</span>(mobilePhone));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (IMobilePhone)Activator.CreateInstance(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>GooglePixel7.cs</code></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GooglePixel7</span> : <span class=\"title\">IMobilePhone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOn</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;GooglePixel7 phone is turning on.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOff</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;GooglePixel7 phone is turning off.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Call</span>(<span class=\"params\"><span class=\"built_in\">string</span> phoneNumber</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;GooglePixel7 phone is calling &quot;</span> + phoneNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>現在，當我們使用不同型號手機，只需要使用<code>IMobilePhone.cs</code>介面，而不需要知道實際的手機型別。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mobilePhoneTypes = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;IPhone14&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> mobilePhoneType <span class=\"keyword\">in</span> mobilePhoneTypes)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mobilePhoneFactory = <span class=\"keyword\">new</span> MobilePhoneFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mobilePhone = mobilePhoneFactory.Create(mobilePhoneType);</span><br><span class=\"line\"></span><br><span class=\"line\">    mobilePhone.TurnOn();</span><br><span class=\"line\"></span><br><span class=\"line\">    mobilePhone.Call(<span class=\"string\">&quot;1234567890&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mobilePhone.TurnOff();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這樣做的好處在於，當我們需要添加新的手機型號時，只需要實現 <code>IMobilePhone.cs</code> 介面即可，不需要修改現有使用端程式碼，只需要建立設定檔將所有手機型號進行註冊動作即可。</p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>開放封閉原則的目標是實現系統的可擴展性和靈活性，使系統易於擴展而不會因為修改而對現有程式碼造成較大的影響。</p>\n<p>在類別層次上，建議設計類別時要對擴展開放，對修改封閉。</p>\n<p>在架構層次上，建議將系統組織成一系列相互獨立的元件，將這些元件安排到依賴階層中而實現。這樣可以避免高層級元件受到低層級元件變更的影響，同時使系統具有高度的模組化和可擴展性。</p>\n<p>總結，適用於類別層次和架構層次的設計原則，皆是實現系統的可擴展性和靈活性，同時保證系統的穩定性和可靠性。</p>\n","text":"開放封閉原則開放封閉原則在 Clean Architecture 一書中是這樣被敘述的一個軟體製品應該對於擴充是開放的，但對於修改是封閉的。一個簡單的擴充需求，對於軟體開發上是巨大的改變。這是軟體架構的失敗。一個好的軟體架構可以將修改的程式碼減少到最低程度。在理想情形下這個值是 ","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":10,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]},{"title":"SOLID原則:單一職責原則(Single Responsibility Principle)","slug":"SRP","date":"2024-03-19T09:20:48.000Z","updated":"2024-03-19T09:41:46.453Z","comments":true,"path":"api/articles/SRP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"單一職責原則-Single-Responsibility-Principle\"><a href=\"#單一職責原則-Single-Responsibility-Principle\" class=\"headerlink\" title=\"單一職責原則(Single Responsibility Principle)\"></a>單一職責原則(Single Responsibility Principle)</h1><blockquote>\n<p>一個模組應該只對唯一的一個角色負責</p>\n</blockquote>\n<p>一個類別或模塊只應該負責一個功能或職責。這個原則有助於降低代碼的複雜度，使代碼更容易維護和擴展。這避免了一個類別出現了上帝類別（God Class)。</p>\n<p>舉例來說，這是一個員工類別。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Salary &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> CommissionRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> BonusRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateSalary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算薪水的邏輯</span></span><br><span class=\"line\">        Salary = <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateCommission</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算佣金的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateBonus</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算獎金的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Sell</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 銷售的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DevelopSoftware</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 軟體開發的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>這類別包含很多方法。包括表示員工的數據、計算薪水、銷售、軟體開發和需求修改等功能。這導致代碼複雜度提高，使得這個類更難理解、修改和擴展。為了解決這個問題，可以使用單一職責原則。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Salary &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FinanceEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ManageAccounts</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 財務員工管理帳戶的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ITEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DevelopSoftware</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IT員工開發軟體的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SalesEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> CommissionRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Sell</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 銷售人員銷售的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>將 Employee 類分成 FinanceEmployee、ITEmployee 和 SalesEmployee 三個類。FinanceEmployee 類負責財務管理的功能，ITEmployee 類負責開發軟體的功能，SalesEmployee 類負責銷售的功能。每個類都只負責一個職責，從而使代碼更易於理解、修改和擴展。</p>\n","text":"單一職責原則(Single Responsibility Principle)一個模組應該只對唯一的一個角色負責一個類別或模塊只應該負責一個功能或職責。這個原則有助於降低代碼的複雜度，使代碼更容易維護和擴展。這避免了一個類別出現了上帝類別（God Class)。舉例來說，這是一個","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":10,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]}]}