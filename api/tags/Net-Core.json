{"name":".Net Core","slug":"Net-Core","count":10,"postlist":[{"title":"Asp.Net Core API Controller繼承","slug":"AspNetCore_WebAPI","date":"2023-04-16T12:40:48.000Z","updated":"2024-05-18T01:08:54.973Z","comments":true,"path":"api/articles/AspNetCore_WebAPI.json","excerpt":"<h1 id=\"Net-Core-Web-API-–-API-Controller-的繼承\"><a href=\"#Net-Core-Web-API-–-API-Controller-的繼承\" class=\"headerlink\" title=\".Net Core Web API – API Controller 的繼承\"></a>.Net Core Web API – API Controller 的繼承</h1><p>建立新的API時候，Controller到底要繼承Controller還是ControllerBase ?</p>","keywords":null,"cover":null,"content":null,"text":".Net Core Web API – API Controller 的繼承建立新的API時候，Controller到底要繼承Controller還是ControllerBase ?API Controller 繼承建立新的API Controller類別時，繼承到底要繼承Con","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"WebAPI","slug":"WebAPI","count":2,"path":"api/tags/WebAPI.json"}]},{"title":"Dependency Injection (二) Mircosoft.Extensions.DependencyInjection 介紹","slug":"DependencyInjection2","date":"2023-11-27T13:12:48.000Z","updated":"2024-05-18T01:06:01.403Z","comments":true,"path":"api/articles/DependencyInjection2.json","excerpt":"<h1 id=\"Microsoft-Extensions-DependencyInjection\"><a href=\"#Microsoft-Extensions-DependencyInjection\" class=\"headerlink\" title=\"Microsoft.Extensions.DependencyInjection\"></a>Microsoft.Extensions.DependencyInjection</h1><p>在<code>ASP.NET Core</code>中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。<code>ASP.NET Core</code> 的 Dependency Injection Container系統提供了一個建立基於依賴注入的應用程序的機制，並支持以下功能：</p>","keywords":null,"cover":null,"content":null,"text":"Microsoft.Extensions.DependencyInjection在ASP.NET Core中，Dependency Injection Container 是一個核心功能，用於管理應用程序中的依賴關係。ASP.NET Core 的 Dependency Injec","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"}]},{"title":"Dependency Injection (一) 簡介","slug":"DependencyInjection1","date":"2023-11-27T13:02:48.000Z","updated":"2024-05-18T01:05:50.137Z","comments":true,"path":"api/articles/DependencyInjection1.json","excerpt":"<h1 id=\"簡介\"><a href=\"#簡介\" class=\"headerlink\" title=\"簡介\"></a>簡介</h1><ul>\n<li>Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責建立。</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"簡介Dependency Injection (DI) 是一種設計模式，用於降低物件之間的耦合度，從而提高代碼的可重用性、可測試性和可維護性。在Dependency Injection中，物件之間的依賴關係不由物件本身建立，而是由Dependency Injection 容器負責","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"DI","slug":"OOP/DI","count":2,"path":"api/categories/OOP/DI.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"}]},{"title":"關於 HttpClient 使用方式","slug":"HttpClient","date":"2023-11-27T13:32:48.000Z","updated":"2024-05-18T01:10:26.790Z","comments":true,"path":"api/articles/HttpClient.json","excerpt":"<h1 id=\"關於-HttpClient\"><a href=\"#關於-HttpClient\" class=\"headerlink\" title=\"關於 HttpClient\"></a>關於 HttpClient</h1><p>因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在<strong>CSharp</strong>中最常使用的類別庫就是<code>HttpClient.cs</code>，但是<code>HttpClient.cs</code>使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。</p>","keywords":null,"cover":null,"content":null,"text":"關於 HttpClient因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在CSharp中最常使用的類別庫就是HttpClient.cs，但是HttpClient.cs使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。官方不建議使用方式<br","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/categories/HTTP.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"}]},{"title":"Microsoft.FeatureManagement Feature Toggle","slug":"Microsoft_FeatureManagement","date":"2023-01-01T04:20:48.000Z","updated":"2024-05-18T01:07:25.292Z","comments":true,"path":"api/articles/Microsoft_FeatureManagement.json","excerpt":"<h1 id=\"ASP-NET-Core-Feature-Flags\"><a href=\"#ASP-NET-Core-Feature-Flags\" class=\"headerlink\" title=\"ASP.NET Core Feature Flags\"></a>ASP.NET Core Feature Flags</h1><p>ASP.NET Core提供了一種動態打開或關閉功能的解決方案。  </p>","keywords":null,"cover":null,"content":null,"text":"ASP.NET Core Feature FlagsASP.NET Core提供了一種動態打開或關閉功能的解決方案。  Github: https://github.com/microsoft/FeatureManagement-Dotnet  Introducing Micro","link":"","raw":null,"photos":[],"categories":[{"name":"FeatureToggle","slug":"FeatureToggle","count":1,"path":"api/categories/FeatureToggle.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"FeatureToggle","slug":"FeatureToggle","count":1,"path":"api/tags/FeatureToggle.json"}]},{"title":"更高效 Logging - LoggerMessage","slug":"LoggingMessage","date":"2024-02-16T12:19:48.000Z","updated":"2024-05-18T01:05:38.323Z","comments":true,"path":"api/articles/LoggingMessage.json","excerpt":"<h1 id=\"Logging-LoggerMessage\"><a href=\"#Logging-LoggerMessage\" class=\"headerlink\" title=\"Logging - LoggerMessage\"></a>Logging - LoggerMessage</h1><p>原先在記錄Log都會使用微軟提供LoggingExtensions方法，最近朋友聊天分享給我<code>LoggerMessage.cs</code>與<code>LoggerMessageAttribute.cs</code>。於是研究一下並記錄一下。</p>\n<p>這方式把寫Log的方式更好的管理及使用強型別方式。</p>","keywords":null,"cover":null,"content":null,"text":"Logging - LoggerMessage原先在記錄Log都會使用微軟提供LoggingExtensions方法，最近朋友聊天分享給我LoggerMessage.cs與LoggerMessageAttribute.cs。於是研究一下並記錄一下。這方式把寫Log的方式更好的管理","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"},{"name":"Log","slug":"WebAPI/Log","count":1,"path":"api/categories/WebAPI/Log.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"WebAPI","slug":"WebAPI","count":2,"path":"api/tags/WebAPI.json"},{"name":"2024","slug":"2024","count":11,"path":"api/tags/2024.json"}]},{"title":"Swagger 文件安裝與設定","slug":"Swagger_1","date":"2024-05-18T01:00:48.000Z","updated":"2024-05-18T01:04:12.727Z","comments":true,"path":"api/articles/Swagger_1.json","excerpt":"<h1 id=\"Swagger-文件安裝與設定\"><a href=\"#Swagger-文件安裝與設定\" class=\"headerlink\" title=\"Swagger 文件安裝與設定\"></a>Swagger 文件安裝與設定</h1><h6 id=\"tags-NuGet-Package\"><a href=\"#tags-NuGet-Package\" class=\"headerlink\" title=\"tags: NuGet Package\"></a>tags: <code>NuGet Package</code></h6><p>現今許多 Web API 開發團隊都採用 Swagger 來製作 API 文件，這讓開發人員能夠更加便利地開發和測試 API。使用 Swagger 的好處包括但不限於：清楚的 API 規範、易於閱讀的 API 文件、快速的 API 測試等。此外，Swagger 還支援自動生成客戶端程式碼，使得開發人員能夠更快地建立與 API 互動的應用程式。</p>","keywords":null,"cover":null,"content":null,"text":"Swagger 文件安裝與設定tags: NuGet Package現今許多 Web API 開發團隊都採用 Swagger 來製作 API 文件，這讓開發人員能夠更加便利地開發和測試 API。使用 Swagger 的好處包括但不限於：清楚的 API 規範、易於閱讀的 API 文","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"},{"name":"OpenAPI","slug":"WebAPI/OpenAPI","count":3,"path":"api/categories/WebAPI/OpenAPI.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"2024","slug":"2024","count":11,"path":"api/tags/2024.json"},{"name":"OpenAPI","slug":"OpenAPI","count":3,"path":"api/tags/OpenAPI.json"}]},{"title":"CoreProfile 實現跨應用程式性能調整及監控","slug":"coreprofile實現跨服務追蹤","date":"2022-12-16T14:53:48.000Z","updated":"2024-05-18T01:08:09.273Z","comments":true,"path":"api/articles/coreprofile實現跨服務追蹤.json","excerpt":"<h1 id=\"CoreProfile-實現跨應用程式性能調整及監控\"><a href=\"#CoreProfile-實現跨應用程式性能調整及監控\" class=\"headerlink\" title=\"CoreProfile 實現跨應用程式性能調整及監控\"></a>CoreProfile 實現跨應用程式性能調整及監控</h1><ul>\n<li>當橫跨API服務應用程式之間請求與回應效能低下，需要API服務性能調教及追蹤效能。</li>\n</ul>","keywords":null,"cover":null,"content":null,"text":"CoreProfile 實現跨應用程式性能調整及監控當橫跨API服務應用程式之間請求與回應效能低下，需要API服務性能調教及追蹤效能。NuGet套件:1<br>2<br>Install-Package CoreProfiler<br>Install-Package CorePro","link":"","raw":null,"photos":[],"categories":[{"name":"Monitor","slug":"Monitor","count":1,"path":"api/categories/Monitor.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"2022","slug":"2022","count":2,"path":"api/tags/2022.json"},{"name":"Monitor","slug":"Monitor","count":1,"path":"api/tags/Monitor.json"}]},{"title":"Swagger 文件加上範例格式資料","slug":"Swagger_2","date":"2024-05-18T01:10:48.000Z","updated":"2024-05-18T01:04:22.005Z","comments":true,"path":"api/articles/Swagger_2.json","excerpt":"<h1 id=\"Swagger-文件加上範例格式資料\"><a href=\"#Swagger-文件加上範例格式資料\" class=\"headerlink\" title=\"Swagger 文件加上範例格式資料\"></a>Swagger 文件加上範例格式資料</h1><h6 id=\"tags-NuGet-Package\"><a href=\"#tags-NuGet-Package\" class=\"headerlink\" title=\"tags: NuGet Package\"></a>tags: <code>NuGet Package</code></h6><p>Swashbuckle.AspNetCore.Filters 是一個 Swagger 擴充庫，提供一組有用的Attribute和工具，可以幫助開發人員更輕鬆地使用 Swagger 和 .NET Core 開發 Web API。</p>\n<p>其中的 ExampleProvider 是一個介面，用於定義如何生成 Swagger API 文檔中的範例資料。具體而言，ExampleProvider 提供了一種方法，即 <code>GetExamples()</code>，該方法返回物件，其中包含要顯示在 Swagger API 文檔中的示例數據。通常，開發人員可以實現自己的 ExampleProvider，並使用自定義的邏輯生成範例資料。</p>","keywords":null,"cover":null,"content":null,"text":"Swagger 文件加上範例格式資料tags: NuGet PackageSwashbuckle.AspNetCore.Filters 是一個 Swagger 擴充庫，提供一組有用的Attribute和工具，可以幫助開發人員更輕鬆地使用 Swagger 和 .NET Core 開","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"},{"name":"OpenAPI","slug":"WebAPI/OpenAPI","count":3,"path":"api/categories/WebAPI/OpenAPI.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"2024","slug":"2024","count":11,"path":"api/tags/2024.json"},{"name":"OpenAPI","slug":"OpenAPI","count":3,"path":"api/tags/OpenAPI.json"}]},{"title":"Swagger 文件加上FluentValidation驗證規則","slug":"Swagger_3","date":"2024-05-18T01:15:48.000Z","updated":"2024-05-18T01:04:28.419Z","comments":true,"path":"api/articles/Swagger_3.json","excerpt":"<h1 id=\"Swagger-文件加上FluentValidation驗證規則\"><a href=\"#Swagger-文件加上FluentValidation驗證規則\" class=\"headerlink\" title=\"Swagger 文件加上FluentValidation驗證規則\"></a>Swagger 文件加上FluentValidation驗證規則</h1><h6 id=\"tags-NuGet-Package\"><a href=\"#tags-NuGet-Package\" class=\"headerlink\" title=\"tags: NuGet Package\"></a>tags: <code>NuGet Package</code></h6><p>MicroElements.Swashbuckle.FluentValidation 是一個 Swagger 擴展庫，它提供了一個便利的方法來顯示 FluentValidation 驗證器的錯誤信息，使得 Swagger API 文檔更加友好和易於使用。</p>\n<p>具體而言，MicroElements.Swashbuckle.FluentValidation 可以自動從 FluentValidation 驗證器中提取錯誤信息，並將其顯示在 Swagger UI 的輸入欄位旁邊，以便用戶更快速地找到並修復錯誤。</p>","keywords":null,"cover":null,"content":null,"text":"Swagger 文件加上FluentValidation驗證規則tags: NuGet PackageMicroElements.Swashbuckle.FluentValidation 是一個 Swagger 擴展庫，它提供了一個便利的方法來顯示 FluentValidatio","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":6,"path":"api/categories/WebAPI.json"},{"name":"OpenAPI","slug":"WebAPI/OpenAPI","count":3,"path":"api/categories/WebAPI/OpenAPI.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":10,"path":"api/tags/Net-Core.json"},{"name":"2024","slug":"2024","count":11,"path":"api/tags/2024.json"},{"name":"OpenAPI","slug":"OpenAPI","count":3,"path":"api/tags/OpenAPI.json"}]}]}