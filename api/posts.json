{"total":18,"pageSize":10,"pageCount":2,"data":[{"title":"Swagger 安裝與設定","slug":"Swagger_1","date":"2024-05-18T01:00:48.000Z","updated":"2024-05-18T00:51:34.879Z","comments":true,"path":"api/articles/Swagger_1.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Swashbuckle-AspNetCore\"><a href=\"#Swashbuckle-AspNetCore\" class=\"headerlink\" title=\"Swashbuckle.AspNetCore\"></a>Swashbuckle.AspNetCore</h1><h6 id=\"tags-NuGet-Package\"><a href=\"#tags-NuGet-Package\" class=\"headerlink\" title=\"tags: NuGet Package\"></a>tags: <code>NuGet Package</code></h6><p>現今許多 Web API 開發團隊都採用 Swagger 來製作 API 文件，這讓開發人員能夠更加便利地開發和測試 API。使用 Swagger 的好處包括但不限於：清楚的 API 規範、易於閱讀的 API 文件、快速的 API 測試等。此外，Swagger 還支援自動生成客戶端程式碼，使得開發人員能夠更快地建立與 API 互動的應用程式。</p>\n<h2 id=\"Swashbuckle-AspNetCore-1\"><a href=\"#Swashbuckle-AspNetCore-1\" class=\"headerlink\" title=\"Swashbuckle.AspNetCore\"></a>Swashbuckle.AspNetCore</h2><h3 id=\"安裝方式\"><a href=\"#安裝方式\" class=\"headerlink\" title=\"安裝方式\"></a>安裝方式</h3><p>Nuget Package:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Install-Package Swashbuckle.AspNetCore</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"註冊服務\"><a href=\"#註冊服務\" class=\"headerlink\" title=\"註冊服務\"></a>註冊服務</h3><p><code>Program.cs</code> 中 Dependency Injection 加上以下的程式碼:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">builder.Services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        options.SwaggerDoc</span><br><span class=\"line\">        (</span><br><span class=\"line\">            <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span> OpenApiInfo()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Title = <span class=\"string\">&quot; Product Open API&quot;</span>,</span><br><span class=\"line\">                Version = <span class=\"keyword\">new</span> Version(<span class=\"number\">1</span>, <span class=\"number\">0</span>).ToString(),</span><br><span class=\"line\">                Description = <span class=\"string\">&quot;This is Product API Swagger Document.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlFilename = <span class=\"string\">$&quot;<span class=\"subst\">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml&quot;</span>;</span><br><span class=\"line\">        options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>在Program.cs之中的Middleware加上</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">app.UseSwagger();</span><br><span class=\"line\">app.UseSwaggerUI();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h3><h4 id=\"MIME-Types\"><a href=\"#MIME-Types\" class=\"headerlink\" title=\"MIME Types\"></a>MIME Types</h4><p>MIME (Multipurpose Internet Mail Extensions) 類型是一種標準的 Internet 媒體類型，它用於標識在互聯網上傳輸的各種文件格式。以下是一些常見的 MIME 類型：</p>\n<ul>\n<li>text&#x2F;plain：純文字格式</li>\n<li>text&#x2F;html：HTML 網頁格式</li>\n<li>application&#x2F;json：JSON 格式</li>\n<li>application&#x2F;xml：XML 格式</li>\n<li>multipart&#x2F;form-data：用於表單提交的數據格式</li>\n</ul>\n<p>Controller之中加上 <code>ConsumesAttribute.cs</code> 及 <code>ProducesAttribute.cs</code>，可以在Request及Response 指定 MIME Type。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">ApiController</span>]</span><br><span class=\"line\">[<span class=\"meta\">Route(<span class=\"string\">&quot;api/[controller]&quot;</span>)</span>]</span><br><span class=\"line\">[<span class=\"meta\">Consumes(MediaTypeNames.Application.Json)</span>]</span><br><span class=\"line\">[<span class=\"meta\">Produces(MediaTypeNames.Application.Json)</span>]</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">WeatherForecastController</span> : <span class=\"title\">ControllerBase</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Produces-Response-Type\"><a href=\"#Produces-Response-Type\" class=\"headerlink\" title=\"Produces Response Type\"></a>Produces Response Type</h4><p>[ProducesResponseType] 可用於指定 API 方法的輸出類型和狀態碼。在這個例子中，[ProducesResponseType] 屬性指定了三種不同的輸出類型和狀態碼：</p>\n<ul>\n<li><p>如果 API 方法返回的是 ResultOutputModel 類型，且狀態碼為 200 OK，那麼 Swagger 將顯示 ResultOutputModel 類型的數據結構，以及 200 OK 狀態碼的相關信息。</p>\n</li>\n<li><p>如果 API 方法返回的是 FailureResultOutputModel 類型，且狀態碼為 400 Bad Request，那麼 Swagger 將顯示 FailureResultOutputModel 類型的數據結構，以及 400 Bad Request 狀態碼的相關信息。</p>\n</li>\n<li><p>如果 API 方法返回的是 FailureResultOutputModel 類型，且狀態碼為 404 Not Found，那麼 Swagger 將顯示 FailureResultOutputModel 類型的數據結構，以及 404 Not Found 狀態碼的相關信息</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">[<span class=\"meta\">HttpPost</span>]    </span><br><span class=\"line\">[<span class=\"meta\">ProducesResponseType(typeof(ResultOutputModel), 200)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ProducesResponseType(typeof(FailureResultOutputModel), 400)</span>]</span><br><span class=\"line\">[<span class=\"meta\">ProducesResponseType(typeof(FailureResultOutputModel), 404)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task&lt;IActionResult&gt; <span class=\"title\">CreateAsync</span>(<span class=\"params\">[FromBody]CreateCustomerRequest createCustomerRequest</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Ok();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Header加上參數\"><a href=\"#Header加上參數\" class=\"headerlink\" title=\"Header加上參數\"></a>Header加上參數</h3><p>當API需要一些Header進行授權等行為時候。Swagger需要做一些調整。舉例來說當Request需要在Header之中的Token進行驗證的時候可以這樣做。</p>\n<p>建立 <code>AddHeaderParameterOperationFilter.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">AddHeaderParameterOperationFilter</span> : <span class=\"title\">IOperationFilter</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Apply</span>(<span class=\"params\">OpenApiOperation operation, OperationFilterContext context</span>)</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (operation.Parameters == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                operation.Parameters = <span class=\"keyword\">new</span> List&lt;OpenApiParameter&gt;();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            operation.Parameters.Add(<span class=\"keyword\">new</span> OpenApiParameter</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Name = <span class=\"string\">&quot;Token&quot;</span>,</span><br><span class=\"line\">                In = ParameterLocation.Header,</span><br><span class=\"line\">                Required = <span class=\"literal\">true</span>,</span><br><span class=\"line\">                Example = <span class=\"keyword\">new</span> OpenApiString(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>之後在Progarm.cs的DI註冊加上</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">builder.Services.AddSwaggerGen(options =&gt;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                            </span><br><span class=\"line\">        options.SwaggerDoc</span><br><span class=\"line\">        (</span><br><span class=\"line\">            <span class=\"string\">&quot;v1&quot;</span>,</span><br><span class=\"line\">            <span class=\"keyword\">new</span>()</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Title = <span class=\"string\">&quot; Product Open API&quot;</span>,</span><br><span class=\"line\">                Version = <span class=\"keyword\">new</span> Version(<span class=\"number\">1</span>, <span class=\"number\">0</span>).ToString(),</span><br><span class=\"line\">                Description = <span class=\"string\">&quot;This is Product API Swagger Document.&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"keyword\">var</span> xmlFilename = <span class=\"string\">$&quot;<span class=\"subst\">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml&quot;</span>;</span><br><span class=\"line\">        options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 加上這一行</span></span><br><span class=\"line\">        options.OperationFilter&lt;AddHeaderParameterOperationFilter&gt;();</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n","text":"Swashbuckle.AspNetCoretags: NuGet Package現今許多 Web API 開發團隊都採用 Swagger 來製作 API 文件，這讓開發人員能夠更加便利地開發和測試 API。使用 Swagger 的好處包括但不限於：清楚的 API 規範、易於閱讀","link":"","raw":null,"photos":[],"categories":[{"name":"Swagger","slug":"Swagger","count":1,"path":"api/categories/Swagger.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":8,"path":"api/tags/Net-Core.json"},{"name":"2024","slug":"2024","count":9,"path":"api/tags/2024.json"},{"name":"OpenAPI","slug":"OpenAPI","count":1,"path":"api/tags/OpenAPI.json"}]},{"title":"Domain Driven Design","slug":"DDD","date":"2024-03-19T10:23:48.000Z","updated":"2024-03-19T10:39:50.709Z","comments":true,"path":"api/articles/DDD.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"為什麼需要-Domain-Driven-Design\"><a href=\"#為什麼需要-Domain-Driven-Design\" class=\"headerlink\" title=\"為什麼需要 Domain Driven Design\"></a>為什麼需要 Domain Driven Design</h1><p>隨著系統隨時間演變而逐漸複雜化，其數據和業務概念往往變得混亂，尤其是在公司持續成長的情況下。這種混亂不僅涉及架構的複雜性，還包括業務邏輯的混淆。例如，當業務需求描述為「建立訂單」時，工程師可能需要在代碼中尋找相應的實現位置，而隨著系統的演化，不同的開發者可能會使用不同的命名方式，如 CreateOrder、MakeOrder 和 PlaceOrder，這進一步增加了理解和維護的難度。</p>\n<p>隨著時間的推移，系統可能會因為架構退化、業務邏輯遺失以及業務命名的混亂而變得更加雜亂。此外，相同的業務詞彙在不同的情境下可能代表著不同的邏輯含義，這使得維護和擴展系統變得更加困難。</p>\n<p>在這種情況下，Domain Driven Design 提供了一種解決方案。DDD 強調使用統一語言來明確表達業務概念並將其具體化到代碼中。通過確立 Bounded Context，DDD 幫助開發者在不同的業務場景中清晰地劃分和實現相關的業務邏輯，從而降低了系統複雜性，並提高了可維護性和擴展性。這樣，即使在系統不斷演化的過程中，也能夠保持業務邏輯的清晰和一致性。</p>\n<h1 id=\"Domain-Driven-Design-簡介\"><a href=\"#Domain-Driven-Design-簡介\" class=\"headerlink\" title=\"Domain Driven Design 簡介\"></a>Domain Driven Design 簡介</h1><p>Domain Driven Design 的核心思想是理解業務領域，根據問題大小劃分不同的問題&#x2F;領域，找出各個問題的解決模型。任何應用程度存在都是為了解決現實遇到的問題，軟體服務也是為了解決問題而存在的。Domain Driven Design 本身善於處理高複雜度業務領域的一種方法論，大致上分為問題領域&#x2F;空間（Problem Domain&#x2F;Space）和解決領域&#x2F;空間（Solution Domain&#x2F;Space）。</p>\n<h2 id=\"問題領域-Problem-Domain-x2F-Space\"><a href=\"#問題領域-Problem-Domain-x2F-Space\" class=\"headerlink\" title=\"問題領域 (Problem Domain&#x2F;Space)\"></a>問題領域 (Problem Domain&#x2F;Space)</h2><p>問題領域涉及發現什麼問題、要解決的問題，即任何想解決的問題。在軟體工程業最常聽到的字是：“需求”。戰略設計就是依問題本身進行分析設計，通過一系列的戰略設計找出解決問題的領域模型，這模型可能是一張類關係圖。領域模型會反映出整個系統的初始樣貌，設計好壞直接影響了整個系統的成敗。現在在 Domain Driven Design 中是使用 Event Storming 工作坊方式進行戰略設計的落地與實現，其中不乏了對於 Problem Domain 上的探索，進而與領域專家合作找出核心領域、支撐子領域及通用子領域。</p>\n<h2 id=\"解決領域-Solution-Domain-x2F-Space\"><a href=\"#解決領域-Solution-Domain-x2F-Space\" class=\"headerlink\" title=\"解決領域 (Solution Domain&#x2F;Space)\"></a>解決領域 (Solution Domain&#x2F;Space)</h2><p>解決領域涉及如何解決問題，要用什麼工具解決這個問題。在軟體工程就是開發人員熟悉的程序開發，包含用什麼程序語言、資料庫等等。戰術設計就是開發人員如何將分析結果的領域模型撰寫程序代碼。當執行戰略設計完畢，取得戰略設計的成果：領域模型，之後開始執行戰術設計。也基於 Event Storming 結果，開發人員建立一系列的 DomainEvent、ValueObject、Entity 及 Aggregate 的對象等。Domain Driven Design 也非常強調要把業務語言&#x2F;統一語言寫入程序代碼之中。</p>\n<p>簡單地說，戰略設計就是對於問題分析與設計，戰術設計就是軟體開發。</p>\n","text":"為什麼需要 Domain Driven Design隨著系統隨時間演變而逐漸複雜化，其數據和業務概念往往變得混亂，尤其是在公司持續成長的情況下。這種混亂不僅涉及架構的複雜性，還包括業務邏輯的混淆。例如，當業務需求描述為「建立訂單」時，工程師可能需要在代碼中尋找相應的實現位置，而隨","link":"","raw":null,"photos":[],"categories":[{"name":"Domain Driven Design","slug":"Domain-Driven-Design","count":2,"path":"api/categories/Domain-Driven-Design.json"}],"tags":[{"name":"2024","slug":"2024","count":9,"path":"api/tags/2024.json"},{"name":"DDD","slug":"DDD","count":2,"path":"api/tags/DDD.json"}]},{"title":"SOLID原則:依賴反轉原則(Dependency Inversion Principle)","slug":"DIP","date":"2024-03-19T09:41:48.000Z","updated":"2024-03-19T09:40:58.332Z","comments":true,"path":"api/articles/DIP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"依賴反轉原則\"><a href=\"#依賴反轉原則\" class=\"headerlink\" title=\"依賴反轉原則\"></a>依賴反轉原則</h1><p>類別之間的依賴盡量以<code>Interface</code>的方式進行溝通，應該減少類別的直接依賴。這樣可以減少修改幅度。<br>依賴反轉原則（Dependency inversion principle，DIP）是指一種特定的解耦（傳統的依賴關係建立在高層次上，而具體的策略設定則應用在低層次的模組上）形式，使得高層次的模組不依賴於低層次的模組的實現細節，依賴關係被顛倒（反轉），從而使得低層次模組依賴於高層次模組的需求抽象。</p>\n<p>該原則規定：</p>\n<ul>\n<li>高層次的模組不應該依賴於低層次的模組，兩者都應該依賴於抽象介面。</li>\n<li>抽象介面不應該依賴於具體實現。而具體實現則應該依賴於抽象介面。</li>\n</ul>\n<h2 id=\"穩定的介面\"><a href=\"#穩定的介面\" class=\"headerlink\" title=\"穩定的介面\"></a>穩定的介面</h2><p>介面的改變會影響到實作，反之，對於修改實作不一定會去修改介面。甚至都不要去修改介面，因此介面比實作穩定。</p>\n<p>舉例如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderService</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderRepository _orderRepository;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">OrderService</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _orderRepository = <span class=\"keyword\">new</span> OrderRepository();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">GetAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> orderId</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">         </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> order = <span class=\"keyword\">await</span> _orderRepository.GetAsync(orderId);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 略 </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>對於這樣的程式碼 <code>OrderService.cs</code> 直接依賴 <code>OrderRepository.cs</code>，容易導致<code>OrderRepository.cs</code>的修改直接影響到<code>OrderService.cs</code>。尤其是當<code>OrderRepository.cs</code>的實作有調整時，會造成<code>OrderService.cs</code>的修改。在需求異動時，我們應該以最少的修改完成需求。</p>\n<p>我們應該可以把OrderRepository抽取介面，並依賴介面。</p>\n<p>建立 <code>IOrderRepository.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IOrderRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">Task <span class=\"title\">GetAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> orderId</span>)</span>;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>讓 <code>OrderRepository.cs</code> 實作 <code>IOrderRepository.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">OrderRepository</span> : <span class=\"title\">IOrderRepository</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">async</span> Task <span class=\"title\">GetAsync</span>(<span class=\"params\"><span class=\"built_in\">string</span> orderId</span>)</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         <span class=\"comment\">//略</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>OrderService.cs</code> 直接依賴 <code>IOrderRepository.cs</code> 而不直接依賴 <code>OrderRepository.cs</code></p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>在類別層次上，符合依賴反轉原則的設計需要透過抽象化來定義穩定的介面，讓高層類別依賴於介面，而不是依賴於具體的低層類別。這樣可以降低高層組件對低層組件的依賴程度，並且使得系統更容易進行修改和擴展。</p>\n<p>在架構層次上，依賴反轉原則要求將系統中的依賴關係建立在抽象的邊界上。這意味著不同的組件應該依賴於抽象的介面或類別，而不是具體的實現細節。透過定義穩定的介面和抽象層次，不同組件之間的依賴關係可以更加清晰和靈活，並且可以簡化組件之間的協作和整合。</p>\n<p>當所有的類別都依賴於穩定的介面時，依賴反轉原則提供了一個架構上的邊界，並且定義了新的依賴規則。這樣的依賴規則使得高層組件和低層組件之間的依賴關係變得清晰和可管理，提高了系統的彈性和可擴展性。</p>\n<p>因此，依賴反轉原則在類別層次和架構層次上都非常重要，它的目的都是解耦合系統的不同組件，建立抽象的介面和層次，提高系統的靈活性、可擴展性和可測試性。</p>\n","text":"依賴反轉原則類別之間的依賴盡量以Interface的方式進行溝通，應該減少類別的直接依賴。這樣可以減少修改幅度。<br>依賴反轉原則（Dependency inversion principle，DIP）是指一種特定的解耦（傳統的依賴關係建立在高層次上，而具體的策略設定則應用在低","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":9,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]},{"title":"SOLID原則:接口隔離原則(Interface Segregation Principle)","slug":"ISP","date":"2024-03-19T09:38:48.000Z","updated":"2024-03-19T09:39:09.141Z","comments":true,"path":"api/articles/ISP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"介面隔離原則\"><a href=\"#介面隔離原則\" class=\"headerlink\" title=\"介面隔離原則\"></a>介面隔離原則</h1><p>介面隔離原則是這樣被描述的:</p>\n<blockquote>\n<p>不應該強制客戶端依賴於它們不用的介面</p>\n</blockquote>\n<p>介面隔離原則主要解決介面過於擁擠的問題。建立介面保持簡潔、最低限度的功能。</p>\n<p>舉掃描介面來說:</p>\n<p><code>IScan.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IScan</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SendEmail</span>()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>IScan</code>介面可以分離成兩個類別:</p>\n<p><code>IScan.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IScan</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Scan</span>()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>IEmailClient.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IEmailClient</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SendEmail</span>()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>客戶端程式需要掃描功能只需要依賴<code>IScan.cs</code>裡面的<code>Scan</code>方法，不應該也依賴<code>SendEmail</code>方法。</p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>在類別層次上，符合介面隔離原則的設計需要將介面拆分成多個小型的、具體的介面，每個介面只提供一個特定的功能，並且避免將不相關的方法放在同一個介面中。這樣可以讓客戶端程式碼只依賴於需要的介面，而不受到不需要的介面的影響，從而提高程式的靈活性和可擴展性。</p>\n<p>在架構層次上，介面隔離原則需要通過模塊化的設計來實現。每個模塊只提供特定的功能，並且避免不必要的依賴關係。這樣可以減少系統中各個模塊之間的相互依賴，提高系統的靈活性和可擴展性。</p>\n<p>如果在專案上依賴了不需要的介面或是套件，就會導致不必要的編譯和部屬，甚至可能導致不必要的錯誤和麻煩。因此，在設計和開發專案時，需要遵循介面隔離原則，僅依賴所需的介面和套件，避免不必要的依賴關係，從而提高程式的可靠性和可維護性。</p>\n","text":"介面隔離原則介面隔離原則是這樣被描述的:不應該強制客戶端依賴於它們不用的介面介面隔離原則主要解決介面過於擁擠的問題。建立介面保持簡潔、最低限度的功能。舉掃描介面來說:IScan.cs1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br><br>publi","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":9,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]},{"title":"SOLID原則:里氏替換原則(Liskov Substitution Principle)","slug":"LSP","date":"2024-03-19T09:34:48.000Z","updated":"2024-03-19T09:36:21.520Z","comments":true,"path":"api/articles/LSP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"里氏替換原則\"><a href=\"#里氏替換原則\" class=\"headerlink\" title=\"里氏替換原則\"></a>里氏替換原則</h1><p>里式替換原則描述:</p>\n<blockquote>\n<p>子類別應該可以替換父類並且行為不會受到影響。</p>\n</blockquote>\n<p>在原本的里式替換原則之中，如果子類別無法替換父類別，就會出現程式上的錯誤。子類別必須完全替代父類別，並不會影響原有的程式邏輯。里氏替換原則適用於繼承和介面的應用，藉此實現程式碼的可擴展性和重用性。</p>\n<p>最常見的例子是長方形與正方形:</p>\n<p><code>Rectangle.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Width &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Height &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Rectangle</span>(<span class=\"params\"><span class=\"built_in\">int</span> width, <span class=\"built_in\">int</span> height</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Width = width;</span><br><span class=\"line\">        Height = height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"title\">CalculateArea</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Width * Height;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>Square.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Square</span>: <span class=\"title\">Rectangle</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Square</span>(<span class=\"params\"><span class=\"built_in\">int</span> width, <span class=\"built_in\">int</span> height</span>) : <span class=\"title\">base</span>(<span class=\"params\">width, height</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (width != height)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentOutOfRangeException(<span class=\"keyword\">nameof</span>(width));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Height = height;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.Width = width;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>原本客戶端程式碼如下:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在使用上，造成無法替換的問題</span></span><br><span class=\"line\">Rectangle rectangle = <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rectangleArea = rectangle.Area();</span><br></pre></td></tr></table></figure>\n\n\n<p>如果抽換成<code>Square.cs</code>:</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在使用上，造成無法替換的問題</span></span><br><span class=\"line\">Rectangle rectangle = <span class=\"keyword\">new</span> Square(<span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> rectangleArea = rectangle.Area();</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>里氏替換原則（Liskov Substitution Principle, LSP）是指子類別應該能夠完全替代父類別而不會對程式造成錯誤。</p>\n<p>符合 LSP 的設計原則包括子類別必須完全實現父類別的所有方法，並且不能新增或刪除父類別的任何方法；子類別的方法的前置條件不能比父類別更嚴格，後置條件不能比父類別更寬鬆等。</p>\n<p>在架構層次上，LSP 的目的是減少系統中各個元件之間的相互依賴性，提高系統的靈活性和可擴展性。這需要通過抽象化和封裝等技術，將系統中的各個元件隔離開來，使得各個元件可以獨立地進行修改和擴展，而不會對其他元件造成影響。在實踐中，可以通過設計合適的接口和抽象類別，來實現 LSP。</p>\n","text":"里氏替換原則里式替換原則描述:子類別應該可以替換父類並且行為不會受到影響。在原本的里式替換原則之中，如果子類別無法替換父類別，就會出現程式上的錯誤。子類別必須完全替代父類別，並不會影響原有的程式邏輯。里氏替換原則適用於繼承和介面的應用，藉此實現程式碼的可擴展性和重用性。最常見的例","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":9,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]},{"title":"SOLID原則:開放封閉原則(Open Close Principle)","slug":"OCP","date":"2024-03-19T09:23:48.000Z","updated":"2024-03-19T09:35:01.884Z","comments":true,"path":"api/articles/OCP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"開放封閉原則\"><a href=\"#開放封閉原則\" class=\"headerlink\" title=\"開放封閉原則\"></a>開放封閉原則</h1><p>開放封閉原則在 <em>Clean Architecture</em> 一書中是這樣被敘述的</p>\n<blockquote>\n<p>一個軟體製品應該對於擴充是開放的，但對於修改是封閉的。</p>\n</blockquote>\n<p>一個簡單的擴充需求，對於軟體開發上是巨大的改變。這是軟體架構的失敗。一個好的軟體架構可以將修改的程式碼減少到最低程度。在理想情形下這個值是 <strong>0</strong>。</p>\n<p>擴展系統功能比較好的方式應該是新增程式碼，並不是去修改既有的程式碼來擴充系統功能。因為修改一個行之有年的系統內部邏輯，可能會發生改 A 壞 B ，如果有自動化測試來驗證既有的程式碼可以在第一時間找出來。<br>但是在實務上有自動化測試專案真的是少之又少(ps.可能祖上積德才會遇到吧…)，如果當初在設計系統的時候能避免的這種改 A 壞 B 的情形，那軟體系統將更容易修改需求及擴充功能。舉例來說，這是一個手機介面。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMobilePhone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TurnOn</span>()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">TurnOff</span>()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Call</span>(<span class=\"params\"><span class=\"built_in\">string</span> phoneNumber</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>接下來，我們可以定義不同的手機，並實現<code>IMobilePhone.cs</code>介面：</p>\n<ul>\n<li><code>IPhone14.cs</code></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">IPhone14</span> : <span class=\"title\">IMobilePhone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOn</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;IPhone14 is turning on.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOff</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;IPhone14 is turning off.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Call</span>(<span class=\"params\"><span class=\"built_in\">string</span> phoneNumber</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;IPhone14 is calling &quot;</span> + phoneNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>宣告 <code>IMobilePhoneFactory.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">IMobilePhoneFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\">IMobilePhone <span class=\"title\">Create</span>(<span class=\"params\"><span class=\"built_in\">string</span> mobilePhone</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>建立 <code>MobilePhoneFactory.cs</code> 實作 <code>IMobilePhoneFactory.cs</code></p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MobilePhoneFactory</span> : <span class=\"title\">IMobilePhoneFactory</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IMobilePhone <span class=\"title\">Create</span>(<span class=\"params\"><span class=\"built_in\">string</span> mobilePhone</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span>(Program).Assembly</span><br><span class=\"line\">            .GetExportedTypes()</span><br><span class=\"line\">            .SingleOrDefault(t =&gt; t.Name.Equals(mobilePhone) &amp;&amp; <span class=\"keyword\">typeof</span>(IMobilePhone).IsAssignableFrom(t));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (type <span class=\"keyword\">is</span> <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> ArgumentException(<span class=\"keyword\">nameof</span>(mobilePhone));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (IMobilePhone)Activator.CreateInstance(type);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>GooglePixel7.cs</code></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">GooglePixel7</span> : <span class=\"title\">IMobilePhone</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOn</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;GooglePixel7 phone is turning on.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TurnOff</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;GooglePixel7 phone is turning off.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Call</span>(<span class=\"params\"><span class=\"built_in\">string</span> phoneNumber</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;GooglePixel7 phone is calling &quot;</span> + phoneNumber);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>現在，當我們使用不同型號手機，只需要使用<code>IMobilePhone.cs</code>介面，而不需要知道實際的手機型別。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mobilePhoneTypes = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">string</span>&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;IPhone14&quot;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">foreach</span> (<span class=\"keyword\">var</span> mobilePhoneType <span class=\"keyword\">in</span> mobilePhoneTypes)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mobilePhoneFactory = <span class=\"keyword\">new</span> MobilePhoneFactory();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mobilePhone = mobilePhoneFactory.Create(mobilePhoneType);</span><br><span class=\"line\"></span><br><span class=\"line\">    mobilePhone.TurnOn();</span><br><span class=\"line\"></span><br><span class=\"line\">    mobilePhone.Call(<span class=\"string\">&quot;1234567890&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    mobilePhone.TurnOff();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>這樣做的好處在於，當我們需要添加新的手機型號時，只需要實現 <code>IMobilePhone.cs</code> 介面即可，不需要修改現有使用端程式碼，只需要建立設定檔將所有手機型號進行註冊動作即可。</p>\n<h2 id=\"總結\"><a href=\"#總結\" class=\"headerlink\" title=\"總結\"></a>總結</h2><p>開放封閉原則的目標是實現系統的可擴展性和靈活性，使系統易於擴展而不會因為修改而對現有程式碼造成較大的影響。</p>\n<p>在類別層次上，建議設計類別時要對擴展開放，對修改封閉。</p>\n<p>在架構層次上，建議將系統組織成一系列相互獨立的元件，將這些元件安排到依賴階層中而實現。這樣可以避免高層級元件受到低層級元件變更的影響，同時使系統具有高度的模組化和可擴展性。</p>\n<p>總結，適用於類別層次和架構層次的設計原則，皆是實現系統的可擴展性和靈活性，同時保證系統的穩定性和可靠性。</p>\n","text":"開放封閉原則開放封閉原則在 Clean Architecture 一書中是這樣被敘述的一個軟體製品應該對於擴充是開放的，但對於修改是封閉的。一個簡單的擴充需求，對於軟體開發上是巨大的改變。這是軟體架構的失敗。一個好的軟體架構可以將修改的程式碼減少到最低程度。在理想情形下這個值是 ","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":9,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]},{"title":"SOLID原則:單一職責原則(Single Responsibility Principle)","slug":"SRP","date":"2024-03-19T09:20:48.000Z","updated":"2024-03-19T09:41:46.453Z","comments":true,"path":"api/articles/SRP.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"單一職責原則-Single-Responsibility-Principle\"><a href=\"#單一職責原則-Single-Responsibility-Principle\" class=\"headerlink\" title=\"單一職責原則(Single Responsibility Principle)\"></a>單一職責原則(Single Responsibility Principle)</h1><blockquote>\n<p>一個模組應該只對唯一的一個角色負責</p>\n</blockquote>\n<p>一個類別或模塊只應該負責一個功能或職責。這個原則有助於降低代碼的複雜度，使代碼更容易維護和擴展。這避免了一個類別出現了上帝類別（God Class)。</p>\n<p>舉例來說，這是一個員工類別。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Salary &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> CommissionRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> BonusRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateSalary</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算薪水的邏輯</span></span><br><span class=\"line\">        Salary = <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateCommission</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算佣金的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">CalculateBonus</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 計算獎金的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Sell</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 銷售的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DevelopSoftware</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 軟體開發的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>這類別包含很多方法。包括表示員工的數據、計算薪水、銷售、軟體開發和需求修改等功能。這導致代碼複雜度提高，使得這個類更難理解、修改和擴展。為了解決這個問題，可以使用單一職責原則。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Id &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Name &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> Salary &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">FinanceEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ManageAccounts</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 財務員工管理帳戶的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">ITEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">DevelopSoftware</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// IT員工開發軟體的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SalesEmployee</span> : <span class=\"title\">Employee</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">decimal</span> CommissionRate &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Sell</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 銷售人員銷售的邏輯</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>將 Employee 類分成 FinanceEmployee、ITEmployee 和 SalesEmployee 三個類。FinanceEmployee 類負責財務管理的功能，ITEmployee 類負責開發軟體的功能，SalesEmployee 類負責銷售的功能。每個類都只負責一個職責，從而使代碼更易於理解、修改和擴展。</p>\n","text":"單一職責原則(Single Responsibility Principle)一個模組應該只對唯一的一個角色負責一個類別或模塊只應該負責一個功能或職責。這個原則有助於降低代碼的複雜度，使代碼更容易維護和擴展。這避免了一個類別出現了上帝類別（God Class)。舉例來說，這是一個","link":"","raw":null,"photos":[],"categories":[{"name":"OOP","slug":"OOP","count":8,"path":"api/categories/OOP.json"},{"name":"SOLID","slug":"OOP/SOLID","count":5,"path":"api/categories/OOP/SOLID.json"}],"tags":[{"name":"2024","slug":"2024","count":9,"path":"api/tags/2024.json"},{"name":"OOP","slug":"OOP","count":5,"path":"api/tags/OOP.json"},{"name":"SOLID","slug":"SOLID","count":5,"path":"api/tags/SOLID.json"}]},{"title":"更高效 Logging - LoggerMessage","slug":"LoggingMessage","date":"2024-02-16T12:19:48.000Z","updated":"2024-02-16T12:34:03.134Z","comments":true,"path":"api/articles/LoggingMessage.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"Logging-LoggerMessage\"><a href=\"#Logging-LoggerMessage\" class=\"headerlink\" title=\"Logging - LoggerMessage\"></a>Logging - LoggerMessage</h1><p>原先在記錄Log都會使用微軟提供LoggingExtensions方法，最近朋友聊天分享給我<code>LoggerMessage.cs</code>與<code>LoggerMessageAttribute.cs</code>。於是研究一下並記錄一下。</p>\n<p>這方式把寫Log的方式更好的管理及使用強型別方式。</p>\n<p>下面提供兩種方式去改寫 Logging 也可以提升效能，官方文件提到以下原因。</p>\n<blockquote>\n<p>相較於記錄器擴充方法，LoggerMessage 提供下列效能優勢：<br>記錄器擴充方法需要 “boxing” (轉換) 實值型別，例如將 int 轉換為 object。 LoggerMessage 模式可使用靜態 Action 欄位和擴充方法搭配強型別參數來避免 boxing。<br>記錄器擴充方法在每次寫入記錄訊息時，都必須剖析訊息範本 (具名格式字串)。 LoggerMessage 只需在定義訊息時剖析範本一次。</p>\n</blockquote>\n<p>這是原本使用 <code>LoggingExtensions.cs</code>去寫 Logging，這邊要注意的是 EventId 是自定的數字。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  [<span class=\"meta\">HttpGet(Name = <span class=\"string\">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;WeatherForecast&gt; <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      _logger.LogInformation</span><br><span class=\"line\">(</span><br><span class=\"line\">\t<span class=\"keyword\">new</span> EventId(<span class=\"number\">13</span>,<span class=\"string\">&quot;CreateOrderFailure&quot;</span>),</span><br><span class=\"line\">\t<span class=\"string\">&quot;create order failed !! order id : &#123;orderId&#125;&quot;</span>,<span class=\"number\">100</span></span><br><span class=\"line\">);</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 略</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<hr>\n<h2 id=\"第一種方式-LoggerMessage-類別\"><a href=\"#第一種方式-LoggerMessage-類別\" class=\"headerlink\" title=\"第一種方式 - LoggerMessage 類別\"></a>第一種方式 - LoggerMessage 類別</h2><p>LoggerMessage.Define 是回傳委派共提供最多六個參數。<br>這邊簡單建立類別。</p>\n<ul>\n<li><p>LogHelper.cs</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">LogHelper</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Action&lt;ILogger, <span class=\"built_in\">int</span>, Exception&gt; FailedToCreateOrder =&gt; LoggerMessage.Define&lt;<span class=\"built_in\">int</span>&gt;</span><br><span class=\"line\">    (</span><br><span class=\"line\">        LogLevel.Information,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> EventId(<span class=\"number\">13</span>, <span class=\"keyword\">nameof</span>(CreateOrderFailure)),</span><br><span class=\"line\">        <span class=\"string\">&quot;create order failed !! order id : &#123;order.Id&#125;&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateOrderFailure</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger,Order order</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (logger.IsEnabled(LogLevel.Information))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            FailedToCreateOrder(logger, order.Id, <span class=\"literal\">default</span>!);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n<li><p>調用方</p>\n</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet(Name = <span class=\"string\">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;WeatherForecast&gt; <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用擴充方法</span></span><br><span class=\"line\">    _logger.CreateOrderFailure(<span class=\"keyword\">new</span> Order</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Id=<span class=\"number\">100</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>執行結果 :</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: LogDefinition.Controllers.WeatherForecastController[13]</span><br><span class=\"line\">      create order failed !! order id : 100</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"第二種方式-LoggerMessageAttribute-類別\"><a href=\"#第二種方式-LoggerMessageAttribute-類別\" class=\"headerlink\" title=\"第二種方式 - LoggerMessageAttribute 類別\"></a>第二種方式 - LoggerMessageAttribute 類別</h2><p>這邊要注意的是 <code>LoggerMessageAttribute.cs</code> 類別是在 <strong>.Net 6</strong> 以後才引入的。</p>\n<p>使用 LoggerMessageAttribute 時，必須遵守限制：</p>\n<ul>\n<li>記錄方法必須為 partial 並傳回 void。</li>\n<li>記錄方法名稱不可以底線開頭。</li>\n<li>記錄方法的參數名稱不可以底線開頭。</li>\n<li>記錄方法不可在巢狀型別中定義。</li>\n<li>記錄方法不可為泛型。</li>\n<li>如果記錄方法為 static，則須以 ILogger 執行個體作為參數。</li>\n</ul>\n<p>這邊也建立 <code>LogHelperV2.cs</code> 類別</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">LogHelperV2</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(13, LogLevel.Information, <span class=\"string\">&quot;create order failed !! order id : &#123;OrderId&#125;&quot;</span>, EventName = <span class=\"string\">&quot;CreateOrderFailureV2&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">CreateOrderFailureV2</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger, <span class=\"built_in\">int</span> orderId</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>調用方:</li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">HttpGet(Name = <span class=\"string\">&quot;GetWeatherForecast&quot;</span>)</span>]</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> IEnumerable&lt;WeatherForecast&gt; <span class=\"title\">Get</span>()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">       <span class=\"comment\">// 加上這一行</span></span><br><span class=\"line\">       _logger.CreateOrderFailureV2(<span class=\"number\">100</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 略</span></span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>執行結果 : </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">info: LogDefinition.Controllers.WeatherForecastController[13]</span><br><span class=\"line\">      create order failed !! order id : 100</span><br></pre></td></tr></table></figure>\n\n<p>這邊也提供官方範例作為範例。</p>\n<ul>\n<li>官方範例 : <a href=\"https://github.com/dotnet/aspnetcore/blob/9db62024cbe3c3cb28efe372541fc1bdfcdb375e/src/Middleware/HttpsPolicy/src/HttpsLoggingExtensions.cs\">HttpsLoggingExtensions.cs</a></li>\n</ul>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> Microsoft.Extensions.Logging;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Microsoft.AspNetCore.HttpsPolicy</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">internal</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpsLoggingExtensions</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(1, LogLevel.Debug, <span class=\"string\">&quot;Redirecting to &#x27;&#123;redirect&#125;&#x27;.&quot;</span>, EventName = <span class=\"string\">&quot;RedirectingToHttps&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">RedirectingToHttps</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger, <span class=\"built_in\">string</span> redirect</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(2, LogLevel.Debug, <span class=\"string\">&quot;Https port &#x27;&#123;port&#125;&#x27; loaded from configuration.&quot;</span>, EventName = <span class=\"string\">&quot;PortLoadedFromConfig&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">PortLoadedFromConfig</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger, <span class=\"built_in\">int</span> port</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(3, LogLevel.Warning, <span class=\"string\">&quot;Failed to determine the https port for redirect.&quot;</span>, EventName = <span class=\"string\">&quot;FailedToDeterminePort&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">FailedToDeterminePort</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    [<span class=\"meta\">LoggerMessage(5, LogLevel.Debug, <span class=\"string\">&quot;Https port &#x27;&#123;httpsPort&#125;&#x27; discovered from server endpoints.&quot;</span>, EventName = <span class=\"string\">&quot;PortFromServer&quot;</span>)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">partial</span> <span class=\"keyword\">void</span> <span class=\"title\">PortFromServer</span>(<span class=\"params\"><span class=\"keyword\">this</span> ILogger logger, <span class=\"built_in\">int</span> httpsPort</span>)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"資料來源\"><a href=\"#資料來源\" class=\"headerlink\" title=\"資料來源\"></a>資料來源</h2><ul>\n<li><a href=\"https://learn.microsoft.com/zh-tw/dotnet/core/extensions/high-performance-logging\">https://learn.microsoft.com/zh-tw/dotnet/core/extensions/high-performance-logging</a></li>\n<li><a href=\"https://learn.microsoft.com/zh-tw/dotnet/core/extensions/logger-message-generator\">https://learn.microsoft.com/zh-tw/dotnet/core/extensions/logger-message-generator</a></li>\n</ul>\n","text":"Logging - LoggerMessage原先在記錄Log都會使用微軟提供LoggingExtensions方法，最近朋友聊天分享給我LoggerMessage.cs與LoggerMessageAttribute.cs。於是研究一下並記錄一下。這方式把寫Log的方式更好的管理","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":3,"path":"api/categories/WebAPI.json"},{"name":"Log","slug":"WebAPI/Log","count":1,"path":"api/categories/WebAPI/Log.json"}],"tags":[{"name":".Net Core","slug":"Net-Core","count":8,"path":"api/tags/Net-Core.json"},{"name":"WebAPI","slug":"WebAPI","count":2,"path":"api/tags/WebAPI.json"},{"name":"2024","slug":"2024","count":9,"path":"api/tags/2024.json"}]},{"title":"MockServer 整合測試","slug":"MockServer_1","date":"2024-01-14T13:19:48.000Z","updated":"2024-01-14T14:00:13.571Z","comments":true,"path":"api/articles/MockServer_1.json","excerpt":"","keywords":null,"cover":"/../static/images/MockServerUI.png","content":"<h1 id=\"Mock-Server\"><a href=\"#Mock-Server\" class=\"headerlink\" title=\"Mock Server\"></a>Mock Server</h1><p>由於要針對API 服務進行壓力測試，並假設其他服務有回應延遲，需要使用一套簡單使用的MockServer，原本想使用Postman，但礙於環境限制，於是找一套可以運行在Docker上的MockServer。</p>\n<h2 id=\"Docker-Install\"><a href=\"#Docker-Install\" class=\"headerlink\" title=\"Docker Install\"></a>Docker Install</h2><p>首先執行 Docker 指令下載 Docker Image，並執行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name mockserver -p 1080:1080 mockserver/mockserver</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"MockServer-UI\"><a href=\"#MockServer-UI\" class=\"headerlink\" title=\"MockServer UI\"></a>MockServer UI</h2><p>GET <code>http://localhost:1080/mockserver/dashboard</code>，在瀏覽器輸入這個網址便能看到 MockServer 的畫面。</p>\n<p>從這邊可以看到以下的畫面。<br><img src=\"/../static/images/MockServerUI.png\" alt=\"Dashboard\"></p>\n<h2 id=\"Create-or-Update-Expectation\"><a href=\"#Create-or-Update-Expectation\" class=\"headerlink\" title=\"Create or Update Expectation\"></a>Create or Update Expectation</h2><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Main</span>()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> mockServerHost = <span class=\"string\">&quot;http://localhost:1080&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">using</span> (<span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> HttpClient())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mockServerUrl = <span class=\"string\">$&quot;<span class=\"subst\">&#123;mockServerHost&#125;</span>/mockserver/expectation&quot;</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">var</span> expectation = <span class=\"keyword\">new</span> MockServerExpectation</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">\t\t\tId = <span class=\"string\">&quot;e5805f53-340b-4c9e-9399-aa0ac75266ee&quot;</span>,</span><br><span class=\"line\">\t\t\tPriority=<span class=\"number\">0</span>,</span><br><span class=\"line\">            HttpRequest = <span class=\"keyword\">new</span> HttpRequest</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Method = <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">                Path = <span class=\"string\">&quot;/get/yourpath&quot;</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"comment\">// 模擬回應</span></span><br><span class=\"line\">            HttpResponse = <span class=\"keyword\">new</span> HttpResponse</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                StatusCode = <span class=\"number\">200</span>,</span><br><span class=\"line\">                Body = JsonConvert.SerializeObject</span><br><span class=\"line\">\t\t\t\t(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">new</span> </span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        Success = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">                ),</span><br><span class=\"line\">                <span class=\"comment\">// 模擬延遲10秒回應</span></span><br><span class=\"line\">\t\t\t\tDelay = <span class=\"keyword\">new</span> Delay</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tTimeUnit = <span class=\"string\">&quot;SECONDS&quot;</span>,</span><br><span class=\"line\">\t\t\t\t\tValue = <span class=\"number\">10</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> jsonSetting = <span class=\"keyword\">new</span> JsonSerializerSettings </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tNullValueHandling = NullValueHandling.Ignore</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> json = JsonConvert.SerializeObject(expectation, jsonSetting);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> content = <span class=\"keyword\">new</span> StringContent(json, Encoding.UTF8, <span class=\"string\">&quot;application/json&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> response = client.PutAsync(mockServerUrl, content).GetAwaiter().GetResult();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tConsole.WriteLine(<span class=\"string\">$&quot;Response Status Code: <span class=\"subst\">&#123;response.StatusCode&#125;</span>&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">MockServerExpectation</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;id&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Id &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;priority&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Priority &#123;<span class=\"keyword\">get</span>;<span class=\"keyword\">set</span>;&#125; = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;httpRequest&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> HttpRequest HttpRequest &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;httpResponse&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> HttpResponse HttpResponse &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpRequest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;method&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Method &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;path&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> Path &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HttpResponse</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;statusCode&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">int</span> StatusCode &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;body&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">object</span> Body &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;delay&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Delay Delay &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Delay</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;timeUnit&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">string</span> TimeUnit &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t[<span class=\"meta\">JsonProperty(<span class=\"string\">&quot;value&quot;</span>)</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"built_in\">int</span> Value &#123; <span class=\"keyword\">get</span>; <span class=\"keyword\">set</span>; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Request 以下的 Content 給 MockServer，非常簡單使用。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;e5805f53-340b-4c9e-9399-aa0ac75266ee&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;priority&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">0</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;httpRequest&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;GET&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/get/yourpath&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;httpResponse&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;statusCode&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">200</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;body&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;&#123;\\&quot;Success\\&quot;:true&#125;&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;delay&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;timeUnit&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;SECONDS&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>使用上面的API 進行 建立修改 Expectation，之後將要Web服務指向這個Url即可進行使用。可以進行一些API異常測試等等。</p>\n<h2 id=\"使用情境\"><a href=\"#使用情境\" class=\"headerlink\" title=\"使用情境\"></a>使用情境</h2><ul>\n<li><strong>API 模擬</strong></li>\n</ul>\n<p>有時間我們需要測試串接第三方API，尤其對方還尚未提供測試環境。</p>\n<ul>\n<li><strong>錯誤處理模擬</strong></li>\n</ul>\n<p>測試應用程序如何處理各種錯誤 Response，如 4xx 和 5xx 狀態碼。</p>\n<ul>\n<li><strong>延時和性能測試</strong></li>\n</ul>\n<p>模擬回應延遲和服務器處理時間，這對於測試應用程序在不同條件下的性能非常有用。</p>\n<hr>\n<p>MockServer 非常適合於在開發階段進行測試，尤其當你需要與外部系統整合但該系統尚未準備。也可以用於自動化測試，提供一個可控且可預測的外部系統環境。</p>\n<p>原本的應用程式因為要測試情境，採用appsettings.json去控制測試情境。千萬不要把這種程式碼寫在Production Code Commit。</p>\n<h2 id=\"參考資料\"><a href=\"#參考資料\" class=\"headerlink\" title=\"參考資料\"></a>參考資料</h2><ul>\n<li><a href=\"https://www.tpisoftware.com/tpu/articleDetails/1895\">MockServer入門：輕鬆整合前後端接口</a></li>\n<li><a href=\"https://www.mock-server.com/\">MockServer 官方文件</a></li>\n</ul>\n","text":"Mock Server由於要針對API 服務進行壓力測試，並假設其他服務有回應延遲，需要使用一套簡單使用的MockServer，原本想使用Postman，但礙於環境限制，於是找一套可以運行在Docker上的MockServer。Docker Install首先執行 Docker ","link":"","raw":null,"photos":[],"categories":[{"name":"MockServer","slug":"MockServer","count":1,"path":"api/categories/MockServer.json"},{"name":"Test","slug":"MockServer/Test","count":1,"path":"api/categories/MockServer/Test.json"}],"tags":[{"name":"2024","slug":"2024","count":9,"path":"api/tags/2024.json"}]},{"title":"關於 HttpClient 使用方式","slug":"HttpClient","date":"2023-11-27T13:32:48.000Z","updated":"2023-11-27T13:40:05.011Z","comments":true,"path":"api/articles/HttpClient.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"關於-HttpClient\"><a href=\"#關於-HttpClient\" class=\"headerlink\" title=\"關於 HttpClient\"></a>關於 HttpClient</h1><p>因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在<strong>CSharp</strong>中最常使用的類別庫就是<code>HttpClient.cs</code>，但是<code>HttpClient.cs</code>使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。</p>\n<h2 id=\"官方不建議使用方式\"><a href=\"#官方不建議使用方式\" class=\"headerlink\" title=\"官方不建議使用方式\"></a>官方不建議使用方式</h2><br>\n\n<h3 id=\"直接使用using-HttpClient\"><a href=\"#直接使用using-HttpClient\" class=\"headerlink\" title=\"直接使用using HttpClient\"></a>直接使用<code>using</code> HttpClient</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">static async Task Main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tvar url = &quot;http://localhost:5259/WeatherForecast&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tint requestCount = 10000; // 設定請求的次數</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor (int i = 0; i &lt; requestCount; i++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tusing (var client = new HttpClient())</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ttry</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tvar response = await client.GetAsync(url);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tresponse.EnsureSuccessStatusCode();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcatch (Exception ex)</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tConsole.WriteLine($&quot;An error occurred: &#123;ex.Message&#125;&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tConsole.WriteLine(&quot;Finish!!&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>建立一支API 讓這段程式碼可以去Connection，很有可能會發生以下的錯誤。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">An error occurred: System.Net.Http.HttpRequestException: 一次只能用一個通訊端位址 (通訊協定/網路位址/連接埠)。 (localhost:5259)</span><br><span class=\"line\"> ---&gt; System.Net.Sockets.SocketException (10048): 一次只能用一個通訊端位址 (通訊協定/網路位址/連接埠)。</span><br><span class=\"line\">   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)</span><br><span class=\"line\">   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)</span><br><span class=\"line\">   at System.Net.Sockets.Socket.&lt;ConnectAsync&gt;g__WaitForConnectWithCancellation|281_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)</span><br><span class=\"line\">   at System.Net.Http.HttpConnectionPool.ConnectToTcpHostAsync(String host, Int32 port, HttpRequestMessage initialRequest, Boolean async, CancellationToken cancellationToken)</span><br><span class=\"line\">   --- End of inner exception stack trace ---</span><br><span class=\"line\">    // 略</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<p>在官方文件有提到這一點</p>\n<p><a href=\"https://learn.microsoft.com/zh-tw/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net\">.NET 中可用的原始 HttpClient 類別問題</a></p>\n<blockquote>\n<p>雖然這個類別會實作 IDisposable，但不建議在 using 陳述式內加以宣告及具現化，因為處置 <code>HttpClient.cs</code> 物件時，底層通訊端並不會立即釋放，而這可能會導致「通訊端耗盡」問題。 </p>\n</blockquote>\n<br>\n\n\n\n<h3 id=\"在Dependency-Injection-中使用Singleton或是宣告靜態物件\"><a href=\"#在Dependency-Injection-中使用Singleton或是宣告靜態物件\" class=\"headerlink\" title=\"在Dependency Injection 中使用Singleton或是宣告靜態物件\"></a>在Dependency Injection 中使用Singleton或是宣告靜態物件</h3><blockquote>\n<p>開發人員遇到的另一個問題是在長時間執行的處理序中使用 HttpClient 的共用執行個體時。 在 HttpClient 具現化為 singleton 或靜態物件的情況下，其並無法處理 DNS 變更</p>\n</blockquote>\n<p>例如:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 註冊成Singleton</span><br><span class=\"line\">builder.Services.AddSingleton&lt;HttpClient&gt;();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<br>\n<br>\n\n\n<h2 id=\"解決方式之一-使用IHttpClientFactory-cs\"><a href=\"#解決方式之一-使用IHttpClientFactory-cs\" class=\"headerlink\" title=\"解決方式之一 使用IHttpClientFactory.cs\"></a>解決方式之一 使用<code>IHttpClientFactory.cs</code></h2><p>在 .Net Core引入<code>IHttpClientFactory.cs</code>介面去建立<code>HttpClient.cs</code>。<br>特點是可以由<code>IHttpClientFactory.cs</code>去管理HttpMessageHandler的生命週期，避免自行管理<code>HttpClient.cs</code>的生命週期。</p>\n<h3 id=\"基本使用方式\"><a href=\"#基本使用方式\" class=\"headerlink\" title=\"基本使用方式\"></a>基本使用方式</h3><p>需要在Dependency Injection裡面加上了<code> services.AddHttpClient();</code> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 加上這一行</span><br><span class=\"line\">builder.Services.AddHttpClient();</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"具名HttpClient\"><a href=\"#具名HttpClient\" class=\"headerlink\" title=\"具名HttpClient\"></a>具名HttpClient</h3><ul>\n<li>應用程式需要不同的HttpClient用法或是設定。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var builder = WebApplication.CreateBuilder(args);</span><br><span class=\"line\"></span><br><span class=\"line\">// Add services to the container.</span><br><span class=\"line\"></span><br><span class=\"line\">builder.Services.AddControllers();</span><br><span class=\"line\">// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle</span><br><span class=\"line\">builder.Services.AddEndpointsApiExplorer();</span><br><span class=\"line\">builder.Services.AddSwaggerGen();</span><br><span class=\"line\"></span><br><span class=\"line\">// 加上這一行</span><br><span class=\"line\">builder.Services.AddHttpClient(&quot;YourName&quot;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"調用方\"><a href=\"#調用方\" class=\"headerlink\" title=\"調用方\"></a>調用方</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class Repository</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private readonly IHttpClientFactory _httpClientFactory;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public Repository(IHttpClientFactory httpClientFactory)  </span><br><span class=\"line\">    &#123;        </span><br><span class=\"line\">        this._httpClientFactory = httpClientFactory;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public async Task&lt;Todo[]&gt; GetToDos()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string url = &quot;your service url&quot;;</span><br><span class=\"line\">        </span><br><span class=\"line\">        using var client = _httpClientFactory.CreateClient(&quot;YourName&quot;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        var response = await client.GetFromJsonAsync&lt;Todo[]&gt;(url,new JsonSerializerOptions(JsonSerializerDefaults.Web));  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn response;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n","text":"關於 HttpClient因為許多企業大量採用微服務，導致使用 HTTP 連線非常頻繁。在CSharp中最常使用的類別庫就是HttpClient.cs，但是HttpClient.cs使用方式也是需要注意，一不小心就會造成Connection資源耗盡的問題。官方不建議使用方式<br","link":"","raw":null,"photos":[],"categories":[{"name":"WebAPI","slug":"WebAPI","count":3,"path":"api/categories/WebAPI.json"},{"name":"HTTP","slug":"HTTP","count":1,"path":"api/categories/HTTP.json"}],"tags":[{"name":"2023","slug":"2023","count":7,"path":"api/tags/2023.json"},{"name":".Net Core","slug":"Net-Core","count":8,"path":"api/tags/Net-Core.json"}]}]}